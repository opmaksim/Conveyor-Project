
mathmatics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bee8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c00  0800c088  0800c088  0000d088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc88  0800cc88  0000e218  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc88  0800cc88  0000dc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc90  0800cc90  0000e218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc90  0800cc90  0000dc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc94  0800cc94  0000dc94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800cc98  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b3c  20000218  0800ceb0  0000e218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d54  0800ceb0  0000ed54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea87  00000000  00000000  0000e248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b0  00000000  00000000  0001cccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0001ef80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab2  00000000  00000000  0001fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a2d  00000000  00000000  000207e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe92  00000000  00000000  0003820f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910f9  00000000  00000000  000480a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d919a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e4  00000000  00000000  000d91e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000de6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c070 	.word	0x0800c070

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800c070 	.word	0x0800c070

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <esp_at_command>:
static uint8_t data;
//static cb_data_t cb_data;
cb_data_t cb_data;
UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	807b      	strh	r3, [r7, #2]
    *length = 0;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8001028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800102c:	2100      	movs	r1, #0
 800102e:	68b8      	ldr	r0, [r7, #8]
 8001030:	f005 ffa6 	bl	8006f80 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8001034:	f240 4202 	movw	r2, #1026	@ 0x402
 8001038:	2100      	movs	r1, #0
 800103a:	4827      	ldr	r0, [pc, #156]	@ (80010d8 <esp_at_command+0xc4>)
 800103c:	f005 ffa0 	bl	8006f80 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f7ff f92d 	bl	80002a0 <strlen>
 8001046:	4603      	mov	r3, r0
 8001048:	b29a      	uxth	r2, r3
 800104a:	2364      	movs	r3, #100	@ 0x64
 800104c:	68f9      	ldr	r1, [r7, #12]
 800104e:	4823      	ldr	r0, [pc, #140]	@ (80010dc <esp_at_command+0xc8>)
 8001050:	f003 fe3e 	bl	8004cd0 <HAL_UART_Transmit>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d031      	beq.n	80010be <esp_at_command+0xaa>
        return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	e037      	b.n	80010d0 <esp_at_command+0xbc>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8001060:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <esp_at_command+0xc4>)
 8001062:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001066:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800106a:	d302      	bcc.n	8001072 <esp_at_command+0x5e>
            return -2;
 800106c:	f06f 0301 	mvn.w	r3, #1
 8001070:	e02e      	b.n	80010d0 <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 8001072:	491b      	ldr	r1, [pc, #108]	@ (80010e0 <esp_at_command+0xcc>)
 8001074:	4818      	ldr	r0, [pc, #96]	@ (80010d8 <esp_at_command+0xc4>)
 8001076:	f006 f807 	bl	8007088 <strstr>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <esp_at_command+0x72>
            return -3;
 8001080:	f06f 0302 	mvn.w	r3, #2
 8001084:	e024      	b.n	80010d0 <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8001086:	4917      	ldr	r1, [pc, #92]	@ (80010e4 <esp_at_command+0xd0>)
 8001088:	4813      	ldr	r0, [pc, #76]	@ (80010d8 <esp_at_command+0xc4>)
 800108a:	f005 fffd 	bl	8007088 <strstr>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00d      	beq.n	80010b0 <esp_at_command+0x9c>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8001094:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <esp_at_command+0xc4>)
 8001096:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800109a:	461a      	mov	r2, r3
 800109c:	490e      	ldr	r1, [pc, #56]	@ (80010d8 <esp_at_command+0xc4>)
 800109e:	68b8      	ldr	r0, [r7, #8]
 80010a0:	f006 f887 	bl	80071b2 <memcpy>
            *length = cb_data.length;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <esp_at_command+0xc4>)
 80010a6:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	801a      	strh	r2, [r3, #0]

            break;
 80010ae:	e00a      	b.n	80010c6 <esp_at_command+0xb2>
        }

        time_out -= 10;
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	3b0a      	subs	r3, #10
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 80010b8:	200a      	movs	r0, #10
 80010ba:	f001 ff7b 	bl	8002fb4 <HAL_Delay>
    while(time_out > 0)
 80010be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	dccc      	bgt.n	8001060 <esp_at_command+0x4c>
    }
    HAL_Delay(500);
 80010c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010ca:	f001 ff73 	bl	8002fb4 <HAL_Delay>
    return 0;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200006c4 	.word	0x200006c4
 80010dc:	20000ac8 	.word	0x20000ac8
 80010e0:	0800c088 	.word	0x0800c088
 80010e4:	0800c090 	.word	0x0800c090

080010e8 <esp_reset>:

static int esp_reset(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 80010f2:	1dba      	adds	r2, r7, #6
 80010f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f8:	490a      	ldr	r1, [pc, #40]	@ (8001124 <esp_reset+0x3c>)
 80010fa:	480b      	ldr	r0, [pc, #44]	@ (8001128 <esp_reset+0x40>)
 80010fc:	f7ff ff8a 	bl	8001014 <esp_at_command>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <esp_reset+0x24>
    {
       return -1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e007      	b.n	800111c <esp_reset+0x34>
    }
    return esp_at_command((uint8_t *)"AT\r\n", (uint8_t *)response, &length, 1000);
 800110c:	1dba      	adds	r2, r7, #6
 800110e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001112:	4904      	ldr	r1, [pc, #16]	@ (8001124 <esp_reset+0x3c>)
 8001114:	4805      	ldr	r0, [pc, #20]	@ (800112c <esp_reset+0x44>)
 8001116:	f7ff ff7d 	bl	8001014 <esp_at_command>
 800111a:	4603      	mov	r3, r0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000244 	.word	0x20000244
 8001128:	0800c094 	.word	0x0800c094
 800112c:	0800c0a0 	.word	0x0800c0a0

08001130 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 800113e:	f107 020a 	add.w	r2, r7, #10
 8001142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001146:	492d      	ldr	r1, [pc, #180]	@ (80011fc <request_ip_addr+0xcc>)
 8001148:	482d      	ldr	r0, [pc, #180]	@ (8001200 <request_ip_addr+0xd0>)
 800114a:	f7ff ff63 	bl	8001014 <esp_at_command>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8001154:	482b      	ldr	r0, [pc, #172]	@ (8001204 <request_ip_addr+0xd4>)
 8001156:	f005 fd5f 	bl	8006c18 <puts>
 800115a:	e049      	b.n	80011f0 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 800115c:	492a      	ldr	r1, [pc, #168]	@ (8001208 <request_ip_addr+0xd8>)
 800115e:	4827      	ldr	r0, [pc, #156]	@ (80011fc <request_ip_addr+0xcc>)
 8001160:	f005 ff36 	bl	8006fd0 <strtok>
 8001164:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d03e      	beq.n	80011ea <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	e009      	b.n	8001186 <request_ip_addr+0x56>
                printf("%c", response[i]);
 8001172:	4a22      	ldr	r2, [pc, #136]	@ (80011fc <request_ip_addr+0xcc>)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f005 fcee 	bl	8006b5c <putchar>
            for(int i = 0 ; i < length ; i++)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	3301      	adds	r3, #1
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	897b      	ldrh	r3, [r7, #10]
 8001188:	461a      	mov	r2, r3
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4293      	cmp	r3, r2
 800118e:	dbf0      	blt.n	8001172 <request_ip_addr+0x42>
        }

        while(line != NULL)
 8001190:	e02b      	b.n	80011ea <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8001192:	491e      	ldr	r1, [pc, #120]	@ (800120c <request_ip_addr+0xdc>)
 8001194:	6978      	ldr	r0, [r7, #20]
 8001196:	f005 ff77 	bl	8007088 <strstr>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d01f      	beq.n	80011e0 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 80011a0:	491b      	ldr	r1, [pc, #108]	@ (8001210 <request_ip_addr+0xe0>)
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f005 ff14 	bl	8006fd0 <strtok>
                ip = strtok(NULL, "\"");
 80011a8:	4919      	ldr	r1, [pc, #100]	@ (8001210 <request_ip_addr+0xe0>)
 80011aa:	2000      	movs	r0, #0
 80011ac:	f005 ff10 	bl	8006fd0 <strtok>
 80011b0:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 80011b2:	4918      	ldr	r1, [pc, #96]	@ (8001214 <request_ip_addr+0xe4>)
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f7ff f813 	bl	80001e0 <strcmp>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00f      	beq.n	80011e0 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 80011c0:	2210      	movs	r2, #16
 80011c2:	2100      	movs	r1, #0
 80011c4:	4814      	ldr	r0, [pc, #80]	@ (8001218 <request_ip_addr+0xe8>)
 80011c6:	f005 fedb 	bl	8006f80 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff f868 	bl	80002a0 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	68f9      	ldr	r1, [r7, #12]
 80011d6:	4810      	ldr	r0, [pc, #64]	@ (8001218 <request_ip_addr+0xe8>)
 80011d8:	f005 ffeb 	bl	80071b2 <memcpy>
                    return 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	e009      	b.n	80011f4 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 80011e0:	4909      	ldr	r1, [pc, #36]	@ (8001208 <request_ip_addr+0xd8>)
 80011e2:	2000      	movs	r0, #0
 80011e4:	f005 fef4 	bl	8006fd0 <strtok>
 80011e8:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1d0      	bne.n	8001192 <request_ip_addr+0x62>
        }
    }

    return -1;
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000244 	.word	0x20000244
 8001200:	0800c0e4 	.word	0x0800c0e4
 8001204:	0800c0f0 	.word	0x0800c0f0
 8001208:	0800c0d8 	.word	0x0800c0d8
 800120c:	0800c110 	.word	0x0800c110
 8001210:	0800c0e0 	.word	0x0800c0e0
 8001214:	0800c0a8 	.word	0x0800c0a8
 8001218:	20000234 	.word	0x20000234

0800121c <esp_client_conn>:
int esp_client_conn()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b092      	sub	sp, #72	@ 0x48
 8001220:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	223c      	movs	r2, #60	@ 0x3c
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f005 fea6 	bl	8006f80 <memset>
  uint16_t length = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8001238:	f107 0008 	add.w	r0, r7, #8
 800123c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001240:	4a09      	ldr	r2, [pc, #36]	@ (8001268 <esp_client_conn+0x4c>)
 8001242:	490a      	ldr	r1, [pc, #40]	@ (800126c <esp_client_conn+0x50>)
 8001244:	f005 fda4 	bl	8006d90 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8001248:	1dba      	adds	r2, r7, #6
 800124a:	f107 0008 	add.w	r0, r7, #8
 800124e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001252:	4907      	ldr	r1, [pc, #28]	@ (8001270 <esp_client_conn+0x54>)
 8001254:	f7ff fede 	bl	8001014 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8001258:	4806      	ldr	r0, [pc, #24]	@ (8001274 <esp_client_conn+0x58>)
 800125a:	f000 f95d 	bl	8001518 <esp_send_data>
	return 0;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3748      	adds	r7, #72	@ 0x48
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800c11c 	.word	0x0800c11c
 800126c:	0800c12c 	.word	0x0800c12c
 8001270:	20000244 	.word	0x20000244
 8001274:	0800c148 	.word	0x0800c148

08001278 <drv_esp_init>:

int drv_esp_init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
    huart6.Instance = USART6;
 800127c:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <drv_esp_init+0x68>)
 800127e:	4a19      	ldr	r2, [pc, #100]	@ (80012e4 <drv_esp_init+0x6c>)
 8001280:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 115200;
 8001282:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <drv_esp_init+0x68>)
 8001284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001288:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <drv_esp_init+0x68>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <drv_esp_init+0x68>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <drv_esp_init+0x68>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <drv_esp_init+0x68>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <drv_esp_init+0x68>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <drv_esp_init+0x68>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart6) != HAL_OK)
 80012ae:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <drv_esp_init+0x68>)
 80012b0:	f003 fcbe 	bl	8004c30 <HAL_UART_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <drv_esp_init+0x48>
        return -1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	e00c      	b.n	80012da <drv_esp_init+0x62>

    memset(ip_addr, 0x00, sizeof(ip_addr));
 80012c0:	2210      	movs	r2, #16
 80012c2:	2100      	movs	r1, #0
 80012c4:	4808      	ldr	r0, [pc, #32]	@ (80012e8 <drv_esp_init+0x70>)
 80012c6:	f005 fe5b 	bl	8006f80 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 80012ca:	2201      	movs	r2, #1
 80012cc:	4907      	ldr	r1, [pc, #28]	@ (80012ec <drv_esp_init+0x74>)
 80012ce:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <drv_esp_init+0x68>)
 80012d0:	f003 fd89 	bl	8004de6 <HAL_UART_Receive_IT>

    return esp_reset();
 80012d4:	f7ff ff08 	bl	80010e8 <esp_reset>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000ac8 	.word	0x20000ac8
 80012e4:	40011400 	.word	0x40011400
 80012e8:	20000234 	.word	0x20000234
 80012ec:	200006c3 	.word	0x200006c3

080012f0 <reset_func>:
void reset_func()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 80012f4:	4808      	ldr	r0, [pc, #32]	@ (8001318 <reset_func+0x28>)
 80012f6:	f005 fc1f 	bl	8006b38 <iprintf>
	if(esp_reset() == 0)
 80012fa:	f7ff fef5 	bl	80010e8 <esp_reset>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d103      	bne.n	800130c <reset_func+0x1c>
			printf("OK\r\n");
 8001304:	4805      	ldr	r0, [pc, #20]	@ (800131c <reset_func+0x2c>)
 8001306:	f005 fc87 	bl	8006c18 <puts>
	else
			printf("fail\r\n");
}
 800130a:	e002      	b.n	8001312 <reset_func+0x22>
			printf("fail\r\n");
 800130c:	4804      	ldr	r0, [pc, #16]	@ (8001320 <reset_func+0x30>)
 800130e:	f005 fc83 	bl	8006c18 <puts>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	0800c15c 	.word	0x0800c15c
 800131c:	0800c16c 	.word	0x0800c16c
 8001320:	0800c170 	.word	0x0800c170

08001324 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b096      	sub	sp, #88	@ 0x58
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	223c      	movs	r2, #60	@ 0x3c
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f005 fe1d 	bl	8006f80 <memset>
  if(ssid == NULL || passwd == NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <ap_conn_func+0x2e>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d103      	bne.n	800135a <ap_conn_func+0x36>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8001352:	4832      	ldr	r0, [pc, #200]	@ (800141c <ap_conn_func+0xf8>)
 8001354:	f005 fc60 	bl	8006c18 <puts>
 8001358:	e05c      	b.n	8001414 <ap_conn_func+0xf0>
      return;
  }
  memset(at_cmd, 0x00, sizeof(at_cmd));
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2240      	movs	r2, #64	@ 0x40
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f005 fe0c 	bl	8006f80 <memset>
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 8001368:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 800136c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001370:	492b      	ldr	r1, [pc, #172]	@ (8001420 <ap_conn_func+0xfc>)
 8001372:	482c      	ldr	r0, [pc, #176]	@ (8001424 <ap_conn_func+0x100>)
 8001374:	f7ff fe4e 	bl	8001014 <esp_at_command>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <ap_conn_func+0x62>
      printf("Station mode fail\r\n");
 800137e:	482a      	ldr	r0, [pc, #168]	@ (8001428 <ap_conn_func+0x104>)
 8001380:	f005 fc4a 	bl	8006c18 <puts>
 8001384:	e012      	b.n	80013ac <ap_conn_func+0x88>
  else
  {
      for(int i = 0 ; i < length ; i++)
 8001386:	2300      	movs	r3, #0
 8001388:	657b      	str	r3, [r7, #84]	@ 0x54
 800138a:	e009      	b.n	80013a0 <ap_conn_func+0x7c>
          printf("%c", response[i]);
 800138c:	4a24      	ldr	r2, [pc, #144]	@ (8001420 <ap_conn_func+0xfc>)
 800138e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001390:	4413      	add	r3, r2
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f005 fbe1 	bl	8006b5c <putchar>
      for(int i = 0 ; i < length ; i++)
 800139a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800139c:	3301      	adds	r3, #1
 800139e:	657b      	str	r3, [r7, #84]	@ 0x54
 80013a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80013a4:	461a      	mov	r2, r3
 80013a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013a8:	4293      	cmp	r3, r2
 80013aa:	dbef      	blt.n	800138c <ap_conn_func+0x68>
  }
  memset(at_cmd, 0x00, sizeof(at_cmd));
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	2240      	movs	r2, #64	@ 0x40
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 fde3 	bl	8006f80 <memset>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 80013ba:	f107 000c 	add.w	r0, r7, #12
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	491a      	ldr	r1, [pc, #104]	@ (800142c <ap_conn_func+0x108>)
 80013c4:	f005 fce4 	bl	8006d90 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 80013c8:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 80013cc:	f107 000c 	add.w	r0, r7, #12
 80013d0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80013d4:	4912      	ldr	r1, [pc, #72]	@ (8001420 <ap_conn_func+0xfc>)
 80013d6:	f7ff fe1d 	bl	8001014 <esp_at_command>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <ap_conn_func+0xca>
      printf("ap scan command fail : %s\r\n",at_cmd);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	4812      	ldr	r0, [pc, #72]	@ (8001430 <ap_conn_func+0x10c>)
 80013e8:	f005 fba6 	bl	8006b38 <iprintf>
 80013ec:	e012      	b.n	8001414 <ap_conn_func+0xf0>
  else
  {
      for(int i = 0 ; i < length ; i++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80013f2:	e009      	b.n	8001408 <ap_conn_func+0xe4>
          printf("%c", response[i]);
 80013f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <ap_conn_func+0xfc>)
 80013f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013f8:	4413      	add	r3, r2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f005 fbad 	bl	8006b5c <putchar>
      for(int i = 0 ; i < length ; i++)
 8001402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001404:	3301      	adds	r3, #1
 8001406:	653b      	str	r3, [r7, #80]	@ 0x50
 8001408:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800140c:	461a      	mov	r2, r3
 800140e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001410:	4293      	cmp	r3, r2
 8001412:	dbef      	blt.n	80013f4 <ap_conn_func+0xd0>
  }
}
 8001414:	3758      	adds	r7, #88	@ 0x58
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	0800c1b4 	.word	0x0800c1b4
 8001420:	20000244 	.word	0x20000244
 8001424:	0800c1e0 	.word	0x0800c1e0
 8001428:	0800c1f0 	.word	0x0800c1f0
 800142c:	0800c204 	.word	0x0800c204
 8001430:	0800c21c 	.word	0x0800c21c

08001434 <HAL_UART_RxCpltCallback>:

    return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a23      	ldr	r2, [pc, #140]	@ (80014d0 <HAL_UART_RxCpltCallback+0x9c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d117      	bne.n	8001476 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8001446:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <HAL_UART_RxCpltCallback+0xa0>)
 8001448:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800144c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001450:	d20c      	bcs.n	800146c <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <HAL_UART_RxCpltCallback+0xa0>)
 8001454:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	b291      	uxth	r1, r2
 800145c:	4a1d      	ldr	r2, [pc, #116]	@ (80014d4 <HAL_UART_RxCpltCallback+0xa0>)
 800145e:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8001462:	461a      	mov	r2, r3
 8001464:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <HAL_UART_RxCpltCallback+0xa4>)
 8001466:	7819      	ldrb	r1, [r3, #0]
 8001468:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <HAL_UART_RxCpltCallback+0xa0>)
 800146a:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 800146c:	2201      	movs	r2, #1
 800146e:	491a      	ldr	r1, [pc, #104]	@ (80014d8 <HAL_UART_RxCpltCallback+0xa4>)
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f003 fcb8 	bl	8004de6 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a18      	ldr	r2, [pc, #96]	@ (80014dc <HAL_UART_RxCpltCallback+0xa8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d122      	bne.n	80014c6 <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <HAL_UART_RxCpltCallback+0xac>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a17      	ldr	r2, [pc, #92]	@ (80014e4 <HAL_UART_RxCpltCallback+0xb0>)
 8001486:	7811      	ldrb	r1, [r2, #0]
 8001488:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <HAL_UART_RxCpltCallback+0xb4>)
 800148a:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 800148c:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <HAL_UART_RxCpltCallback+0xac>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a15      	ldr	r2, [pc, #84]	@ (80014e8 <HAL_UART_RxCpltCallback+0xb4>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b0d      	cmp	r3, #13
 8001498:	d10b      	bne.n	80014b2 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_UART_RxCpltCallback+0xac>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <HAL_UART_RxCpltCallback+0xb4>)
 80014a0:	2100      	movs	r1, #0
 80014a2:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <HAL_UART_RxCpltCallback+0xb8>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80014aa:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <HAL_UART_RxCpltCallback+0xac>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e004      	b.n	80014bc <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <HAL_UART_RxCpltCallback+0xac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	4a09      	ldr	r2, [pc, #36]	@ (80014e0 <HAL_UART_RxCpltCallback+0xac>)
 80014ba:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 80014bc:	2201      	movs	r2, #1
 80014be:	4909      	ldr	r1, [pc, #36]	@ (80014e4 <HAL_UART_RxCpltCallback+0xb0>)
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f003 fc90 	bl	8004de6 <HAL_UART_Receive_IT>
    }
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40011400 	.word	0x40011400
 80014d4:	200006c4 	.word	0x200006c4
 80014d8:	200006c3 	.word	0x200006c3
 80014dc:	40004400 	.word	0x40004400
 80014e0:	20000b10 	.word	0x20000b10
 80014e4:	200006c2 	.word	0x200006c2
 80014e8:	20000690 	.word	0x20000690
 80014ec:	2000068c 	.word	0x2000068c

080014f0 <AiotClient_Init>:


void AiotClient_Init()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	reset_func();
 80014f4:	f7ff fefc 	bl	80012f0 <reset_func>
//	version_func();
	ap_conn_func(SSID,PASS);
 80014f8:	4905      	ldr	r1, [pc, #20]	@ (8001510 <AiotClient_Init+0x20>)
 80014fa:	4806      	ldr	r0, [pc, #24]	@ (8001514 <AiotClient_Init+0x24>)
 80014fc:	f7ff ff12 	bl	8001324 <ap_conn_func>
//	start_esp_server();
//	ip_state_func();
	request_ip_addr(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff fe15 	bl	8001130 <request_ip_addr>
	esp_client_conn();
 8001506:	f7ff fe89 	bl	800121c <esp_client_conn>
//	ip_state_func();
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	0800c5f4 	.word	0x0800c5f4
 8001514:	0800c588 	.word	0x0800c588

08001518 <esp_send_data>:

void esp_send_data(char *data)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b094      	sub	sp, #80	@ 0x50
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	223c      	movs	r2, #60	@ 0x3c
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f005 fd27 	bl	8006f80 <memset>
  uint16_t length = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7fe feb2 	bl	80002a0 <strlen>
 800153c:	4602      	mov	r2, r0
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	490e      	ldr	r1, [pc, #56]	@ (800157c <esp_send_data+0x64>)
 8001544:	4618      	mov	r0, r3
 8001546:	f005 fc23 	bl	8006d90 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 800154a:	f107 020e 	add.w	r2, r7, #14
 800154e:	f107 0010 	add.w	r0, r7, #16
 8001552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001556:	490a      	ldr	r1, [pc, #40]	@ (8001580 <esp_send_data+0x68>)
 8001558:	f7ff fd5c 	bl	8001014 <esp_at_command>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d107      	bne.n	8001572 <esp_send_data+0x5a>
	{
			esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8001562:	f107 020e 	add.w	r2, r7, #14
 8001566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156a:	4905      	ldr	r1, [pc, #20]	@ (8001580 <esp_send_data+0x68>)
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fd51 	bl	8001014 <esp_at_command>
	}
}
 8001572:	bf00      	nop
 8001574:	3750      	adds	r7, #80	@ 0x50
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	0800c600 	.word	0x0800c600
 8001580:	20000244 	.word	0x20000244

08001584 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8001588:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <drv_uart_init+0x58>)
 800158a:	4a15      	ldr	r2, [pc, #84]	@ (80015e0 <drv_uart_init+0x5c>)
 800158c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800158e:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <drv_uart_init+0x58>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <drv_uart_init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <drv_uart_init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <drv_uart_init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <drv_uart_init+0x58>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <drv_uart_init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <drv_uart_init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ba:	4808      	ldr	r0, [pc, #32]	@ (80015dc <drv_uart_init+0x58>)
 80015bc:	f003 fb38 	bl	8004c30 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <drv_uart_init+0x48>
        return -1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e005      	b.n	80015d8 <drv_uart_init+0x54>

    HAL_UART_Receive_IT(&huart2, &cdata,1);
 80015cc:	2201      	movs	r2, #1
 80015ce:	4905      	ldr	r1, [pc, #20]	@ (80015e4 <drv_uart_init+0x60>)
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <drv_uart_init+0x58>)
 80015d2:	f003 fc08 	bl	8004de6 <HAL_UART_Receive_IT>
    return 0;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000644 	.word	0x20000644
 80015e0:	40004400 	.word	0x40004400
 80015e4:	200006c2 	.word	0x200006c2

080015e8 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 80015f0:	1d39      	adds	r1, r7, #4
 80015f2:	230a      	movs	r3, #10
 80015f4:	2201      	movs	r2, #1
 80015f6:	4807      	ldr	r0, [pc, #28]	@ (8001614 <__io_putchar+0x2c>)
 80015f8:	f003 fb6a 	bl	8004cd0 <HAL_UART_Transmit>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <__io_putchar+0x1e>
        return ch;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	e001      	b.n	800160a <__io_putchar+0x22>
    return -1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000644 	.word	0x20000644

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001622:	f001 fc55 	bl	8002ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001626:	f000 f90b 	bl	8001840 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  setvbuf(stdin, NULL, _IONBF, 0);
 800162a:	4b70      	ldr	r3, [pc, #448]	@ (80017ec <main+0x1d4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6858      	ldr	r0, [r3, #4]
 8001630:	2300      	movs	r3, #0
 8001632:	2202      	movs	r2, #2
 8001634:	2100      	movs	r1, #0
 8001636:	f005 faf7 	bl	8006c28 <setvbuf>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163a:	f000 fa79 	bl	8001b30 <MX_GPIO_Init>
//  MX_USART2_UART_Init();
  MX_TIM3_Init();
 800163e:	f000 f969 	bl	8001914 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001642:	f000 f9ff 	bl	8001a44 <MX_TIM4_Init>
//  MX_USART6_UART_Init();
  /* USER CODE BEGIN 2 */
  ret |= drv_uart_init();
 8001646:	f7ff ff9d 	bl	8001584 <drv_uart_init>
 800164a:	4602      	mov	r2, r0
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	4313      	orrs	r3, r2
 8001650:	617b      	str	r3, [r7, #20]
  ret |= drv_esp_init();
 8001652:	f7ff fe11 	bl	8001278 <drv_esp_init>
 8001656:	4602      	mov	r2, r0
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	4313      	orrs	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
  if(ret != 0) Error_Handler();
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <main+0x50>
 8001664:	f001 f98c 	bl	8002980 <Error_Handler>
  printf("Start main() \r\n");
 8001668:	4861      	ldr	r0, [pc, #388]	@ (80017f0 <main+0x1d8>)
 800166a:	f005 fad5 	bl	8006c18 <puts>
  AiotClient_Init();
 800166e:	f7ff ff3f 	bl	80014f0 <AiotClient_Init>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001672:	2100      	movs	r1, #0
 8001674:	485f      	ldr	r0, [pc, #380]	@ (80017f4 <main+0x1dc>)
 8001676:	f002 fd5b 	bl	8004130 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800167a:	2104      	movs	r1, #4
 800167c:	485d      	ldr	r0, [pc, #372]	@ (80017f4 <main+0x1dc>)
 800167e:	f002 fd57 	bl	8004130 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001682:	2108      	movs	r1, #8
 8001684:	485b      	ldr	r0, [pc, #364]	@ (80017f4 <main+0x1dc>)
 8001686:	f002 fd53 	bl	8004130 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 800168a:	210c      	movs	r1, #12
 800168c:	4859      	ldr	r0, [pc, #356]	@ (80017f4 <main+0x1dc>)
 800168e:	f002 fd4f 	bl	8004130 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001692:	2100      	movs	r1, #0
 8001694:	4858      	ldr	r0, [pc, #352]	@ (80017f8 <main+0x1e0>)
 8001696:	f002 fd4b 	bl	8004130 <HAL_TIM_PWM_Start>

  printf("servo initializing...\r\n");
 800169a:	4858      	ldr	r0, [pc, #352]	@ (80017fc <main+0x1e4>)
 800169c:	f005 fabc 	bl	8006c18 <puts>
  servo_Init();
 80016a0:	f000 fac0 	bl	8001c24 <servo_Init>
  printf("servo is ready\r\n");
 80016a4:	4856      	ldr	r0, [pc, #344]	@ (8001800 <main+0x1e8>)
 80016a6:	f005 fab7 	bl	8006c18 <puts>

  printf("start main() - mathmatics\n\r");
 80016aa:	4856      	ldr	r0, [pc, #344]	@ (8001804 <main+0x1ec>)
 80016ac:	f005 fa44 	bl	8006b38 <iprintf>
		scanf("%f", &pz);

		float enter_pos[] = {px, py, pz};
		*/

		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 80016b0:	4955      	ldr	r1, [pc, #340]	@ (8001808 <main+0x1f0>)
 80016b2:	4856      	ldr	r0, [pc, #344]	@ (800180c <main+0x1f4>)
 80016b4:	f005 fce8 	bl	8007088 <strstr>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d01d      	beq.n	80016fa <main+0xe2>
 80016be:	4b53      	ldr	r3, [pc, #332]	@ (800180c <main+0x1f4>)
 80016c0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80016c4:	3b01      	subs	r3, #1
 80016c6:	4a51      	ldr	r2, [pc, #324]	@ (800180c <main+0x1f4>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	2b0a      	cmp	r3, #10
 80016cc:	d115      	bne.n	80016fa <main+0xe2>
		{
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 80016ce:	215b      	movs	r1, #91	@ 0x5b
 80016d0:	484e      	ldr	r0, [pc, #312]	@ (800180c <main+0x1f4>)
 80016d2:	f005 fc5d 	bl	8006f90 <strchr>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4619      	mov	r1, r3
 80016da:	484d      	ldr	r0, [pc, #308]	@ (8001810 <main+0x1f8>)
 80016dc:	f005 fd61 	bl	80071a2 <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 80016e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016e4:	2100      	movs	r1, #0
 80016e6:	4849      	ldr	r0, [pc, #292]	@ (800180c <main+0x1f4>)
 80016e8:	f005 fc4a 	bl	8006f80 <memset>
			cb_data.length = 0;
 80016ec:	4b47      	ldr	r3, [pc, #284]	@ (800180c <main+0x1f4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 80016f4:	4846      	ldr	r0, [pc, #280]	@ (8001810 <main+0x1f8>)
 80016f6:	f000 fff1 	bl	80026dc <esp_event>
		}
		if(rx2Flag)
 80016fa:	4b46      	ldr	r3, [pc, #280]	@ (8001814 <main+0x1fc>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <main+0xfa>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8001704:	4944      	ldr	r1, [pc, #272]	@ (8001818 <main+0x200>)
 8001706:	4845      	ldr	r0, [pc, #276]	@ (800181c <main+0x204>)
 8001708:	f005 fa16 	bl	8006b38 <iprintf>
			rx2Flag =0;
 800170c:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <main+0x1fc>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
	  	float grip_pos[] = {140, 0, 165};
	  	float red_pos[] = {0, 180, 150};
	  	float green_pos[] = {-127, 127 , 150};
	  	float blue_pos[] = {-180, 0, 150};
		*/
	  	int grip_btn = HAL_GPIO_ReadPin(GRIP_BTN_GPIO_Port, GRIP_BTN_Pin);
 8001712:	2101      	movs	r1, #1
 8001714:	4842      	ldr	r0, [pc, #264]	@ (8001820 <main+0x208>)
 8001716:	f001 ff99 	bl	800364c <HAL_GPIO_ReadPin>
 800171a:	4603      	mov	r3, r0
 800171c:	613b      	str	r3, [r7, #16]
	  	int red_btn = HAL_GPIO_ReadPin(RED_BTN_GPIO_Port, RED_BTN_Pin);
 800171e:	2102      	movs	r1, #2
 8001720:	483f      	ldr	r0, [pc, #252]	@ (8001820 <main+0x208>)
 8001722:	f001 ff93 	bl	800364c <HAL_GPIO_ReadPin>
 8001726:	4603      	mov	r3, r0
 8001728:	60fb      	str	r3, [r7, #12]
	  	int green_btn = HAL_GPIO_ReadPin(GREEN_BTN_GPIO_Port, GREEN_BTN_Pin);
 800172a:	2104      	movs	r1, #4
 800172c:	483c      	ldr	r0, [pc, #240]	@ (8001820 <main+0x208>)
 800172e:	f001 ff8d 	bl	800364c <HAL_GPIO_ReadPin>
 8001732:	4603      	mov	r3, r0
 8001734:	60bb      	str	r3, [r7, #8]
	  	int blue_btn = HAL_GPIO_ReadPin(BLUE_BTN_GPIO_Port, BLUE_BTN_Pin);
 8001736:	2108      	movs	r1, #8
 8001738:	4839      	ldr	r0, [pc, #228]	@ (8001820 <main+0x208>)
 800173a:	f001 ff87 	bl	800364c <HAL_GPIO_ReadPin>
 800173e:	4603      	mov	r3, r0
 8001740:	607b      	str	r3, [r7, #4]

	  	if (grip_btn == 1)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d115      	bne.n	8001774 <main+0x15c>
	  	{
	  		grip_flag = 1;
 8001748:	4b36      	ldr	r3, [pc, #216]	@ (8001824 <main+0x20c>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]
	  		mathmatics(grip_pos, &servo_data);
 800174e:	4936      	ldr	r1, [pc, #216]	@ (8001828 <main+0x210>)
 8001750:	4836      	ldr	r0, [pc, #216]	@ (800182c <main+0x214>)
 8001752:	f000 fac5 	bl	8001ce0 <mathmatics>
			printf("servo1_pwm : %ld, servo2_pwm : %ld, servo3_pwm : %ld\r\n", servo_data.servo1_pwm, servo_data.servo2_pwm, servo_data.servo3_pwm);
 8001756:	4b34      	ldr	r3, [pc, #208]	@ (8001828 <main+0x210>)
 8001758:	6819      	ldr	r1, [r3, #0]
 800175a:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <main+0x210>)
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4b32      	ldr	r3, [pc, #200]	@ (8001828 <main+0x210>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	4833      	ldr	r0, [pc, #204]	@ (8001830 <main+0x218>)
 8001764:	f005 f9e8 	bl	8006b38 <iprintf>
	  		move_direction(&servo_data);
 8001768:	482f      	ldr	r0, [pc, #188]	@ (8001828 <main+0x210>)
 800176a:	f000 fe0b 	bl	8002384 <move_direction>
	  		grip_flag = 0;
 800176e:	4b2d      	ldr	r3, [pc, #180]	@ (8001824 <main+0x20c>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
	  	}
	  	if (red_btn == 1)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d10f      	bne.n	800179a <main+0x182>
		{
			mathmatics(red_pos, &servo_data);
 800177a:	492b      	ldr	r1, [pc, #172]	@ (8001828 <main+0x210>)
 800177c:	482d      	ldr	r0, [pc, #180]	@ (8001834 <main+0x21c>)
 800177e:	f000 faaf 	bl	8001ce0 <mathmatics>
			printf("servo1_pwm : %ld, servo2_pwm : %ld, servo3_pwm : %ld\r\n", servo_data.servo1_pwm, servo_data.servo2_pwm, servo_data.servo3_pwm);
 8001782:	4b29      	ldr	r3, [pc, #164]	@ (8001828 <main+0x210>)
 8001784:	6819      	ldr	r1, [r3, #0]
 8001786:	4b28      	ldr	r3, [pc, #160]	@ (8001828 <main+0x210>)
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <main+0x210>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	4828      	ldr	r0, [pc, #160]	@ (8001830 <main+0x218>)
 8001790:	f005 f9d2 	bl	8006b38 <iprintf>
			move_direction(&servo_data);
 8001794:	4824      	ldr	r0, [pc, #144]	@ (8001828 <main+0x210>)
 8001796:	f000 fdf5 	bl	8002384 <move_direction>
		}
	  	if (green_btn == 1)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d10f      	bne.n	80017c0 <main+0x1a8>
		{
			mathmatics(green_pos, &servo_data);
 80017a0:	4921      	ldr	r1, [pc, #132]	@ (8001828 <main+0x210>)
 80017a2:	4825      	ldr	r0, [pc, #148]	@ (8001838 <main+0x220>)
 80017a4:	f000 fa9c 	bl	8001ce0 <mathmatics>
			printf("servo1_pwm : %ld, servo2_pwm : %ld, servo3_pwm : %ld\r\n", servo_data.servo1_pwm, servo_data.servo2_pwm, servo_data.servo3_pwm);
 80017a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <main+0x210>)
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <main+0x210>)
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <main+0x210>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	481e      	ldr	r0, [pc, #120]	@ (8001830 <main+0x218>)
 80017b6:	f005 f9bf 	bl	8006b38 <iprintf>
			move_direction(&servo_data);
 80017ba:	481b      	ldr	r0, [pc, #108]	@ (8001828 <main+0x210>)
 80017bc:	f000 fde2 	bl	8002384 <move_direction>
		}
	  	if (blue_btn == 1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	f47f af74 	bne.w	80016b0 <main+0x98>
		{
			mathmatics(blue_pos, &servo_data);
 80017c8:	4917      	ldr	r1, [pc, #92]	@ (8001828 <main+0x210>)
 80017ca:	481c      	ldr	r0, [pc, #112]	@ (800183c <main+0x224>)
 80017cc:	f000 fa88 	bl	8001ce0 <mathmatics>
			printf("servo1_pwm : %ld, servo2_pwm : %ld, servo3_pwm : %ld\r\n", servo_data.servo1_pwm, servo_data.servo2_pwm, servo_data.servo3_pwm);
 80017d0:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <main+0x210>)
 80017d2:	6819      	ldr	r1, [r3, #0]
 80017d4:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <main+0x210>)
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <main+0x210>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4814      	ldr	r0, [pc, #80]	@ (8001830 <main+0x218>)
 80017de:	f005 f9ab 	bl	8006b38 <iprintf>
			move_direction(&servo_data);
 80017e2:	4811      	ldr	r0, [pc, #68]	@ (8001828 <main+0x210>)
 80017e4:	f000 fdce 	bl	8002384 <move_direction>
  {
 80017e8:	e762      	b.n	80016b0 <main+0x98>
 80017ea:	bf00      	nop
 80017ec:	20000048 	.word	0x20000048
 80017f0:	0800c610 	.word	0x0800c610
 80017f4:	20000b14 	.word	0x20000b14
 80017f8:	20000b5c 	.word	0x20000b5c
 80017fc:	0800c620 	.word	0x0800c620
 8001800:	0800c638 	.word	0x0800c638
 8001804:	0800c648 	.word	0x0800c648
 8001808:	0800c664 	.word	0x0800c664
 800180c:	200006c4 	.word	0x200006c4
 8001810:	20000bc0 	.word	0x20000bc0
 8001814:	2000068c 	.word	0x2000068c
 8001818:	20000690 	.word	0x20000690
 800181c:	0800c66c 	.word	0x0800c66c
 8001820:	40020800 	.word	0x40020800
 8001824:	20000bbc 	.word	0x20000bbc
 8001828:	20000bb0 	.word	0x20000bb0
 800182c:	20000000 	.word	0x20000000
 8001830:	0800c67c 	.word	0x0800c67c
 8001834:	2000000c 	.word	0x2000000c
 8001838:	20000018 	.word	0x20000018
 800183c:	20000024 	.word	0x20000024

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	@ 0x50
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2230      	movs	r2, #48	@ 0x30
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f005 fb96 	bl	8006f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	4b28      	ldr	r3, [pc, #160]	@ (800190c <SystemClock_Config+0xcc>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	4a27      	ldr	r2, [pc, #156]	@ (800190c <SystemClock_Config+0xcc>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	@ 0x40
 8001874:	4b25      	ldr	r3, [pc, #148]	@ (800190c <SystemClock_Config+0xcc>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <SystemClock_Config+0xd0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a21      	ldr	r2, [pc, #132]	@ (8001910 <SystemClock_Config+0xd0>)
 800188a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <SystemClock_Config+0xd0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800189c:	2302      	movs	r3, #2
 800189e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a4:	2310      	movs	r3, #16
 80018a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a8:	2302      	movs	r3, #2
 80018aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ac:	2300      	movs	r3, #0
 80018ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018b0:	2310      	movs	r3, #16
 80018b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80018b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018ba:	2304      	movs	r3, #4
 80018bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018be:	2304      	movs	r3, #4
 80018c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c2:	f107 0320 	add.w	r3, r7, #32
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 fef2 	bl	80036b0 <HAL_RCC_OscConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018d2:	f001 f855 	bl	8002980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d6:	230f      	movs	r3, #15
 80018d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018da:	2302      	movs	r3, #2
 80018dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2102      	movs	r1, #2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 f954 	bl	8003ba0 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018fe:	f001 f83f 	bl	8002980 <Error_Handler>
  }
}
 8001902:	bf00      	nop
 8001904:	3750      	adds	r7, #80	@ 0x50
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40007000 	.word	0x40007000

08001914 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08e      	sub	sp, #56	@ 0x38
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	615a      	str	r2, [r3, #20]
 8001942:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001944:	4b3d      	ldr	r3, [pc, #244]	@ (8001a3c <MX_TIM3_Init+0x128>)
 8001946:	4a3e      	ldr	r2, [pc, #248]	@ (8001a40 <MX_TIM3_Init+0x12c>)
 8001948:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800194a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a3c <MX_TIM3_Init+0x128>)
 800194c:	2253      	movs	r2, #83	@ 0x53
 800194e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001950:	4b3a      	ldr	r3, [pc, #232]	@ (8001a3c <MX_TIM3_Init+0x128>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001956:	4b39      	ldr	r3, [pc, #228]	@ (8001a3c <MX_TIM3_Init+0x128>)
 8001958:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800195c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	4b37      	ldr	r3, [pc, #220]	@ (8001a3c <MX_TIM3_Init+0x128>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001964:	4b35      	ldr	r3, [pc, #212]	@ (8001a3c <MX_TIM3_Init+0x128>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800196a:	4834      	ldr	r0, [pc, #208]	@ (8001a3c <MX_TIM3_Init+0x128>)
 800196c:	f002 fb38 	bl	8003fe0 <HAL_TIM_Base_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001976:	f001 f803 	bl	8002980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001980:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001984:	4619      	mov	r1, r3
 8001986:	482d      	ldr	r0, [pc, #180]	@ (8001a3c <MX_TIM3_Init+0x128>)
 8001988:	f002 fd44 	bl	8004414 <HAL_TIM_ConfigClockSource>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001992:	f000 fff5 	bl	8002980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001996:	4829      	ldr	r0, [pc, #164]	@ (8001a3c <MX_TIM3_Init+0x128>)
 8001998:	f002 fb71 	bl	800407e <HAL_TIM_PWM_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019a2:	f000 ffed 	bl	8002980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ae:	f107 0320 	add.w	r3, r7, #32
 80019b2:	4619      	mov	r1, r3
 80019b4:	4821      	ldr	r0, [pc, #132]	@ (8001a3c <MX_TIM3_Init+0x128>)
 80019b6:	f003 f8cd 	bl	8004b54 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019c0:	f000 ffde 	bl	8002980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c4:	2360      	movs	r3, #96	@ 0x60
 80019c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	4619      	mov	r1, r3
 80019da:	4818      	ldr	r0, [pc, #96]	@ (8001a3c <MX_TIM3_Init+0x128>)
 80019dc:	f002 fc58 	bl	8004290 <HAL_TIM_PWM_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80019e6:	f000 ffcb 	bl	8002980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2204      	movs	r2, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4812      	ldr	r0, [pc, #72]	@ (8001a3c <MX_TIM3_Init+0x128>)
 80019f2:	f002 fc4d 	bl	8004290 <HAL_TIM_PWM_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80019fc:	f000 ffc0 	bl	8002980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2208      	movs	r2, #8
 8001a04:	4619      	mov	r1, r3
 8001a06:	480d      	ldr	r0, [pc, #52]	@ (8001a3c <MX_TIM3_Init+0x128>)
 8001a08:	f002 fc42 	bl	8004290 <HAL_TIM_PWM_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001a12:	f000 ffb5 	bl	8002980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	220c      	movs	r2, #12
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4807      	ldr	r0, [pc, #28]	@ (8001a3c <MX_TIM3_Init+0x128>)
 8001a1e:	f002 fc37 	bl	8004290 <HAL_TIM_PWM_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001a28:	f000 ffaa 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a2c:	4803      	ldr	r0, [pc, #12]	@ (8001a3c <MX_TIM3_Init+0x128>)
 8001a2e:	f001 f80d 	bl	8002a4c <HAL_TIM_MspPostInit>

}
 8001a32:	bf00      	nop
 8001a34:	3738      	adds	r7, #56	@ 0x38
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000b14 	.word	0x20000b14
 8001a40:	40000400 	.word	0x40000400

08001a44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08e      	sub	sp, #56	@ 0x38
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	f107 0320 	add.w	r3, r7, #32
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	615a      	str	r2, [r3, #20]
 8001a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a74:	4b2c      	ldr	r3, [pc, #176]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a76:	4a2d      	ldr	r2, [pc, #180]	@ (8001b2c <MX_TIM4_Init+0xe8>)
 8001a78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a7c:	2253      	movs	r2, #83	@ 0x53
 8001a7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8001a86:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a88:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001a8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	4b26      	ldr	r3, [pc, #152]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a9a:	4823      	ldr	r0, [pc, #140]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a9c:	f002 faa0 	bl	8003fe0 <HAL_TIM_Base_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001aa6:	f000 ff6b 	bl	8002980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ab0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	481c      	ldr	r0, [pc, #112]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001ab8:	f002 fcac 	bl	8004414 <HAL_TIM_ConfigClockSource>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ac2:	f000 ff5d 	bl	8002980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ac6:	4818      	ldr	r0, [pc, #96]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001ac8:	f002 fad9 	bl	800407e <HAL_TIM_PWM_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001ad2:	f000 ff55 	bl	8002980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ade:	f107 0320 	add.w	r3, r7, #32
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4810      	ldr	r0, [pc, #64]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001ae6:	f003 f835 	bl	8004b54 <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001af0:	f000 ff46 	bl	8002980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af4:	2360      	movs	r3, #96	@ 0x60
 8001af6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2200      	movs	r2, #0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4807      	ldr	r0, [pc, #28]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001b0c:	f002 fbc0 	bl	8004290 <HAL_TIM_PWM_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b16:	f000 ff33 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b1a:	4803      	ldr	r0, [pc, #12]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001b1c:	f000 ff96 	bl	8002a4c <HAL_TIM_MspPostInit>

}
 8001b20:	bf00      	nop
 8001b22:	3738      	adds	r7, #56	@ 0x38
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000b5c 	.word	0x20000b5c
 8001b2c:	40000800 	.word	0x40000800

08001b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b33      	ldr	r3, [pc, #204]	@ (8001c18 <MX_GPIO_Init+0xe8>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a32      	ldr	r2, [pc, #200]	@ (8001c18 <MX_GPIO_Init+0xe8>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <MX_GPIO_Init+0xe8>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b2c      	ldr	r3, [pc, #176]	@ (8001c18 <MX_GPIO_Init+0xe8>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8001c18 <MX_GPIO_Init+0xe8>)
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b72:	4b29      	ldr	r3, [pc, #164]	@ (8001c18 <MX_GPIO_Init+0xe8>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <MX_GPIO_Init+0xe8>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4a24      	ldr	r2, [pc, #144]	@ (8001c18 <MX_GPIO_Init+0xe8>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8e:	4b22      	ldr	r3, [pc, #136]	@ (8001c18 <MX_GPIO_Init+0xe8>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c18 <MX_GPIO_Init+0xe8>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c18 <MX_GPIO_Init+0xe8>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <MX_GPIO_Init+0xe8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2120      	movs	r1, #32
 8001bba:	4818      	ldr	r0, [pc, #96]	@ (8001c1c <MX_GPIO_Init+0xec>)
 8001bbc:	f001 fd5e 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bc6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4812      	ldr	r0, [pc, #72]	@ (8001c20 <MX_GPIO_Init+0xf0>)
 8001bd8:	f001 fbb4 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRIP_BTN_Pin RED_BTN_Pin GREEN_BTN_Pin BLUE_BTN_Pin */
  GPIO_InitStruct.Pin = GRIP_BTN_Pin|RED_BTN_Pin|GREEN_BTN_Pin|BLUE_BTN_Pin;
 8001bdc:	230f      	movs	r3, #15
 8001bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <MX_GPIO_Init+0xf0>)
 8001bf0:	f001 fba8 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4804      	ldr	r0, [pc, #16]	@ (8001c1c <MX_GPIO_Init+0xec>)
 8001c0c:	f001 fb9a 	bl	8003344 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	@ 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020800 	.word	0x40020800

08001c24 <servo_Init>:

/* USER CODE BEGIN 4 */

void servo_Init()
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	   TIM3 CH3 = joint 3 : PB0
	   TIM3 CH4 = joint 4 : PB1 **NOT USE** always 0 degree
	   TIM4 CH1 = gripper : PB6
	   */

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1510);
 8001c28:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <servo_Init+0xa0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f240 52e6 	movw	r2, #1510	@ 0x5e6
 8001c30:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(1000);
 8001c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c36:	f001 f9bd 	bl	8002fb4 <HAL_Delay>
	servo1_init_pwm = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);
 8001c3a:	4b22      	ldr	r3, [pc, #136]	@ (8001cc4 <servo_Init+0xa0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b21      	ldr	r3, [pc, #132]	@ (8001cc8 <servo_Init+0xa4>)
 8001c44:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1510);
 8001c46:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc4 <servo_Init+0xa0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f240 52e6 	movw	r2, #1510	@ 0x5e6
 8001c4e:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8001c50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c54:	f001 f9ae 	bl	8002fb4 <HAL_Delay>
	servo2_init_pwm = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_2);
 8001c58:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <servo_Init+0xa0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <servo_Init+0xa8>)
 8001c62:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 2490);
 8001c64:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <servo_Init+0xa0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f640 12ba 	movw	r2, #2490	@ 0x9ba
 8001c6c:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_Delay(1000);
 8001c6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c72:	f001 f99f 	bl	8002fb4 <HAL_Delay>
	servo3_init_pwm = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_3);
 8001c76:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <servo_Init+0xa0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <servo_Init+0xac>)
 8001c80:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1480);
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <servo_Init+0xa0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f44f 62b9 	mov.w	r2, #1480	@ 0x5c8
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(1000);
 8001c8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c90:	f001 f990 	bl	8002fb4 <HAL_Delay>
	servo4_init_pwm = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_4);
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <servo_Init+0xa0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <servo_Init+0xb0>)
 8001c9e:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1300);
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <servo_Init+0xb4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f240 5214 	movw	r2, #1300	@ 0x514
 8001ca8:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(1000);
 8001caa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cae:	f001 f981 	bl	8002fb4 <HAL_Delay>
	gripper_init_pwm = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <servo_Init+0xb4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <servo_Init+0xb8>)
 8001cbc:	801a      	strh	r2, [r3, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000b14 	.word	0x20000b14
 8001cc8:	20000ba4 	.word	0x20000ba4
 8001ccc:	20000ba6 	.word	0x20000ba6
 8001cd0:	20000ba8 	.word	0x20000ba8
 8001cd4:	20000baa 	.word	0x20000baa
 8001cd8:	20000b5c 	.word	0x20000b5c
 8001cdc:	20000bac 	.word	0x20000bac

08001ce0 <mathmatics>:

void mathmatics(float pos[], pwm_data* servo_data)
{
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b09e      	sub	sp, #120	@ 0x78
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
	float px = pos[0], py = pos[1], pz = pos[2];	// end point coordinate
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	677b      	str	r3, [r7, #116]	@ 0x74
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	673b      	str	r3, [r7, #112]	@ 0x70
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float theta1 = 0, theta2 = 0, theta3 = 0;	// joint degree variable
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	663b      	str	r3, [r7, #96]	@ 0x60
	float R = 0, Q = 0, P = 0, K = 0;
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	653b      	str	r3, [r7, #80]	@ 0x50
	float gamma = 0, pi = 0, phi = 0, beta = 0;
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	643b      	str	r3, [r7, #64]	@ 0x40
	int d1 = 83, a2 = 67, a3 = 60, d4 = 76, a4 = 15;	// link length (mm)
 8001d3e:	2353      	movs	r3, #83	@ 0x53
 8001d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d42:	2343      	movs	r3, #67	@ 0x43
 8001d44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d46:	233c      	movs	r3, #60	@ 0x3c
 8001d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d4a:	234c      	movs	r3, #76	@ 0x4c
 8001d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d4e:	230f      	movs	r3, #15
 8001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c

	theta1 = atan2(py, px) * 180 / M_PI;
 8001d52:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001d54:	f7fe fc10 	bl	8000578 <__aeabi_f2d>
 8001d58:	4604      	mov	r4, r0
 8001d5a:	460d      	mov	r5, r1
 8001d5c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001d5e:	f7fe fc0b 	bl	8000578 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	ec43 2b11 	vmov	d1, r2, r3
 8001d6a:	ec45 4b10 	vmov	d0, r4, r5
 8001d6e:	f008 fd37 	bl	800a7e0 <atan2>
 8001d72:	ec51 0b10 	vmov	r0, r1, d0
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	4be9      	ldr	r3, [pc, #932]	@ (8002120 <mathmatics+0x440>)
 8001d7c:	f7fe fc54 	bl	8000628 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	a3e1      	add	r3, pc, #900	@ (adr r3, 8002110 <mathmatics+0x430>)
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	f7fe fd75 	bl	800087c <__aeabi_ddiv>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f7fe ff3d 	bl	8000c18 <__aeabi_d2f>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	66bb      	str	r3, [r7, #104]	@ 0x68
	long servo1_pwm = (theta1/180*2000) + 500;
 8001da2:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001da6:	eddf 6adf 	vldr	s13, [pc, #892]	@ 8002124 <mathmatics+0x444>
 8001daa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dae:	ed9f 7ade 	vldr	s14, [pc, #888]	@ 8002128 <mathmatics+0x448>
 8001db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db6:	ed9f 7add 	vldr	s14, [pc, #884]	@ 800212c <mathmatics+0x44c>
 8001dba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc2:	ee17 3a90 	vmov	r3, s15
 8001dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
	(*servo_data).servo1_pwm = servo1_pwm;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dcc:	601a      	str	r2, [r3, #0]

	R = sqrt(pow(px, 2) + pow(py, 2));
 8001dce:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001dd0:	f7fe fbd2 	bl	8000578 <__aeabi_f2d>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	ed9f 1bcf 	vldr	d1, [pc, #828]	@ 8002118 <mathmatics+0x438>
 8001ddc:	ec43 2b10 	vmov	d0, r2, r3
 8001de0:	f008 fd00 	bl	800a7e4 <pow>
 8001de4:	ec55 4b10 	vmov	r4, r5, d0
 8001de8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001dea:	f7fe fbc5 	bl	8000578 <__aeabi_f2d>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	ed9f 1bc9 	vldr	d1, [pc, #804]	@ 8002118 <mathmatics+0x438>
 8001df6:	ec43 2b10 	vmov	d0, r2, r3
 8001dfa:	f008 fcf3 	bl	800a7e4 <pow>
 8001dfe:	ec53 2b10 	vmov	r2, r3, d0
 8001e02:	4620      	mov	r0, r4
 8001e04:	4629      	mov	r1, r5
 8001e06:	f7fe fa59 	bl	80002bc <__adddf3>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	ec43 2b17 	vmov	d7, r2, r3
 8001e12:	eeb0 0a47 	vmov.f32	s0, s14
 8001e16:	eef0 0a67 	vmov.f32	s1, s15
 8001e1a:	f008 fd53 	bl	800a8c4 <sqrt>
 8001e1e:	ec53 2b10 	vmov	r2, r3, d0
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	f7fe fef7 	bl	8000c18 <__aeabi_d2f>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	Q = sqrt(pow(R, 2) + pow(pz, 2));
 8001e2e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001e30:	f7fe fba2 	bl	8000578 <__aeabi_f2d>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	ed9f 1bb7 	vldr	d1, [pc, #732]	@ 8002118 <mathmatics+0x438>
 8001e3c:	ec43 2b10 	vmov	d0, r2, r3
 8001e40:	f008 fcd0 	bl	800a7e4 <pow>
 8001e44:	ec55 4b10 	vmov	r4, r5, d0
 8001e48:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001e4a:	f7fe fb95 	bl	8000578 <__aeabi_f2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	ed9f 1bb1 	vldr	d1, [pc, #708]	@ 8002118 <mathmatics+0x438>
 8001e56:	ec43 2b10 	vmov	d0, r2, r3
 8001e5a:	f008 fcc3 	bl	800a7e4 <pow>
 8001e5e:	ec53 2b10 	vmov	r2, r3, d0
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f7fe fa29 	bl	80002bc <__adddf3>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	ec43 2b17 	vmov	d7, r2, r3
 8001e72:	eeb0 0a47 	vmov.f32	s0, s14
 8001e76:	eef0 0a67 	vmov.f32	s1, s15
 8001e7a:	f008 fd23 	bl	800a8c4 <sqrt>
 8001e7e:	ec53 2b10 	vmov	r2, r3, d0
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fec7 	bl	8000c18 <__aeabi_d2f>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	65bb      	str	r3, [r7, #88]	@ 0x58
	P = sqrt(pow(R, 2) + pow((d1 - pz), 2));
 8001e8e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001e90:	f7fe fb72 	bl	8000578 <__aeabi_f2d>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8002118 <mathmatics+0x438>
 8001e9c:	ec43 2b10 	vmov	d0, r2, r3
 8001ea0:	f008 fca0 	bl	800a7e4 <pow>
 8001ea4:	ec55 4b10 	vmov	r4, r5, d0
 8001ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eba:	ee17 0a90 	vmov	r0, s15
 8001ebe:	f7fe fb5b 	bl	8000578 <__aeabi_f2d>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	ed9f 1b94 	vldr	d1, [pc, #592]	@ 8002118 <mathmatics+0x438>
 8001eca:	ec43 2b10 	vmov	d0, r2, r3
 8001ece:	f008 fc89 	bl	800a7e4 <pow>
 8001ed2:	ec53 2b10 	vmov	r2, r3, d0
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	4629      	mov	r1, r5
 8001eda:	f7fe f9ef 	bl	80002bc <__adddf3>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	ec43 2b17 	vmov	d7, r2, r3
 8001ee6:	eeb0 0a47 	vmov.f32	s0, s14
 8001eea:	eef0 0a67 	vmov.f32	s1, s15
 8001eee:	f008 fce9 	bl	800a8c4 <sqrt>
 8001ef2:	ec53 2b10 	vmov	r2, r3, d0
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fe8d 	bl	8000c18 <__aeabi_d2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	657b      	str	r3, [r7, #84]	@ 0x54
	K = sqrt(pow((a3 + d4), 2) + pow(a4, 2));
 8001f02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f06:	4413      	add	r3, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb23 	bl	8000554 <__aeabi_i2d>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	ed9f 1b81 	vldr	d1, [pc, #516]	@ 8002118 <mathmatics+0x438>
 8001f16:	ec43 2b10 	vmov	d0, r2, r3
 8001f1a:	f008 fc63 	bl	800a7e4 <pow>
 8001f1e:	ec55 4b10 	vmov	r4, r5, d0
 8001f22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f24:	f7fe fb16 	bl	8000554 <__aeabi_i2d>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	ed9f 1b7a 	vldr	d1, [pc, #488]	@ 8002118 <mathmatics+0x438>
 8001f30:	ec43 2b10 	vmov	d0, r2, r3
 8001f34:	f008 fc56 	bl	800a7e4 <pow>
 8001f38:	ec53 2b10 	vmov	r2, r3, d0
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	4629      	mov	r1, r5
 8001f40:	f7fe f9bc 	bl	80002bc <__adddf3>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	ec43 2b17 	vmov	d7, r2, r3
 8001f4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f50:	eef0 0a67 	vmov.f32	s1, s15
 8001f54:	f008 fcb6 	bl	800a8c4 <sqrt>
 8001f58:	ec53 2b10 	vmov	r2, r3, d0
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7fe fe5a 	bl	8000c18 <__aeabi_d2f>
 8001f64:	4603      	mov	r3, r0
 8001f66:	653b      	str	r3, [r7, #80]	@ 0x50

	float gamma_y = pow(P, 2) + pow(d1, 2) - pow(Q, 2);
 8001f68:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f6a:	f7fe fb05 	bl	8000578 <__aeabi_f2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	ed9f 1b69 	vldr	d1, [pc, #420]	@ 8002118 <mathmatics+0x438>
 8001f76:	ec43 2b10 	vmov	d0, r2, r3
 8001f7a:	f008 fc33 	bl	800a7e4 <pow>
 8001f7e:	ec55 4b10 	vmov	r4, r5, d0
 8001f82:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f84:	f7fe fae6 	bl	8000554 <__aeabi_i2d>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	ed9f 1b62 	vldr	d1, [pc, #392]	@ 8002118 <mathmatics+0x438>
 8001f90:	ec43 2b10 	vmov	d0, r2, r3
 8001f94:	f008 fc26 	bl	800a7e4 <pow>
 8001f98:	ec53 2b10 	vmov	r2, r3, d0
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	f7fe f98c 	bl	80002bc <__adddf3>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4614      	mov	r4, r2
 8001faa:	461d      	mov	r5, r3
 8001fac:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001fae:	f7fe fae3 	bl	8000578 <__aeabi_f2d>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 8002118 <mathmatics+0x438>
 8001fba:	ec43 2b10 	vmov	d0, r2, r3
 8001fbe:	f008 fc11 	bl	800a7e4 <pow>
 8001fc2:	ec53 2b10 	vmov	r2, r3, d0
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	4629      	mov	r1, r5
 8001fca:	f7fe f975 	bl	80002b8 <__aeabi_dsub>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7fe fe1f 	bl	8000c18 <__aeabi_d2f>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
	float gamma_x = 2 * P * d1;
 8001fde:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001fe2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff4:	edc7 7a08 	vstr	s15, [r7, #32]
	gamma = acos(gamma_y / gamma_x) * 180 / M_PI;
 8001ff8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001ffc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002000:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002004:	ee16 0a90 	vmov	r0, s13
 8002008:	f7fe fab6 	bl	8000578 <__aeabi_f2d>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	ec43 2b10 	vmov	d0, r2, r3
 8002014:	f008 fbb0 	bl	800a778 <acos>
 8002018:	ec51 0b10 	vmov	r0, r1, d0
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	4b3f      	ldr	r3, [pc, #252]	@ (8002120 <mathmatics+0x440>)
 8002022:	f7fe fb01 	bl	8000628 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	a338      	add	r3, pc, #224	@ (adr r3, 8002110 <mathmatics+0x430>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	f7fe fc22 	bl	800087c <__aeabi_ddiv>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	f7fe fdea 	bl	8000c18 <__aeabi_d2f>
 8002044:	4603      	mov	r3, r0
 8002046:	64fb      	str	r3, [r7, #76]	@ 0x4c

	float pi_y = pow(P, 2) + pow(a2, 2) - pow(K, 2);
 8002048:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800204a:	f7fe fa95 	bl	8000578 <__aeabi_f2d>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	ed9f 1b31 	vldr	d1, [pc, #196]	@ 8002118 <mathmatics+0x438>
 8002056:	ec43 2b10 	vmov	d0, r2, r3
 800205a:	f008 fbc3 	bl	800a7e4 <pow>
 800205e:	ec55 4b10 	vmov	r4, r5, d0
 8002062:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002064:	f7fe fa76 	bl	8000554 <__aeabi_i2d>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	ed9f 1b2a 	vldr	d1, [pc, #168]	@ 8002118 <mathmatics+0x438>
 8002070:	ec43 2b10 	vmov	d0, r2, r3
 8002074:	f008 fbb6 	bl	800a7e4 <pow>
 8002078:	ec53 2b10 	vmov	r2, r3, d0
 800207c:	4620      	mov	r0, r4
 800207e:	4629      	mov	r1, r5
 8002080:	f7fe f91c 	bl	80002bc <__adddf3>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4614      	mov	r4, r2
 800208a:	461d      	mov	r5, r3
 800208c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800208e:	f7fe fa73 	bl	8000578 <__aeabi_f2d>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 8002118 <mathmatics+0x438>
 800209a:	ec43 2b10 	vmov	d0, r2, r3
 800209e:	f008 fba1 	bl	800a7e4 <pow>
 80020a2:	ec53 2b10 	vmov	r2, r3, d0
 80020a6:	4620      	mov	r0, r4
 80020a8:	4629      	mov	r1, r5
 80020aa:	f7fe f905 	bl	80002b8 <__aeabi_dsub>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fdaf 	bl	8000c18 <__aeabi_d2f>
 80020ba:	4603      	mov	r3, r0
 80020bc:	61fb      	str	r3, [r7, #28]
	float pi_x = 2 * P * a2;
 80020be:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80020c2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80020c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d4:	edc7 7a06 	vstr	s15, [r7, #24]
	pi = acos(pi_y / pi_x) * 180 / M_PI;
 80020d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80020dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80020e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020e4:	ee16 0a90 	vmov	r0, s13
 80020e8:	f7fe fa46 	bl	8000578 <__aeabi_f2d>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	ec43 2b10 	vmov	d0, r2, r3
 80020f4:	f008 fb40 	bl	800a778 <acos>
 80020f8:	ec51 0b10 	vmov	r0, r1, d0
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	4b07      	ldr	r3, [pc, #28]	@ (8002120 <mathmatics+0x440>)
 8002102:	f7fe fa91 	bl	8000628 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	e011      	b.n	8002130 <mathmatics+0x450>
 800210c:	f3af 8000 	nop.w
 8002110:	54442d18 	.word	0x54442d18
 8002114:	400921fb 	.word	0x400921fb
 8002118:	00000000 	.word	0x00000000
 800211c:	40000000 	.word	0x40000000
 8002120:	40668000 	.word	0x40668000
 8002124:	43340000 	.word	0x43340000
 8002128:	44fa0000 	.word	0x44fa0000
 800212c:	43fa0000 	.word	0x43fa0000
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	a38a      	add	r3, pc, #552	@ (adr r3, 8002360 <mathmatics+0x680>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe fb9f 	bl	800087c <__aeabi_ddiv>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fd67 	bl	8000c18 <__aeabi_d2f>
 800214a:	4603      	mov	r3, r0
 800214c:	64bb      	str	r3, [r7, #72]	@ 0x48

	theta2 = 180 - (pi - (90 - gamma));
 800214e:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002370 <mathmatics+0x690>
 8002152:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800215a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800215e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002162:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8002374 <mathmatics+0x694>
 8002166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	long servo2_pwm = theta2/180.0*2000.0 + 500;
 800216e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002170:	f7fe fa02 	bl	8000578 <__aeabi_f2d>
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	4b7f      	ldr	r3, [pc, #508]	@ (8002378 <mathmatics+0x698>)
 800217a:	f7fe fb7f 	bl	800087c <__aeabi_ddiv>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	4b7c      	ldr	r3, [pc, #496]	@ (800237c <mathmatics+0x69c>)
 800218c:	f7fe fa4c 	bl	8000628 <__aeabi_dmul>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	4b78      	ldr	r3, [pc, #480]	@ (8002380 <mathmatics+0x6a0>)
 800219e:	f7fe f88d 	bl	80002bc <__adddf3>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7fe fced 	bl	8000b88 <__aeabi_d2iz>
 80021ae:	4603      	mov	r3, r0
 80021b0:	617b      	str	r3, [r7, #20]
	(*servo_data).servo2_pwm = servo2_pwm;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	605a      	str	r2, [r3, #4]

	float phi_y = pow(a2, 2) + pow(K, 2) - pow(P, 2);
 80021b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80021ba:	f7fe f9cb 	bl	8000554 <__aeabi_i2d>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	ed9f 1b65 	vldr	d1, [pc, #404]	@ 8002358 <mathmatics+0x678>
 80021c6:	ec43 2b10 	vmov	d0, r2, r3
 80021ca:	f008 fb0b 	bl	800a7e4 <pow>
 80021ce:	ec55 4b10 	vmov	r4, r5, d0
 80021d2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80021d4:	f7fe f9d0 	bl	8000578 <__aeabi_f2d>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 8002358 <mathmatics+0x678>
 80021e0:	ec43 2b10 	vmov	d0, r2, r3
 80021e4:	f008 fafe 	bl	800a7e4 <pow>
 80021e8:	ec53 2b10 	vmov	r2, r3, d0
 80021ec:	4620      	mov	r0, r4
 80021ee:	4629      	mov	r1, r5
 80021f0:	f7fe f864 	bl	80002bc <__adddf3>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4614      	mov	r4, r2
 80021fa:	461d      	mov	r5, r3
 80021fc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80021fe:	f7fe f9bb 	bl	8000578 <__aeabi_f2d>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	ed9f 1b54 	vldr	d1, [pc, #336]	@ 8002358 <mathmatics+0x678>
 800220a:	ec43 2b10 	vmov	d0, r2, r3
 800220e:	f008 fae9 	bl	800a7e4 <pow>
 8002212:	ec53 2b10 	vmov	r2, r3, d0
 8002216:	4620      	mov	r0, r4
 8002218:	4629      	mov	r1, r5
 800221a:	f7fe f84d 	bl	80002b8 <__aeabi_dsub>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe fcf7 	bl	8000c18 <__aeabi_d2f>
 800222a:	4603      	mov	r3, r0
 800222c:	613b      	str	r3, [r7, #16]
	float phi_x = 2 * a2 * K;
 800222e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800223a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800223e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002242:	edc7 7a03 	vstr	s15, [r7, #12]
	phi = acos(phi_y / phi_x) * 180 / M_PI;
 8002246:	ed97 7a04 	vldr	s14, [r7, #16]
 800224a:	edd7 7a03 	vldr	s15, [r7, #12]
 800224e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002252:	ee16 0a90 	vmov	r0, s13
 8002256:	f7fe f98f 	bl	8000578 <__aeabi_f2d>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	ec43 2b10 	vmov	d0, r2, r3
 8002262:	f008 fa89 	bl	800a778 <acos>
 8002266:	ec51 0b10 	vmov	r0, r1, d0
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	4b42      	ldr	r3, [pc, #264]	@ (8002378 <mathmatics+0x698>)
 8002270:	f7fe f9da 	bl	8000628 <__aeabi_dmul>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	a338      	add	r3, pc, #224	@ (adr r3, 8002360 <mathmatics+0x680>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe fafb 	bl	800087c <__aeabi_ddiv>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f7fe fcc3 	bl	8000c18 <__aeabi_d2f>
 8002292:	4603      	mov	r3, r0
 8002294:	647b      	str	r3, [r7, #68]	@ 0x44
	beta = atan2(a4, a3 + d4) * 180 / M_PI;
 8002296:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002298:	f7fe f95c 	bl	8000554 <__aeabi_i2d>
 800229c:	4604      	mov	r4, r0
 800229e:	460d      	mov	r5, r1
 80022a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a4:	4413      	add	r3, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f954 	bl	8000554 <__aeabi_i2d>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	ec43 2b11 	vmov	d1, r2, r3
 80022b4:	ec45 4b10 	vmov	d0, r4, r5
 80022b8:	f008 fa92 	bl	800a7e0 <atan2>
 80022bc:	ec51 0b10 	vmov	r0, r1, d0
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002378 <mathmatics+0x698>)
 80022c6:	f7fe f9af 	bl	8000628 <__aeabi_dmul>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	a323      	add	r3, pc, #140	@ (adr r3, 8002360 <mathmatics+0x680>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	f7fe fad0 	bl	800087c <__aeabi_ddiv>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7fe fc98 	bl	8000c18 <__aeabi_d2f>
 80022e8:	4603      	mov	r3, r0
 80022ea:	643b      	str	r3, [r7, #64]	@ 0x40

	theta3 = 180 - (phi + beta);
 80022ec:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80022f0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80022f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002374 <mathmatics+0x694>
 80022fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002300:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	long servo3_pwm = 2500 - theta3/180.0*2000.0;
 8002304:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002306:	f7fe f937 	bl	8000578 <__aeabi_f2d>
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <mathmatics+0x698>)
 8002310:	f7fe fab4 	bl	800087c <__aeabi_ddiv>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	4b16      	ldr	r3, [pc, #88]	@ (800237c <mathmatics+0x69c>)
 8002322:	f7fe f981 	bl	8000628 <__aeabi_dmul>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	a10f      	add	r1, pc, #60	@ (adr r1, 8002368 <mathmatics+0x688>)
 800232c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002330:	f7fd ffc2 	bl	80002b8 <__aeabi_dsub>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	f7fe fc24 	bl	8000b88 <__aeabi_d2iz>
 8002340:	4603      	mov	r3, r0
 8002342:	60bb      	str	r3, [r7, #8]
	(*servo_data).servo3_pwm = servo3_pwm;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	609a      	str	r2, [r3, #8]
	printf("beta : %f\r\n", beta);
	printf("theta1 : %.2f, theta2 : %.2f, theta3 : %.2f\n\r", theta1, theta2, theta3);
	printf("servo1_pwm : %ld, servo2_pwm : %ld, servo3_pwm : %ld\n\r", servo1_pwm, servo2_pwm, servo3_pwm);
#endif

}
 800234a:	bf00      	nop
 800234c:	3778      	adds	r7, #120	@ 0x78
 800234e:	46bd      	mov	sp, r7
 8002350:	bdb0      	pop	{r4, r5, r7, pc}
 8002352:	bf00      	nop
 8002354:	f3af 8000 	nop.w
 8002358:	00000000 	.word	0x00000000
 800235c:	40000000 	.word	0x40000000
 8002360:	54442d18 	.word	0x54442d18
 8002364:	400921fb 	.word	0x400921fb
 8002368:	00000000 	.word	0x00000000
 800236c:	40a38800 	.word	0x40a38800
 8002370:	42b40000 	.word	0x42b40000
 8002374:	43340000 	.word	0x43340000
 8002378:	40668000 	.word	0x40668000
 800237c:	409f4000 	.word	0x409f4000
 8002380:	407f4000 	.word	0x407f4000

08002384 <move_direction>:

void move_direction(pwm_data* servo_data)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	@ 0x30
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	long m_servo1_pwm = servo_data->servo1_pwm;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]
	long m_servo2_pwm = servo_data->servo2_pwm;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	617b      	str	r3, [r7, #20]
	long m_servo3_pwm = servo_data->servo3_pwm;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	613b      	str	r3, [r7, #16]
	long m_grip_pwm = 2400;
 800239e:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 80023a2:	60fb      	str	r3, [r7, #12]

	long servo1_current_pwm = 0, servo2_current_pwm = 0, servo3_current_pwm = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023a8:	2300      	movs	r3, #0
 80023aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24

	//move to set position
	//servo1 move
	if(m_servo1_pwm >= servo1_init_pwm)
 80023b0:	4b8a      	ldr	r3, [pc, #552]	@ (80025dc <move_direction+0x258>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4293      	cmp	r3, r2
 80023ba:	db12      	blt.n	80023e2 <move_direction+0x5e>
	{
		for(servo1_current_pwm = servo1_init_pwm; servo1_current_pwm < m_servo1_pwm; servo1_current_pwm+=MOTOR_MOVE)
 80023bc:	4b87      	ldr	r3, [pc, #540]	@ (80025dc <move_direction+0x258>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023c2:	e009      	b.n	80023d8 <move_direction+0x54>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, servo1_current_pwm);
 80023c4:	4b86      	ldr	r3, [pc, #536]	@ (80025e0 <move_direction+0x25c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ca:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(MOTOR_DELAY);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f000 fdf1 	bl	8002fb4 <HAL_Delay>
		for(servo1_current_pwm = servo1_init_pwm; servo1_current_pwm < m_servo1_pwm; servo1_current_pwm+=MOTOR_MOVE)
 80023d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d4:	3305      	adds	r3, #5
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbf1      	blt.n	80023c4 <move_direction+0x40>
 80023e0:	e017      	b.n	8002412 <move_direction+0x8e>
		}

	}
	else if(m_servo1_pwm < servo1_init_pwm)
 80023e2:	4b7e      	ldr	r3, [pc, #504]	@ (80025dc <move_direction+0x258>)
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	4293      	cmp	r3, r2
 80023ec:	da11      	bge.n	8002412 <move_direction+0x8e>
	{
		for(servo1_current_pwm = servo1_init_pwm; servo1_current_pwm > m_servo1_pwm; servo1_current_pwm-=MOTOR_MOVE)
 80023ee:	4b7b      	ldr	r3, [pc, #492]	@ (80025dc <move_direction+0x258>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023f4:	e009      	b.n	800240a <move_direction+0x86>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, servo1_current_pwm);
 80023f6:	4b7a      	ldr	r3, [pc, #488]	@ (80025e0 <move_direction+0x25c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023fc:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(MOTOR_DELAY);
 80023fe:	2003      	movs	r0, #3
 8002400:	f000 fdd8 	bl	8002fb4 <HAL_Delay>
		for(servo1_current_pwm = servo1_init_pwm; servo1_current_pwm > m_servo1_pwm; servo1_current_pwm-=MOTOR_MOVE)
 8002404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002406:	3b05      	subs	r3, #5
 8002408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800240a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	429a      	cmp	r2, r3
 8002410:	dcf1      	bgt.n	80023f6 <move_direction+0x72>
		}

	}

	//servo2 move
	if(m_servo2_pwm >= servo2_init_pwm)
 8002412:	4b74      	ldr	r3, [pc, #464]	@ (80025e4 <move_direction+0x260>)
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	4293      	cmp	r3, r2
 800241c:	db12      	blt.n	8002444 <move_direction+0xc0>
	{
		for(servo2_current_pwm = servo2_init_pwm; servo2_current_pwm < m_servo2_pwm; servo2_current_pwm+=MOTOR_MOVE)
 800241e:	4b71      	ldr	r3, [pc, #452]	@ (80025e4 <move_direction+0x260>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002424:	e009      	b.n	800243a <move_direction+0xb6>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, servo2_current_pwm);
 8002426:	4b6e      	ldr	r3, [pc, #440]	@ (80025e0 <move_direction+0x25c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800242c:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_Delay(MOTOR_DELAY);
 800242e:	2003      	movs	r0, #3
 8002430:	f000 fdc0 	bl	8002fb4 <HAL_Delay>
		for(servo2_current_pwm = servo2_init_pwm; servo2_current_pwm < m_servo2_pwm; servo2_current_pwm+=MOTOR_MOVE)
 8002434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002436:	3305      	adds	r3, #5
 8002438:	62bb      	str	r3, [r7, #40]	@ 0x28
 800243a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	429a      	cmp	r2, r3
 8002440:	dbf1      	blt.n	8002426 <move_direction+0xa2>
 8002442:	e017      	b.n	8002474 <move_direction+0xf0>
		}

	}
	else if(m_servo2_pwm < servo2_init_pwm)
 8002444:	4b67      	ldr	r3, [pc, #412]	@ (80025e4 <move_direction+0x260>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	4293      	cmp	r3, r2
 800244e:	da11      	bge.n	8002474 <move_direction+0xf0>
	{
		for(servo2_current_pwm = servo2_init_pwm; servo2_current_pwm > m_servo2_pwm; servo2_current_pwm-=MOTOR_MOVE)
 8002450:	4b64      	ldr	r3, [pc, #400]	@ (80025e4 <move_direction+0x260>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002456:	e009      	b.n	800246c <move_direction+0xe8>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, servo2_current_pwm);
 8002458:	4b61      	ldr	r3, [pc, #388]	@ (80025e0 <move_direction+0x25c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800245e:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_Delay(MOTOR_DELAY);
 8002460:	2003      	movs	r0, #3
 8002462:	f000 fda7 	bl	8002fb4 <HAL_Delay>
		for(servo2_current_pwm = servo2_init_pwm; servo2_current_pwm > m_servo2_pwm; servo2_current_pwm-=MOTOR_MOVE)
 8002466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002468:	3b05      	subs	r3, #5
 800246a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800246c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	429a      	cmp	r2, r3
 8002472:	dcf1      	bgt.n	8002458 <move_direction+0xd4>
		}

	}

	//servo3 move
	if(m_servo3_pwm >= servo3_init_pwm)
 8002474:	4b5c      	ldr	r3, [pc, #368]	@ (80025e8 <move_direction+0x264>)
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4293      	cmp	r3, r2
 800247e:	db12      	blt.n	80024a6 <move_direction+0x122>
	{
		for(servo3_current_pwm = servo3_init_pwm; servo3_current_pwm < m_servo3_pwm; servo3_current_pwm+=MOTOR_MOVE)
 8002480:	4b59      	ldr	r3, [pc, #356]	@ (80025e8 <move_direction+0x264>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
 8002486:	e009      	b.n	800249c <move_direction+0x118>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, servo3_current_pwm);
 8002488:	4b55      	ldr	r3, [pc, #340]	@ (80025e0 <move_direction+0x25c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800248e:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_Delay(MOTOR_DELAY);
 8002490:	2003      	movs	r0, #3
 8002492:	f000 fd8f 	bl	8002fb4 <HAL_Delay>
		for(servo3_current_pwm = servo3_init_pwm; servo3_current_pwm < m_servo3_pwm; servo3_current_pwm+=MOTOR_MOVE)
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	3305      	adds	r3, #5
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
 800249c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	dbf1      	blt.n	8002488 <move_direction+0x104>
 80024a4:	e017      	b.n	80024d6 <move_direction+0x152>
		}

	}
	else if(m_servo3_pwm < servo3_init_pwm)
 80024a6:	4b50      	ldr	r3, [pc, #320]	@ (80025e8 <move_direction+0x264>)
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4293      	cmp	r3, r2
 80024b0:	da11      	bge.n	80024d6 <move_direction+0x152>
	{
		for(servo3_current_pwm = servo3_init_pwm; servo3_current_pwm > m_servo3_pwm; servo3_current_pwm-=MOTOR_MOVE)
 80024b2:	4b4d      	ldr	r3, [pc, #308]	@ (80025e8 <move_direction+0x264>)
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b8:	e009      	b.n	80024ce <move_direction+0x14a>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, servo3_current_pwm);
 80024ba:	4b49      	ldr	r3, [pc, #292]	@ (80025e0 <move_direction+0x25c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c0:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_Delay(MOTOR_DELAY);
 80024c2:	2003      	movs	r0, #3
 80024c4:	f000 fd76 	bl	8002fb4 <HAL_Delay>
		for(servo3_current_pwm = servo3_init_pwm; servo3_current_pwm > m_servo3_pwm; servo3_current_pwm-=MOTOR_MOVE)
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	3b05      	subs	r3, #5
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	dcf1      	bgt.n	80024ba <move_direction+0x136>
		}

	}

	//gripper
	if(grip_flag == 1)
 80024d6:	4b45      	ldr	r3, [pc, #276]	@ (80025ec <move_direction+0x268>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d111      	bne.n	8002502 <move_direction+0x17e>
	{
		for(long grip_cur = gripper_init_pwm; grip_cur < m_grip_pwm; grip_cur+=GRIP_MOVE)
 80024de:	4b44      	ldr	r3, [pc, #272]	@ (80025f0 <move_direction+0x26c>)
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	623b      	str	r3, [r7, #32]
 80024e4:	e009      	b.n	80024fa <move_direction+0x176>
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, grip_cur);
 80024e6:	4b43      	ldr	r3, [pc, #268]	@ (80025f4 <move_direction+0x270>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6a3a      	ldr	r2, [r7, #32]
 80024ec:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(MOTOR_DELAY);
 80024ee:	2003      	movs	r0, #3
 80024f0:	f000 fd60 	bl	8002fb4 <HAL_Delay>
		for(long grip_cur = gripper_init_pwm; grip_cur < m_grip_pwm; grip_cur+=GRIP_MOVE)
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	330f      	adds	r3, #15
 80024f8:	623b      	str	r3, [r7, #32]
 80024fa:	6a3a      	ldr	r2, [r7, #32]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	429a      	cmp	r2, r3
 8002500:	dbf1      	blt.n	80024e6 <move_direction+0x162>
		}
	}
	if(grip_flag == 0)
 8002502:	4b3a      	ldr	r3, [pc, #232]	@ (80025ec <move_direction+0x268>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d112      	bne.n	8002530 <move_direction+0x1ac>
	{
		for(long grip_cur = m_grip_pwm; grip_cur > gripper_init_pwm; grip_cur-=GRIP_MOVE)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	e009      	b.n	8002524 <move_direction+0x1a0>
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, grip_cur);
 8002510:	4b38      	ldr	r3, [pc, #224]	@ (80025f4 <move_direction+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(MOTOR_DELAY);
 8002518:	2003      	movs	r0, #3
 800251a:	f000 fd4b 	bl	8002fb4 <HAL_Delay>
		for(long grip_cur = m_grip_pwm; grip_cur > gripper_init_pwm; grip_cur-=GRIP_MOVE)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3b0f      	subs	r3, #15
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	4b32      	ldr	r3, [pc, #200]	@ (80025f0 <move_direction+0x26c>)
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	4293      	cmp	r3, r2
 800252e:	dcef      	bgt.n	8002510 <move_direction+0x18c>

/////////////////////////////////////////////////////////////////////////////////////////////////////////

	//move back to initial position
	//servo2 move back
	if(servo2_init_pwm >= m_servo2_pwm)
 8002530:	4b2c      	ldr	r3, [pc, #176]	@ (80025e4 <move_direction+0x260>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	4293      	cmp	r3, r2
 800253a:	dc13      	bgt.n	8002564 <move_direction+0x1e0>
	{
		for(servo2_current_pwm = m_servo2_pwm; servo2_current_pwm < servo2_init_pwm; servo2_current_pwm+=MOTOR_MOVE)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002540:	e009      	b.n	8002556 <move_direction+0x1d2>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, servo2_current_pwm);
 8002542:	4b27      	ldr	r3, [pc, #156]	@ (80025e0 <move_direction+0x25c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002548:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_Delay(MOTOR_DELAY);
 800254a:	2003      	movs	r0, #3
 800254c:	f000 fd32 	bl	8002fb4 <HAL_Delay>
		for(servo2_current_pwm = m_servo2_pwm; servo2_current_pwm < servo2_init_pwm; servo2_current_pwm+=MOTOR_MOVE)
 8002550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002552:	3305      	adds	r3, #5
 8002554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002556:	4b23      	ldr	r3, [pc, #140]	@ (80025e4 <move_direction+0x260>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255e:	4293      	cmp	r3, r2
 8002560:	dbef      	blt.n	8002542 <move_direction+0x1be>
 8002562:	e018      	b.n	8002596 <move_direction+0x212>
		}

	}
	else if(servo2_init_pwm < m_servo2_pwm)
 8002564:	4b1f      	ldr	r3, [pc, #124]	@ (80025e4 <move_direction+0x260>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	4293      	cmp	r3, r2
 800256e:	dd12      	ble.n	8002596 <move_direction+0x212>
	{
		for(servo2_current_pwm = m_servo2_pwm; servo2_current_pwm > servo2_init_pwm; servo2_current_pwm-=MOTOR_MOVE)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002574:	e009      	b.n	800258a <move_direction+0x206>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, servo2_current_pwm);
 8002576:	4b1a      	ldr	r3, [pc, #104]	@ (80025e0 <move_direction+0x25c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800257c:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_Delay(MOTOR_DELAY);
 800257e:	2003      	movs	r0, #3
 8002580:	f000 fd18 	bl	8002fb4 <HAL_Delay>
		for(servo2_current_pwm = m_servo2_pwm; servo2_current_pwm > servo2_init_pwm; servo2_current_pwm-=MOTOR_MOVE)
 8002584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002586:	3b05      	subs	r3, #5
 8002588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800258a:	4b16      	ldr	r3, [pc, #88]	@ (80025e4 <move_direction+0x260>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002592:	4293      	cmp	r3, r2
 8002594:	dcef      	bgt.n	8002576 <move_direction+0x1f2>
		}

	}

	//servo3 move back
	if(servo3_init_pwm >= m_servo3_pwm)
 8002596:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <move_direction+0x264>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4293      	cmp	r3, r2
 80025a0:	dc13      	bgt.n	80025ca <move_direction+0x246>
	{
		for(servo3_current_pwm = m_servo3_pwm; servo3_current_pwm < servo3_init_pwm; servo3_current_pwm+=MOTOR_MOVE)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a6:	e009      	b.n	80025bc <move_direction+0x238>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, servo3_current_pwm);
 80025a8:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <move_direction+0x25c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ae:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_Delay(MOTOR_DELAY);
 80025b0:	2003      	movs	r0, #3
 80025b2:	f000 fcff 	bl	8002fb4 <HAL_Delay>
		for(servo3_current_pwm = m_servo3_pwm; servo3_current_pwm < servo3_init_pwm; servo3_current_pwm+=MOTOR_MOVE)
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	3305      	adds	r3, #5
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80025bc:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <move_direction+0x264>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	4293      	cmp	r3, r2
 80025c6:	dbef      	blt.n	80025a8 <move_direction+0x224>
 80025c8:	e026      	b.n	8002618 <move_direction+0x294>
		}

	}
	else if(servo3_init_pwm < m_servo3_pwm)
 80025ca:	4b07      	ldr	r3, [pc, #28]	@ (80025e8 <move_direction+0x264>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4293      	cmp	r3, r2
 80025d4:	dd20      	ble.n	8002618 <move_direction+0x294>
	{
		for(servo3_current_pwm = m_servo3_pwm; servo3_current_pwm > servo3_init_pwm; servo3_current_pwm-=MOTOR_MOVE)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025da:	e017      	b.n	800260c <move_direction+0x288>
 80025dc:	20000ba4 	.word	0x20000ba4
 80025e0:	20000b14 	.word	0x20000b14
 80025e4:	20000ba6 	.word	0x20000ba6
 80025e8:	20000ba8 	.word	0x20000ba8
 80025ec:	20000bbc 	.word	0x20000bbc
 80025f0:	20000bac 	.word	0x20000bac
 80025f4:	20000b5c 	.word	0x20000b5c
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, servo3_current_pwm);
 80025f8:	4b23      	ldr	r3, [pc, #140]	@ (8002688 <move_direction+0x304>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025fe:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_Delay(MOTOR_DELAY);
 8002600:	2003      	movs	r0, #3
 8002602:	f000 fcd7 	bl	8002fb4 <HAL_Delay>
		for(servo3_current_pwm = m_servo3_pwm; servo3_current_pwm > servo3_init_pwm; servo3_current_pwm-=MOTOR_MOVE)
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	3b05      	subs	r3, #5
 800260a:	627b      	str	r3, [r7, #36]	@ 0x24
 800260c:	4b1f      	ldr	r3, [pc, #124]	@ (800268c <move_direction+0x308>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	4293      	cmp	r3, r2
 8002616:	dcef      	bgt.n	80025f8 <move_direction+0x274>
		}

	}

	//servo1 move back
	if(servo1_init_pwm >= m_servo1_pwm)
 8002618:	4b1d      	ldr	r3, [pc, #116]	@ (8002690 <move_direction+0x30c>)
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4293      	cmp	r3, r2
 8002622:	dc13      	bgt.n	800264c <move_direction+0x2c8>
	{
		for(servo1_current_pwm = m_servo1_pwm; servo1_current_pwm < servo1_init_pwm; servo1_current_pwm+=MOTOR_MOVE)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002628:	e009      	b.n	800263e <move_direction+0x2ba>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, servo1_current_pwm);
 800262a:	4b17      	ldr	r3, [pc, #92]	@ (8002688 <move_direction+0x304>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002630:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(MOTOR_DELAY);
 8002632:	2003      	movs	r0, #3
 8002634:	f000 fcbe 	bl	8002fb4 <HAL_Delay>
		for(servo1_current_pwm = m_servo1_pwm; servo1_current_pwm < servo1_init_pwm; servo1_current_pwm+=MOTOR_MOVE)
 8002638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800263a:	3305      	adds	r3, #5
 800263c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800263e:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <move_direction+0x30c>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002646:	4293      	cmp	r3, r2
 8002648:	dbef      	blt.n	800262a <move_direction+0x2a6>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, servo3_init_pwm);
	HAL_Delay(1000);
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, servo1_init_pwm);
	HAL_Delay(1000);
	*/
}
 800264a:	e018      	b.n	800267e <move_direction+0x2fa>
	else if(servo1_init_pwm < m_servo1_pwm)
 800264c:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <move_direction+0x30c>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	4293      	cmp	r3, r2
 8002656:	dd12      	ble.n	800267e <move_direction+0x2fa>
		for(servo1_current_pwm = m_servo1_pwm; servo1_current_pwm > servo1_init_pwm; servo1_current_pwm-=MOTOR_MOVE)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800265c:	e009      	b.n	8002672 <move_direction+0x2ee>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, servo1_current_pwm);
 800265e:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <move_direction+0x304>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002664:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(MOTOR_DELAY);
 8002666:	2003      	movs	r0, #3
 8002668:	f000 fca4 	bl	8002fb4 <HAL_Delay>
		for(servo1_current_pwm = m_servo1_pwm; servo1_current_pwm > servo1_init_pwm; servo1_current_pwm-=MOTOR_MOVE)
 800266c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266e:	3b05      	subs	r3, #5
 8002670:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002672:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <move_direction+0x30c>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267a:	4293      	cmp	r3, r2
 800267c:	dcef      	bgt.n	800265e <move_direction+0x2da>
}
 800267e:	bf00      	nop
 8002680:	3730      	adds	r7, #48	@ 0x30
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000b14 	.word	0x20000b14
 800268c:	20000ba8 	.word	0x20000ba8
 8002690:	20000ba4 	.word	0x20000ba4

08002694 <MX_GPIO_LED_ON>:
  return ch;
}
#endif

void MX_GPIO_LED_ON(int pin)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2201      	movs	r2, #1
 80026a2:	4619      	mov	r1, r3
 80026a4:	4803      	ldr	r0, [pc, #12]	@ (80026b4 <MX_GPIO_LED_ON+0x20>)
 80026a6:	f000 ffe9 	bl	800367c <HAL_GPIO_WritePin>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40020000 	.word	0x40020000

080026b8 <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2200      	movs	r2, #0
 80026c6:	4619      	mov	r1, r3
 80026c8:	4803      	ldr	r0, [pc, #12]	@ (80026d8 <MX_GPIO_LED_OFF+0x20>)
 80026ca:	f000 ffd7 	bl	800367c <HAL_GPIO_WritePin>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40020000 	.word	0x40020000

080026dc <esp_event>:

/* 의근님 코드 START */

void esp_event(char * recvBuf)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b09c      	sub	sp, #112	@ 0x70
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	6078      	str	r0, [r7, #4]
  int i=0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 80026e8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	223c      	movs	r2, #60	@ 0x3c
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f004 fc3b 	bl	8006f80 <memset>

	strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fd fdc8 	bl	80002a0 <strlen>
 8002710:	4603      	mov	r3, r0
 8002712:	3b01      	subs	r3, #1
 8002714:	4a84      	ldr	r2, [pc, #528]	@ (8002928 <esp_event+0x24c>)
 8002716:	2100      	movs	r1, #0
 8002718:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4883      	ldr	r0, [pc, #524]	@ (800292c <esp_event+0x250>)
 800271e:	f004 fa0b 	bl	8006b38 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8002722:	4983      	ldr	r1, [pc, #524]	@ (8002930 <esp_event+0x254>)
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f004 fc53 	bl	8006fd0 <strtok>
 800272a:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 800272c:	e011      	b.n	8002752 <esp_event+0x76>
  {
    pArray[i] = pToken;
 800272e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	3368      	adds	r3, #104	@ 0x68
 8002734:	443b      	add	r3, r7
 8002736:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002738:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 800273c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800273e:	3301      	adds	r3, #1
 8002740:	667b      	str	r3, [r7, #100]	@ 0x64
 8002742:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002744:	2b04      	cmp	r3, #4
 8002746:	dc08      	bgt.n	800275a <esp_event+0x7e>
      break;
    pToken = strtok(NULL,"[@]");
 8002748:	4979      	ldr	r1, [pc, #484]	@ (8002930 <esp_event+0x254>)
 800274a:	2000      	movs	r0, #0
 800274c:	f004 fc40 	bl	8006fd0 <strtok>
 8002750:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8002752:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ea      	bne.n	800272e <esp_event+0x52>
 8002758:	e000      	b.n	800275c <esp_event+0x80>
      break;
 800275a:	bf00      	nop
  }

  if(!strcmp(pArray[1],"LED"))
 800275c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800275e:	4975      	ldr	r1, [pc, #468]	@ (8002934 <esp_event+0x258>)
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd fd3d 	bl	80001e0 <strcmp>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d121      	bne.n	80027b0 <esp_event+0xd4>
  {
  	if(!strcmp(pArray[2],"ON"))
 800276c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800276e:	4972      	ldr	r1, [pc, #456]	@ (8002938 <esp_event+0x25c>)
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd fd35 	bl	80001e0 <strcmp>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d103      	bne.n	8002784 <esp_event+0xa8>
  	{
  		MX_GPIO_LED_ON(LD2_Pin);
 800277c:	2020      	movs	r0, #32
 800277e:	f7ff ff89 	bl	8002694 <MX_GPIO_LED_ON>
 8002782:	e00a      	b.n	800279a <esp_event+0xbe>

  	}
		else if(!strcmp(pArray[2],"OFF"))
 8002784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002786:	496d      	ldr	r1, [pc, #436]	@ (800293c <esp_event+0x260>)
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fd29 	bl	80001e0 <strcmp>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <esp_event+0xbe>
		{
				MX_GPIO_LED_OFF(LD2_Pin);
 8002794:	2020      	movs	r0, #32
 8002796:	f7ff ff8f 	bl	80026b8 <MX_GPIO_LED_OFF>
		}
		sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 800279a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800279c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800279e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a0:	f107 000c 	add.w	r0, r7, #12
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	460b      	mov	r3, r1
 80027a8:	4965      	ldr	r1, [pc, #404]	@ (8002940 <esp_event+0x264>)
 80027aa:	f004 faf1 	bl	8006d90 <siprintf>
 80027ae:	e0ae      	b.n	800290e <esp_event+0x232>
  }

  else if(!strcmp(pArray[1],"1"))
 80027b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b2:	4964      	ldr	r1, [pc, #400]	@ (8002944 <esp_event+0x268>)
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fd13 	bl	80001e0 <strcmp>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f040 8091 	bne.w	80028e4 <esp_event+0x208>
  {
	  	sprintf(sendBuf, "[%s]OBJECT_GRIPPING\n",pArray[0]);
 80027c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027c4:	f107 030c 	add.w	r3, r7, #12
 80027c8:	495f      	ldr	r1, [pc, #380]	@ (8002948 <esp_event+0x26c>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f004 fae0 	bl	8006d90 <siprintf>
	  	esp_send_data(sendBuf);
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fe9f 	bl	8001518 <esp_send_data>
		grip_flag = 1;
 80027da:	4b5c      	ldr	r3, [pc, #368]	@ (800294c <esp_event+0x270>)
 80027dc:	2201      	movs	r2, #1
 80027de:	601a      	str	r2, [r3, #0]
		mathmatics(grip_pos, &servo_data);
 80027e0:	495b      	ldr	r1, [pc, #364]	@ (8002950 <esp_event+0x274>)
 80027e2:	485c      	ldr	r0, [pc, #368]	@ (8002954 <esp_event+0x278>)
 80027e4:	f7ff fa7c 	bl	8001ce0 <mathmatics>
		printf("servo1_pwm : %ld, servo2_pwm : %ld, servo3_pwm : %ld\r\n", servo_data.servo1_pwm, servo_data.servo2_pwm, servo_data.servo3_pwm);
 80027e8:	4b59      	ldr	r3, [pc, #356]	@ (8002950 <esp_event+0x274>)
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	4b58      	ldr	r3, [pc, #352]	@ (8002950 <esp_event+0x274>)
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	4b57      	ldr	r3, [pc, #348]	@ (8002950 <esp_event+0x274>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4858      	ldr	r0, [pc, #352]	@ (8002958 <esp_event+0x27c>)
 80027f6:	f004 f99f 	bl	8006b38 <iprintf>
		move_direction(&servo_data);
 80027fa:	4855      	ldr	r0, [pc, #340]	@ (8002950 <esp_event+0x274>)
 80027fc:	f7ff fdc2 	bl	8002384 <move_direction>
		grip_flag = 0;
 8002800:	4b52      	ldr	r3, [pc, #328]	@ (800294c <esp_event+0x270>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]

		if(!strcmp(pArray[2], "1"))
 8002806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002808:	494e      	ldr	r1, [pc, #312]	@ (8002944 <esp_event+0x268>)
 800280a:	4618      	mov	r0, r3
 800280c:	f7fd fce8 	bl	80001e0 <strcmp>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d11c      	bne.n	8002850 <esp_event+0x174>
		{
			mathmatics(red_pos, &servo_data);
 8002816:	494e      	ldr	r1, [pc, #312]	@ (8002950 <esp_event+0x274>)
 8002818:	4850      	ldr	r0, [pc, #320]	@ (800295c <esp_event+0x280>)
 800281a:	f7ff fa61 	bl	8001ce0 <mathmatics>
			printf("servo1_pwm : %ld, servo2_pwm : %ld, servo3_pwm : %ld\r\n", servo_data.servo1_pwm, servo_data.servo2_pwm, servo_data.servo3_pwm);
 800281e:	4b4c      	ldr	r3, [pc, #304]	@ (8002950 <esp_event+0x274>)
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	4b4b      	ldr	r3, [pc, #300]	@ (8002950 <esp_event+0x274>)
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	4b4a      	ldr	r3, [pc, #296]	@ (8002950 <esp_event+0x274>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	484b      	ldr	r0, [pc, #300]	@ (8002958 <esp_event+0x27c>)
 800282c:	f004 f984 	bl	8006b38 <iprintf>
			move_direction(&servo_data);
 8002830:	4847      	ldr	r0, [pc, #284]	@ (8002950 <esp_event+0x274>)
 8002832:	f7ff fda7 	bl	8002384 <move_direction>
			sprintf(sendBuf, "[%s]DONE\n",pArray[0]);
 8002836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002838:	f107 030c 	add.w	r3, r7, #12
 800283c:	4948      	ldr	r1, [pc, #288]	@ (8002960 <esp_event+0x284>)
 800283e:	4618      	mov	r0, r3
 8002840:	f004 faa6 	bl	8006d90 <siprintf>
			esp_send_data(sendBuf);
 8002844:	f107 030c 	add.w	r3, r7, #12
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fe65 	bl	8001518 <esp_send_data>
 800284e:	e05e      	b.n	800290e <esp_event+0x232>
		}
		else if(!strcmp(pArray[2], "2"))
 8002850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002852:	4944      	ldr	r1, [pc, #272]	@ (8002964 <esp_event+0x288>)
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fcc3 	bl	80001e0 <strcmp>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d11c      	bne.n	800289a <esp_event+0x1be>
		{
			mathmatics(green_pos, &servo_data);
 8002860:	493b      	ldr	r1, [pc, #236]	@ (8002950 <esp_event+0x274>)
 8002862:	4841      	ldr	r0, [pc, #260]	@ (8002968 <esp_event+0x28c>)
 8002864:	f7ff fa3c 	bl	8001ce0 <mathmatics>
			printf("servo1_pwm : %ld, servo2_pwm : %ld, servo3_pwm : %ld\r\n", servo_data.servo1_pwm, servo_data.servo2_pwm, servo_data.servo3_pwm);
 8002868:	4b39      	ldr	r3, [pc, #228]	@ (8002950 <esp_event+0x274>)
 800286a:	6819      	ldr	r1, [r3, #0]
 800286c:	4b38      	ldr	r3, [pc, #224]	@ (8002950 <esp_event+0x274>)
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4b37      	ldr	r3, [pc, #220]	@ (8002950 <esp_event+0x274>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4838      	ldr	r0, [pc, #224]	@ (8002958 <esp_event+0x27c>)
 8002876:	f004 f95f 	bl	8006b38 <iprintf>
			move_direction(&servo_data);
 800287a:	4835      	ldr	r0, [pc, #212]	@ (8002950 <esp_event+0x274>)
 800287c:	f7ff fd82 	bl	8002384 <move_direction>
			sprintf(sendBuf, "[%s]DONE\n",pArray[0]);
 8002880:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	4936      	ldr	r1, [pc, #216]	@ (8002960 <esp_event+0x284>)
 8002888:	4618      	mov	r0, r3
 800288a:	f004 fa81 	bl	8006d90 <siprintf>
			esp_send_data(sendBuf);
 800288e:	f107 030c 	add.w	r3, r7, #12
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fe40 	bl	8001518 <esp_send_data>
 8002898:	e039      	b.n	800290e <esp_event+0x232>
		}
		else if(!strcmp(pArray[2], "3"))
 800289a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800289c:	4933      	ldr	r1, [pc, #204]	@ (800296c <esp_event+0x290>)
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fc9e 	bl	80001e0 <strcmp>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d131      	bne.n	800290e <esp_event+0x232>
		{
			mathmatics(blue_pos, &servo_data);
 80028aa:	4929      	ldr	r1, [pc, #164]	@ (8002950 <esp_event+0x274>)
 80028ac:	4830      	ldr	r0, [pc, #192]	@ (8002970 <esp_event+0x294>)
 80028ae:	f7ff fa17 	bl	8001ce0 <mathmatics>
			printf("servo1_pwm : %ld, servo2_pwm : %ld, servo3_pwm : %ld\r\n", servo_data.servo1_pwm, servo_data.servo2_pwm, servo_data.servo3_pwm);
 80028b2:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <esp_event+0x274>)
 80028b4:	6819      	ldr	r1, [r3, #0]
 80028b6:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <esp_event+0x274>)
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4b25      	ldr	r3, [pc, #148]	@ (8002950 <esp_event+0x274>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4826      	ldr	r0, [pc, #152]	@ (8002958 <esp_event+0x27c>)
 80028c0:	f004 f93a 	bl	8006b38 <iprintf>
			move_direction(&servo_data);
 80028c4:	4822      	ldr	r0, [pc, #136]	@ (8002950 <esp_event+0x274>)
 80028c6:	f7ff fd5d 	bl	8002384 <move_direction>
			sprintf(sendBuf, "[%s]DONE\n",pArray[0]);
 80028ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	4923      	ldr	r1, [pc, #140]	@ (8002960 <esp_event+0x284>)
 80028d2:	4618      	mov	r0, r3
 80028d4:	f004 fa5c 	bl	8006d90 <siprintf>
			esp_send_data(sendBuf);
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fe1b 	bl	8001518 <esp_send_data>
 80028e2:	e014      	b.n	800290e <esp_event+0x232>
		}
  }

  else if(!strncmp(pArray[1]," New conn",8))
 80028e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028e6:	2208      	movs	r2, #8
 80028e8:	4922      	ldr	r1, [pc, #136]	@ (8002974 <esp_event+0x298>)
 80028ea:	4618      	mov	r0, r3
 80028ec:	f004 fb5d 	bl	8006faa <strncmp>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <esp_event+0x240>
  {
//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
     return;
  }
  else if(!strncmp(pArray[1]," Already log",8))
 80028f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028f8:	2208      	movs	r2, #8
 80028fa:	491f      	ldr	r1, [pc, #124]	@ (8002978 <esp_event+0x29c>)
 80028fc:	4618      	mov	r0, r3
 80028fe:	f004 fb54 	bl	8006faa <strncmp>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10b      	bne.n	8002920 <esp_event+0x244>
  {
// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
			esp_client_conn();
 8002908:	f7fe fc88 	bl	800121c <esp_client_conn>
      return;
 800290c:	e009      	b.n	8002922 <esp_event+0x246>
  else
      return;

//  esp_send_data(sendBuf);
//  printf("Debug send : %s\r\n",sendBuf);
  printf("NOW STATE : %s\r\n",sendBuf);
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	4619      	mov	r1, r3
 8002914:	4819      	ldr	r0, [pc, #100]	@ (800297c <esp_event+0x2a0>)
 8002916:	f004 f90f 	bl	8006b38 <iprintf>
 800291a:	e002      	b.n	8002922 <esp_event+0x246>
     return;
 800291c:	bf00      	nop
 800291e:	e000      	b.n	8002922 <esp_event+0x246>
      return;
 8002920:	bf00      	nop
}
 8002922:	3768      	adds	r7, #104	@ 0x68
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000bc0 	.word	0x20000bc0
 800292c:	0800c6b4 	.word	0x0800c6b4
 8002930:	0800c6c8 	.word	0x0800c6c8
 8002934:	0800c6cc 	.word	0x0800c6cc
 8002938:	0800c6d0 	.word	0x0800c6d0
 800293c:	0800c6d4 	.word	0x0800c6d4
 8002940:	0800c6d8 	.word	0x0800c6d8
 8002944:	0800c6e4 	.word	0x0800c6e4
 8002948:	0800c6e8 	.word	0x0800c6e8
 800294c:	20000bbc 	.word	0x20000bbc
 8002950:	20000bb0 	.word	0x20000bb0
 8002954:	20000000 	.word	0x20000000
 8002958:	0800c67c 	.word	0x0800c67c
 800295c:	2000000c 	.word	0x2000000c
 8002960:	0800c700 	.word	0x0800c700
 8002964:	0800c70c 	.word	0x0800c70c
 8002968:	20000018 	.word	0x20000018
 800296c:	0800c710 	.word	0x0800c710
 8002970:	20000024 	.word	0x20000024
 8002974:	0800c714 	.word	0x0800c714
 8002978:	0800c720 	.word	0x0800c720
 800297c:	0800c730 	.word	0x0800c730

08002980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002984:	b672      	cpsid	i
}
 8002986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <Error_Handler+0x8>

0800298c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	4b10      	ldr	r3, [pc, #64]	@ (80029d8 <HAL_MspInit+0x4c>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	4a0f      	ldr	r2, [pc, #60]	@ (80029d8 <HAL_MspInit+0x4c>)
 800299c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029a2:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <HAL_MspInit+0x4c>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <HAL_MspInit+0x4c>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	4a08      	ldr	r2, [pc, #32]	@ (80029d8 <HAL_MspInit+0x4c>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029be:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_MspInit+0x4c>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029ca:	2007      	movs	r0, #7
 80029cc:	f000 fbe6 	bl	800319c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800

080029dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a15      	ldr	r2, [pc, #84]	@ (8002a40 <HAL_TIM_Base_MspInit+0x64>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d10e      	bne.n	8002a0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b14      	ldr	r3, [pc, #80]	@ (8002a44 <HAL_TIM_Base_MspInit+0x68>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	4a13      	ldr	r2, [pc, #76]	@ (8002a44 <HAL_TIM_Base_MspInit+0x68>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029fe:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <HAL_TIM_Base_MspInit+0x68>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a0a:	e012      	b.n	8002a32 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0d      	ldr	r2, [pc, #52]	@ (8002a48 <HAL_TIM_Base_MspInit+0x6c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10d      	bne.n	8002a32 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <HAL_TIM_Base_MspInit+0x68>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	4a09      	ldr	r2, [pc, #36]	@ (8002a44 <HAL_TIM_Base_MspInit+0x68>)
 8002a20:	f043 0304 	orr.w	r3, r3, #4
 8002a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a26:	4b07      	ldr	r3, [pc, #28]	@ (8002a44 <HAL_TIM_Base_MspInit+0x68>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40000800 	.word	0x40000800

08002a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	@ 0x28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a33      	ldr	r2, [pc, #204]	@ (8002b38 <HAL_TIM_MspPostInit+0xec>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d13c      	bne.n	8002ae8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	4b32      	ldr	r3, [pc, #200]	@ (8002b3c <HAL_TIM_MspPostInit+0xf0>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	4a31      	ldr	r2, [pc, #196]	@ (8002b3c <HAL_TIM_MspPostInit+0xf0>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b3c <HAL_TIM_MspPostInit+0xf0>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b3c <HAL_TIM_MspPostInit+0xf0>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	4a2a      	ldr	r2, [pc, #168]	@ (8002b3c <HAL_TIM_MspPostInit+0xf0>)
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9a:	4b28      	ldr	r3, [pc, #160]	@ (8002b3c <HAL_TIM_MspPostInit+0xf0>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aa6:	23c0      	movs	r3, #192	@ 0xc0
 8002aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aba:	f107 0314 	add.w	r3, r7, #20
 8002abe:	4619      	mov	r1, r3
 8002ac0:	481f      	ldr	r0, [pc, #124]	@ (8002b40 <HAL_TIM_MspPostInit+0xf4>)
 8002ac2:	f000 fc3f 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4818      	ldr	r0, [pc, #96]	@ (8002b44 <HAL_TIM_MspPostInit+0xf8>)
 8002ae2:	f000 fc2f 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ae6:	e022      	b.n	8002b2e <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM4)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a16      	ldr	r2, [pc, #88]	@ (8002b48 <HAL_TIM_MspPostInit+0xfc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d11d      	bne.n	8002b2e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <HAL_TIM_MspPostInit+0xf0>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	4a10      	ldr	r2, [pc, #64]	@ (8002b3c <HAL_TIM_MspPostInit+0xf0>)
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b02:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <HAL_TIM_MspPostInit+0xf0>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b0e:	2340      	movs	r3, #64	@ 0x40
 8002b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b22:	f107 0314 	add.w	r3, r7, #20
 8002b26:	4619      	mov	r1, r3
 8002b28:	4806      	ldr	r0, [pc, #24]	@ (8002b44 <HAL_TIM_MspPostInit+0xf8>)
 8002b2a:	f000 fc0b 	bl	8003344 <HAL_GPIO_Init>
}
 8002b2e:	bf00      	nop
 8002b30:	3728      	adds	r7, #40	@ 0x28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020400 	.word	0x40020400
 8002b48:	40000800 	.word	0x40000800

08002b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08c      	sub	sp, #48	@ 0x30
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	f107 031c 	add.w	r3, r7, #28
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a36      	ldr	r2, [pc, #216]	@ (8002c44 <HAL_UART_MspInit+0xf8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d12c      	bne.n	8002bc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	4b35      	ldr	r3, [pc, #212]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	4a34      	ldr	r2, [pc, #208]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b7e:	4b32      	ldr	r3, [pc, #200]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	4a2d      	ldr	r2, [pc, #180]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ba6:	230c      	movs	r3, #12
 8002ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bb6:	2307      	movs	r3, #7
 8002bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bba:	f107 031c 	add.w	r3, r7, #28
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4822      	ldr	r0, [pc, #136]	@ (8002c4c <HAL_UART_MspInit+0x100>)
 8002bc2:	f000 fbbf 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002bc6:	e038      	b.n	8002c3a <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a20      	ldr	r2, [pc, #128]	@ (8002c50 <HAL_UART_MspInit+0x104>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d133      	bne.n	8002c3a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	4a1b      	ldr	r2, [pc, #108]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002bdc:	f043 0320 	orr.w	r3, r3, #32
 8002be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002be2:	4b19      	ldr	r3, [pc, #100]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b15      	ldr	r3, [pc, #84]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	4a14      	ldr	r2, [pc, #80]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfe:	4b12      	ldr	r3, [pc, #72]	@ (8002c48 <HAL_UART_MspInit+0xfc>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c0a:	23c0      	movs	r3, #192	@ 0xc0
 8002c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c16:	2303      	movs	r3, #3
 8002c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c1e:	f107 031c 	add.w	r3, r7, #28
 8002c22:	4619      	mov	r1, r3
 8002c24:	480b      	ldr	r0, [pc, #44]	@ (8002c54 <HAL_UART_MspInit+0x108>)
 8002c26:	f000 fb8d 	bl	8003344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2047      	movs	r0, #71	@ 0x47
 8002c30:	f000 fabf 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002c34:	2047      	movs	r0, #71	@ 0x47
 8002c36:	f000 fad8 	bl	80031ea <HAL_NVIC_EnableIRQ>
}
 8002c3a:	bf00      	nop
 8002c3c:	3730      	adds	r7, #48	@ 0x30
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40004400 	.word	0x40004400
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40011400 	.word	0x40011400
 8002c54:	40020800 	.word	0x40020800

08002c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <NMI_Handler+0x4>

08002c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <HardFault_Handler+0x4>

08002c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <MemManage_Handler+0x4>

08002c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <BusFault_Handler+0x4>

08002c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <UsageFault_Handler+0x4>

08002c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cae:	f000 f961 	bl	8002f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002cbc:	4802      	ldr	r0, [pc, #8]	@ (8002cc8 <USART6_IRQHandler+0x10>)
 8002cbe:	f002 f8b7 	bl	8004e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000ac8 	.word	0x20000ac8

08002ccc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return 1;
 8002cd0:	2301      	movs	r3, #1
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <_kill>:

int _kill(int pid, int sig)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ce6:	f004 fa2f 	bl	8007148 <__errno>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2216      	movs	r2, #22
 8002cee:	601a      	str	r2, [r3, #0]
  return -1;
 8002cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <_exit>:

void _exit (int status)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d04:	f04f 31ff 	mov.w	r1, #4294967295
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ffe7 	bl	8002cdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d0e:	bf00      	nop
 8002d10:	e7fd      	b.n	8002d0e <_exit+0x12>

08002d12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	e00a      	b.n	8002d3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d24:	f3af 8000 	nop.w
 8002d28:	4601      	mov	r1, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	60ba      	str	r2, [r7, #8]
 8002d30:	b2ca      	uxtb	r2, r1
 8002d32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3301      	adds	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	dbf0      	blt.n	8002d24 <_read+0x12>
  }

  return len;
 8002d42:	687b      	ldr	r3, [r7, #4]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e009      	b.n	8002d72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	60ba      	str	r2, [r7, #8]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe fc3e 	bl	80015e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	dbf1      	blt.n	8002d5e <_write+0x12>
  }
  return len;
 8002d7a:	687b      	ldr	r3, [r7, #4]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_close>:

int _close(int file)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dac:	605a      	str	r2, [r3, #4]
  return 0;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <_isatty>:

int _isatty(int file)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dc4:	2301      	movs	r3, #1
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df4:	4a14      	ldr	r2, [pc, #80]	@ (8002e48 <_sbrk+0x5c>)
 8002df6:	4b15      	ldr	r3, [pc, #84]	@ (8002e4c <_sbrk+0x60>)
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e00:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <_sbrk+0x64>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e08:	4b11      	ldr	r3, [pc, #68]	@ (8002e50 <_sbrk+0x64>)
 8002e0a:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <_sbrk+0x68>)
 8002e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <_sbrk+0x64>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d207      	bcs.n	8002e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e1c:	f004 f994 	bl	8007148 <__errno>
 8002e20:	4603      	mov	r3, r0
 8002e22:	220c      	movs	r2, #12
 8002e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	e009      	b.n	8002e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e2c:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e32:	4b07      	ldr	r3, [pc, #28]	@ (8002e50 <_sbrk+0x64>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	4a05      	ldr	r2, [pc, #20]	@ (8002e50 <_sbrk+0x64>)
 8002e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20020000 	.word	0x20020000
 8002e4c:	00000400 	.word	0x00000400
 8002e50:	20000c00 	.word	0x20000c00
 8002e54:	20000d58 	.word	0x20000d58

08002e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e5c:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <SystemInit+0x20>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e62:	4a05      	ldr	r2, [pc, #20]	@ (8002e78 <SystemInit+0x20>)
 8002e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002eb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e80:	f7ff ffea 	bl	8002e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e84:	480c      	ldr	r0, [pc, #48]	@ (8002eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e86:	490d      	ldr	r1, [pc, #52]	@ (8002ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e88:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e8c:	e002      	b.n	8002e94 <LoopCopyDataInit>

08002e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e92:	3304      	adds	r3, #4

08002e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e98:	d3f9      	bcc.n	8002e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea0:	e001      	b.n	8002ea6 <LoopFillZerobss>

08002ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea4:	3204      	adds	r2, #4

08002ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea8:	d3fb      	bcc.n	8002ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eaa:	f004 f953 	bl	8007154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eae:	f7fe fbb3 	bl	8001618 <main>
  bx  lr    
 8002eb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ebc:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002ec0:	0800cc98 	.word	0x0800cc98
  ldr r2, =_sbss
 8002ec4:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002ec8:	20000d54 	.word	0x20000d54

08002ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ecc:	e7fe      	b.n	8002ecc <ADC_IRQHandler>
	...

08002ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f10 <HAL_Init+0x40>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f10 <HAL_Init+0x40>)
 8002eda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8002f10 <HAL_Init+0x40>)
 8002ee6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eec:	4b08      	ldr	r3, [pc, #32]	@ (8002f10 <HAL_Init+0x40>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a07      	ldr	r2, [pc, #28]	@ (8002f10 <HAL_Init+0x40>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef8:	2003      	movs	r0, #3
 8002efa:	f000 f94f 	bl	800319c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f000 f808 	bl	8002f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f04:	f7ff fd42 	bl	800298c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00

08002f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f1c:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_InitTick+0x54>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <HAL_InitTick+0x58>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f967 	bl	8003206 <HAL_SYSTICK_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00e      	b.n	8002f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b0f      	cmp	r3, #15
 8002f46:	d80a      	bhi.n	8002f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	f000 f92f 	bl	80031b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f54:	4a06      	ldr	r2, [pc, #24]	@ (8002f70 <HAL_InitTick+0x5c>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000030 	.word	0x20000030
 8002f6c:	20000038 	.word	0x20000038
 8002f70:	20000034 	.word	0x20000034

08002f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f78:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <HAL_IncTick+0x20>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_IncTick+0x24>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	4a04      	ldr	r2, [pc, #16]	@ (8002f98 <HAL_IncTick+0x24>)
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000038 	.word	0x20000038
 8002f98:	20000c04 	.word	0x20000c04

08002f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	@ (8002fb0 <HAL_GetTick+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000c04 	.word	0x20000c04

08002fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff ffee 	bl	8002f9c <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d005      	beq.n	8002fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fce:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff8 <HAL_Delay+0x44>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fda:	bf00      	nop
 8002fdc:	f7ff ffde 	bl	8002f9c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d8f7      	bhi.n	8002fdc <HAL_Delay+0x28>
  {
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000038 	.word	0x20000038

08002ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800300c:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003024:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800302c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302e:	4a04      	ldr	r2, [pc, #16]	@ (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003048:	4b04      	ldr	r3, [pc, #16]	@ (800305c <__NVIC_GetPriorityGrouping+0x18>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	f003 0307 	and.w	r3, r3, #7
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	db0b      	blt.n	800308a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4907      	ldr	r1, [pc, #28]	@ (8003098 <__NVIC_EnableIRQ+0x38>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2001      	movs	r0, #1
 8003082:	fa00 f202 	lsl.w	r2, r0, r2
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000e100 	.word	0xe000e100

0800309c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	db0a      	blt.n	80030c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	490c      	ldr	r1, [pc, #48]	@ (80030e8 <__NVIC_SetPriority+0x4c>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	440b      	add	r3, r1
 80030c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c4:	e00a      	b.n	80030dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4908      	ldr	r1, [pc, #32]	@ (80030ec <__NVIC_SetPriority+0x50>)
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	3b04      	subs	r3, #4
 80030d4:	0112      	lsls	r2, r2, #4
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	440b      	add	r3, r1
 80030da:	761a      	strb	r2, [r3, #24]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000e100 	.word	0xe000e100
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	@ 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f1c3 0307 	rsb	r3, r3, #7
 800310a:	2b04      	cmp	r3, #4
 800310c:	bf28      	it	cs
 800310e:	2304      	movcs	r3, #4
 8003110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3304      	adds	r3, #4
 8003116:	2b06      	cmp	r3, #6
 8003118:	d902      	bls.n	8003120 <NVIC_EncodePriority+0x30>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3b03      	subs	r3, #3
 800311e:	e000      	b.n	8003122 <NVIC_EncodePriority+0x32>
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	f04f 32ff 	mov.w	r2, #4294967295
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	401a      	ands	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003138:	f04f 31ff 	mov.w	r1, #4294967295
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	43d9      	mvns	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	4313      	orrs	r3, r2
         );
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	@ 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003168:	d301      	bcc.n	800316e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800316a:	2301      	movs	r3, #1
 800316c:	e00f      	b.n	800318e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800316e:	4a0a      	ldr	r2, [pc, #40]	@ (8003198 <SysTick_Config+0x40>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003176:	210f      	movs	r1, #15
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	f7ff ff8e 	bl	800309c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <SysTick_Config+0x40>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003186:	4b04      	ldr	r3, [pc, #16]	@ (8003198 <SysTick_Config+0x40>)
 8003188:	2207      	movs	r2, #7
 800318a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	e000e010 	.word	0xe000e010

0800319c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff29 	bl	8002ffc <__NVIC_SetPriorityGrouping>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b086      	sub	sp, #24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c4:	f7ff ff3e 	bl	8003044 <__NVIC_GetPriorityGrouping>
 80031c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	6978      	ldr	r0, [r7, #20]
 80031d0:	f7ff ff8e 	bl	80030f0 <NVIC_EncodePriority>
 80031d4:	4602      	mov	r2, r0
 80031d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff5d 	bl	800309c <__NVIC_SetPriority>
}
 80031e2:	bf00      	nop
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff31 	bl	8003060 <__NVIC_EnableIRQ>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff ffa2 	bl	8003158 <SysTick_Config>
 8003214:	4603      	mov	r3, r0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7ff feb6 	bl	8002f9c <HAL_GetTick>
 8003230:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d008      	beq.n	8003250 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2280      	movs	r2, #128	@ 0x80
 8003242:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e052      	b.n	80032f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0216 	bic.w	r2, r2, #22
 800325e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800326e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d103      	bne.n	8003280 <HAL_DMA_Abort+0x62>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0208 	bic.w	r2, r2, #8
 800328e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032a0:	e013      	b.n	80032ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032a2:	f7ff fe7b 	bl	8002f9c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b05      	cmp	r3, #5
 80032ae:	d90c      	bls.n	80032ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2203      	movs	r2, #3
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e015      	b.n	80032f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1e4      	bne.n	80032a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032dc:	223f      	movs	r2, #63	@ 0x3f
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d004      	beq.n	800331c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2280      	movs	r2, #128	@ 0x80
 8003316:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e00c      	b.n	8003336 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2205      	movs	r2, #5
 8003320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	@ 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	e159      	b.n	8003614 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003360:	2201      	movs	r2, #1
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	429a      	cmp	r2, r3
 800337a:	f040 8148 	bne.w	800360e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d005      	beq.n	8003396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003392:	2b02      	cmp	r3, #2
 8003394:	d130      	bne.n	80033f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	2203      	movs	r2, #3
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033cc:	2201      	movs	r2, #1
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 0201 	and.w	r2, r3, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b03      	cmp	r3, #3
 8003402:	d017      	beq.n	8003434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	2203      	movs	r2, #3
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d123      	bne.n	8003488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	08da      	lsrs	r2, r3, #3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3208      	adds	r2, #8
 8003448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	220f      	movs	r2, #15
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	08da      	lsrs	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3208      	adds	r2, #8
 8003482:	69b9      	ldr	r1, [r7, #24]
 8003484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	2203      	movs	r2, #3
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0203 	and.w	r2, r3, #3
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80a2 	beq.w	800360e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	4b57      	ldr	r3, [pc, #348]	@ (800362c <HAL_GPIO_Init+0x2e8>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	4a56      	ldr	r2, [pc, #344]	@ (800362c <HAL_GPIO_Init+0x2e8>)
 80034d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034da:	4b54      	ldr	r3, [pc, #336]	@ (800362c <HAL_GPIO_Init+0x2e8>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034e6:	4a52      	ldr	r2, [pc, #328]	@ (8003630 <HAL_GPIO_Init+0x2ec>)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	089b      	lsrs	r3, r3, #2
 80034ec:	3302      	adds	r3, #2
 80034ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	220f      	movs	r2, #15
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a49      	ldr	r2, [pc, #292]	@ (8003634 <HAL_GPIO_Init+0x2f0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d019      	beq.n	8003546 <HAL_GPIO_Init+0x202>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a48      	ldr	r2, [pc, #288]	@ (8003638 <HAL_GPIO_Init+0x2f4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_GPIO_Init+0x1fe>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a47      	ldr	r2, [pc, #284]	@ (800363c <HAL_GPIO_Init+0x2f8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00d      	beq.n	800353e <HAL_GPIO_Init+0x1fa>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a46      	ldr	r2, [pc, #280]	@ (8003640 <HAL_GPIO_Init+0x2fc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <HAL_GPIO_Init+0x1f6>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a45      	ldr	r2, [pc, #276]	@ (8003644 <HAL_GPIO_Init+0x300>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_GPIO_Init+0x1f2>
 8003532:	2304      	movs	r3, #4
 8003534:	e008      	b.n	8003548 <HAL_GPIO_Init+0x204>
 8003536:	2307      	movs	r3, #7
 8003538:	e006      	b.n	8003548 <HAL_GPIO_Init+0x204>
 800353a:	2303      	movs	r3, #3
 800353c:	e004      	b.n	8003548 <HAL_GPIO_Init+0x204>
 800353e:	2302      	movs	r3, #2
 8003540:	e002      	b.n	8003548 <HAL_GPIO_Init+0x204>
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <HAL_GPIO_Init+0x204>
 8003546:	2300      	movs	r3, #0
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	f002 0203 	and.w	r2, r2, #3
 800354e:	0092      	lsls	r2, r2, #2
 8003550:	4093      	lsls	r3, r2
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003558:	4935      	ldr	r1, [pc, #212]	@ (8003630 <HAL_GPIO_Init+0x2ec>)
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	3302      	adds	r3, #2
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003566:	4b38      	ldr	r3, [pc, #224]	@ (8003648 <HAL_GPIO_Init+0x304>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800358a:	4a2f      	ldr	r2, [pc, #188]	@ (8003648 <HAL_GPIO_Init+0x304>)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003590:	4b2d      	ldr	r3, [pc, #180]	@ (8003648 <HAL_GPIO_Init+0x304>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b4:	4a24      	ldr	r2, [pc, #144]	@ (8003648 <HAL_GPIO_Init+0x304>)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035ba:	4b23      	ldr	r3, [pc, #140]	@ (8003648 <HAL_GPIO_Init+0x304>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035de:	4a1a      	ldr	r2, [pc, #104]	@ (8003648 <HAL_GPIO_Init+0x304>)
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e4:	4b18      	ldr	r3, [pc, #96]	@ (8003648 <HAL_GPIO_Init+0x304>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003608:	4a0f      	ldr	r2, [pc, #60]	@ (8003648 <HAL_GPIO_Init+0x304>)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3301      	adds	r3, #1
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	2b0f      	cmp	r3, #15
 8003618:	f67f aea2 	bls.w	8003360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	3724      	adds	r7, #36	@ 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	40013800 	.word	0x40013800
 8003634:	40020000 	.word	0x40020000
 8003638:	40020400 	.word	0x40020400
 800363c:	40020800 	.word	0x40020800
 8003640:	40020c00 	.word	0x40020c00
 8003644:	40021000 	.word	0x40021000
 8003648:	40013c00 	.word	0x40013c00

0800364c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	887b      	ldrh	r3, [r7, #2]
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
 8003668:	e001      	b.n	800366e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800366a:	2300      	movs	r3, #0
 800366c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800366e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	807b      	strh	r3, [r7, #2]
 8003688:	4613      	mov	r3, r2
 800368a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800368c:	787b      	ldrb	r3, [r7, #1]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003698:	e003      	b.n	80036a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800369a:	887b      	ldrh	r3, [r7, #2]
 800369c:	041a      	lsls	r2, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	619a      	str	r2, [r3, #24]
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e267      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d075      	beq.n	80037ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036ce:	4b88      	ldr	r3, [pc, #544]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d00c      	beq.n	80036f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036da:	4b85      	ldr	r3, [pc, #532]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d112      	bne.n	800370c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e6:	4b82      	ldr	r3, [pc, #520]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036f2:	d10b      	bne.n	800370c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f4:	4b7e      	ldr	r3, [pc, #504]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d05b      	beq.n	80037b8 <HAL_RCC_OscConfig+0x108>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d157      	bne.n	80037b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e242      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x74>
 8003716:	4b76      	ldr	r3, [pc, #472]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a75      	ldr	r2, [pc, #468]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 800371c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e01d      	b.n	8003760 <HAL_RCC_OscConfig+0xb0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800372c:	d10c      	bne.n	8003748 <HAL_RCC_OscConfig+0x98>
 800372e:	4b70      	ldr	r3, [pc, #448]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a6f      	ldr	r2, [pc, #444]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	4b6d      	ldr	r3, [pc, #436]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a6c      	ldr	r2, [pc, #432]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e00b      	b.n	8003760 <HAL_RCC_OscConfig+0xb0>
 8003748:	4b69      	ldr	r3, [pc, #420]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a68      	ldr	r2, [pc, #416]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 800374e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	4b66      	ldr	r3, [pc, #408]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a65      	ldr	r2, [pc, #404]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 800375a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800375e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d013      	beq.n	8003790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7ff fc18 	bl	8002f9c <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003770:	f7ff fc14 	bl	8002f9c <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	@ 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e207      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	4b5b      	ldr	r3, [pc, #364]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0xc0>
 800378e:	e014      	b.n	80037ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7ff fc04 	bl	8002f9c <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003798:	f7ff fc00 	bl	8002f9c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	@ 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e1f3      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	4b51      	ldr	r3, [pc, #324]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0xe8>
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d063      	beq.n	800388e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037c6:	4b4a      	ldr	r3, [pc, #296]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d2:	4b47      	ldr	r3, [pc, #284]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d11c      	bne.n	8003818 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037de:	4b44      	ldr	r3, [pc, #272]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d116      	bne.n	8003818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ea:	4b41      	ldr	r3, [pc, #260]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_RCC_OscConfig+0x152>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d001      	beq.n	8003802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e1c7      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003802:	4b3b      	ldr	r3, [pc, #236]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4937      	ldr	r1, [pc, #220]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	e03a      	b.n	800388e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d020      	beq.n	8003862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003820:	4b34      	ldr	r3, [pc, #208]	@ (80038f4 <HAL_RCC_OscConfig+0x244>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7ff fbb9 	bl	8002f9c <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382e:	f7ff fbb5 	bl	8002f9c <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e1a8      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	4b2b      	ldr	r3, [pc, #172]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4b28      	ldr	r3, [pc, #160]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4925      	ldr	r1, [pc, #148]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 800385c:	4313      	orrs	r3, r2
 800385e:	600b      	str	r3, [r1, #0]
 8003860:	e015      	b.n	800388e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003862:	4b24      	ldr	r3, [pc, #144]	@ (80038f4 <HAL_RCC_OscConfig+0x244>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7ff fb98 	bl	8002f9c <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003870:	f7ff fb94 	bl	8002f9c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e187      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003882:	4b1b      	ldr	r3, [pc, #108]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d036      	beq.n	8003908 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a2:	4b15      	ldr	r3, [pc, #84]	@ (80038f8 <HAL_RCC_OscConfig+0x248>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7ff fb78 	bl	8002f9c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b0:	f7ff fb74 	bl	8002f9c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e167      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c2:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_RCC_OscConfig+0x240>)
 80038c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x200>
 80038ce:	e01b      	b.n	8003908 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d0:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <HAL_RCC_OscConfig+0x248>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d6:	f7ff fb61 	bl	8002f9c <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038dc:	e00e      	b.n	80038fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038de:	f7ff fb5d 	bl	8002f9c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d907      	bls.n	80038fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e150      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
 80038f0:	40023800 	.word	0x40023800
 80038f4:	42470000 	.word	0x42470000
 80038f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fc:	4b88      	ldr	r3, [pc, #544]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 80038fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1ea      	bne.n	80038de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8097 	beq.w	8003a44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003916:	2300      	movs	r3, #0
 8003918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800391a:	4b81      	ldr	r3, [pc, #516]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10f      	bne.n	8003946 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	4b7d      	ldr	r3, [pc, #500]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	4a7c      	ldr	r2, [pc, #496]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003934:	6413      	str	r3, [r2, #64]	@ 0x40
 8003936:	4b7a      	ldr	r3, [pc, #488]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003942:	2301      	movs	r3, #1
 8003944:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003946:	4b77      	ldr	r3, [pc, #476]	@ (8003b24 <HAL_RCC_OscConfig+0x474>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d118      	bne.n	8003984 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003952:	4b74      	ldr	r3, [pc, #464]	@ (8003b24 <HAL_RCC_OscConfig+0x474>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a73      	ldr	r2, [pc, #460]	@ (8003b24 <HAL_RCC_OscConfig+0x474>)
 8003958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800395c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395e:	f7ff fb1d 	bl	8002f9c <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003966:	f7ff fb19 	bl	8002f9c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e10c      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	4b6a      	ldr	r3, [pc, #424]	@ (8003b24 <HAL_RCC_OscConfig+0x474>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d106      	bne.n	800399a <HAL_RCC_OscConfig+0x2ea>
 800398c:	4b64      	ldr	r3, [pc, #400]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003990:	4a63      	ldr	r2, [pc, #396]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6713      	str	r3, [r2, #112]	@ 0x70
 8003998:	e01c      	b.n	80039d4 <HAL_RCC_OscConfig+0x324>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b05      	cmp	r3, #5
 80039a0:	d10c      	bne.n	80039bc <HAL_RCC_OscConfig+0x30c>
 80039a2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039a8:	f043 0304 	orr.w	r3, r3, #4
 80039ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ba:	e00b      	b.n	80039d4 <HAL_RCC_OscConfig+0x324>
 80039bc:	4b58      	ldr	r3, [pc, #352]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c0:	4a57      	ldr	r2, [pc, #348]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c8:	4b55      	ldr	r3, [pc, #340]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039cc:	4a54      	ldr	r2, [pc, #336]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039ce:	f023 0304 	bic.w	r3, r3, #4
 80039d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7ff fade 	bl	8002f9c <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e4:	f7ff fada 	bl	8002f9c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e0cb      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	4b49      	ldr	r3, [pc, #292]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0ee      	beq.n	80039e4 <HAL_RCC_OscConfig+0x334>
 8003a06:	e014      	b.n	8003a32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a08:	f7ff fac8 	bl	8002f9c <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7ff fac4 	bl	8002f9c <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0b5      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a26:	4b3e      	ldr	r3, [pc, #248]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ee      	bne.n	8003a10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a38:	4b39      	ldr	r3, [pc, #228]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	4a38      	ldr	r2, [pc, #224]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003a3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80a1 	beq.w	8003b90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a4e:	4b34      	ldr	r3, [pc, #208]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d05c      	beq.n	8003b14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d141      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a62:	4b31      	ldr	r3, [pc, #196]	@ (8003b28 <HAL_RCC_OscConfig+0x478>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7ff fa98 	bl	8002f9c <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7ff fa94 	bl	8002f9c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e087      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	4b27      	ldr	r3, [pc, #156]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	019b      	lsls	r3, r3, #6
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	061b      	lsls	r3, r3, #24
 8003ab2:	491b      	ldr	r1, [pc, #108]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b28 <HAL_RCC_OscConfig+0x478>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7ff fa6d 	bl	8002f9c <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac6:	f7ff fa69 	bl	8002f9c <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e05c      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad8:	4b11      	ldr	r3, [pc, #68]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x416>
 8003ae4:	e054      	b.n	8003b90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae6:	4b10      	ldr	r3, [pc, #64]	@ (8003b28 <HAL_RCC_OscConfig+0x478>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7ff fa56 	bl	8002f9c <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af4:	f7ff fa52 	bl	8002f9c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e045      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <HAL_RCC_OscConfig+0x470>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x444>
 8003b12:	e03d      	b.n	8003b90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e038      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40007000 	.word	0x40007000
 8003b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b9c <HAL_RCC_OscConfig+0x4ec>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d028      	beq.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d121      	bne.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d11a      	bne.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d111      	bne.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	3b01      	subs	r3, #1
 8003b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d107      	bne.n	8003b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40023800 	.word	0x40023800

08003ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0cc      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb4:	4b68      	ldr	r3, [pc, #416]	@ (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d90c      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc2:	4b65      	ldr	r3, [pc, #404]	@ (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b63      	ldr	r3, [pc, #396]	@ (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0b8      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d020      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf4:	4b59      	ldr	r3, [pc, #356]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a58      	ldr	r2, [pc, #352]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c0c:	4b53      	ldr	r3, [pc, #332]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4a52      	ldr	r2, [pc, #328]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c18:	4b50      	ldr	r3, [pc, #320]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	494d      	ldr	r1, [pc, #308]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d044      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	4b47      	ldr	r3, [pc, #284]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d119      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e07f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d003      	beq.n	8003c5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e06f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e067      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c7e:	4b37      	ldr	r3, [pc, #220]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f023 0203 	bic.w	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4934      	ldr	r1, [pc, #208]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c90:	f7ff f984 	bl	8002f9c <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c98:	f7ff f980 	bl	8002f9c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e04f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	4b2b      	ldr	r3, [pc, #172]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 020c 	and.w	r2, r3, #12
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d1eb      	bne.n	8003c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc0:	4b25      	ldr	r3, [pc, #148]	@ (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d20c      	bcs.n	8003ce8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4b22      	ldr	r3, [pc, #136]	@ (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b20      	ldr	r3, [pc, #128]	@ (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e032      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf4:	4b19      	ldr	r3, [pc, #100]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4916      	ldr	r1, [pc, #88]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d12:	4b12      	ldr	r3, [pc, #72]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	490e      	ldr	r1, [pc, #56]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d26:	f000 f821 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	490a      	ldr	r1, [pc, #40]	@ (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003d38:	5ccb      	ldrb	r3, [r1, r3]
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	4a09      	ldr	r2, [pc, #36]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d42:	4b09      	ldr	r3, [pc, #36]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff f8e4 	bl	8002f14 <HAL_InitTick>

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40023c00 	.word	0x40023c00
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	0800c744 	.word	0x0800c744
 8003d64:	20000030 	.word	0x20000030
 8003d68:	20000034 	.word	0x20000034

08003d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d70:	b094      	sub	sp, #80	@ 0x50
 8003d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d84:	4b79      	ldr	r3, [pc, #484]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d00d      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x40>
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	f200 80e1 	bhi.w	8003f58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0x34>
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d9e:	e0db      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003da0:	4b73      	ldr	r3, [pc, #460]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8003da2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003da4:	e0db      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003da6:	4b73      	ldr	r3, [pc, #460]	@ (8003f74 <HAL_RCC_GetSysClockFreq+0x208>)
 8003da8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003daa:	e0d8      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dac:	4b6f      	ldr	r3, [pc, #444]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003db4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003db6:	4b6d      	ldr	r3, [pc, #436]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d063      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	099b      	lsrs	r3, r3, #6
 8003dc8:	2200      	movs	r2, #0
 8003dca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003dde:	4622      	mov	r2, r4
 8003de0:	462b      	mov	r3, r5
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	0159      	lsls	r1, r3, #5
 8003dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003df0:	0150      	lsls	r0, r2, #5
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4621      	mov	r1, r4
 8003df8:	1a51      	subs	r1, r2, r1
 8003dfa:	6139      	str	r1, [r7, #16]
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e10:	4659      	mov	r1, fp
 8003e12:	018b      	lsls	r3, r1, #6
 8003e14:	4651      	mov	r1, sl
 8003e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e1a:	4651      	mov	r1, sl
 8003e1c:	018a      	lsls	r2, r1, #6
 8003e1e:	4651      	mov	r1, sl
 8003e20:	ebb2 0801 	subs.w	r8, r2, r1
 8003e24:	4659      	mov	r1, fp
 8003e26:	eb63 0901 	sbc.w	r9, r3, r1
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e3e:	4690      	mov	r8, r2
 8003e40:	4699      	mov	r9, r3
 8003e42:	4623      	mov	r3, r4
 8003e44:	eb18 0303 	adds.w	r3, r8, r3
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	462b      	mov	r3, r5
 8003e4c:	eb49 0303 	adc.w	r3, r9, r3
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e5e:	4629      	mov	r1, r5
 8003e60:	024b      	lsls	r3, r1, #9
 8003e62:	4621      	mov	r1, r4
 8003e64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e68:	4621      	mov	r1, r4
 8003e6a:	024a      	lsls	r2, r1, #9
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e72:	2200      	movs	r2, #0
 8003e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e7c:	f7fc ff1c 	bl	8000cb8 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4613      	mov	r3, r2
 8003e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e88:	e058      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8a:	4b38      	ldr	r3, [pc, #224]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	099b      	lsrs	r3, r3, #6
 8003e90:	2200      	movs	r2, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	4611      	mov	r1, r2
 8003e96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e9a:	623b      	str	r3, [r7, #32]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ea0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	f04f 0000 	mov.w	r0, #0
 8003eac:	f04f 0100 	mov.w	r1, #0
 8003eb0:	0159      	lsls	r1, r3, #5
 8003eb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eb6:	0150      	lsls	r0, r2, #5
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ed4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ed8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003edc:	ebb2 040a 	subs.w	r4, r2, sl
 8003ee0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	00eb      	lsls	r3, r5, #3
 8003eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ef2:	00e2      	lsls	r2, r4, #3
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	461d      	mov	r5, r3
 8003ef8:	4643      	mov	r3, r8
 8003efa:	18e3      	adds	r3, r4, r3
 8003efc:	603b      	str	r3, [r7, #0]
 8003efe:	464b      	mov	r3, r9
 8003f00:	eb45 0303 	adc.w	r3, r5, r3
 8003f04:	607b      	str	r3, [r7, #4]
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f12:	4629      	mov	r1, r5
 8003f14:	028b      	lsls	r3, r1, #10
 8003f16:	4621      	mov	r1, r4
 8003f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	028a      	lsls	r2, r1, #10
 8003f20:	4610      	mov	r0, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f26:	2200      	movs	r2, #0
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	61fa      	str	r2, [r7, #28]
 8003f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f30:	f7fc fec2 	bl	8000cb8 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4613      	mov	r3, r2
 8003f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	3301      	adds	r3, #1
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f56:	e002      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f58:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3750      	adds	r7, #80	@ 0x50
 8003f64:	46bd      	mov	sp, r7
 8003f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	00f42400 	.word	0x00f42400
 8003f74:	007a1200 	.word	0x007a1200

08003f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f7c:	4b03      	ldr	r3, [pc, #12]	@ (8003f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20000030 	.word	0x20000030

08003f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f94:	f7ff fff0 	bl	8003f78 <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	0a9b      	lsrs	r3, r3, #10
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4903      	ldr	r1, [pc, #12]	@ (8003fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	0800c754 	.word	0x0800c754

08003fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fbc:	f7ff ffdc 	bl	8003f78 <HAL_RCC_GetHCLKFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	0b5b      	lsrs	r3, r3, #13
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4903      	ldr	r1, [pc, #12]	@ (8003fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	0800c754 	.word	0x0800c754

08003fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e041      	b.n	8004076 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fe fce8 	bl	80029dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3304      	adds	r3, #4
 800401c:	4619      	mov	r1, r3
 800401e:	4610      	mov	r0, r2
 8004020:	f000 fac0 	bl	80045a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e041      	b.n	8004114 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d106      	bne.n	80040aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f839 	bl	800411c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2202      	movs	r2, #2
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	4610      	mov	r0, r2
 80040be:	f000 fa71 	bl	80045a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d109      	bne.n	8004154 <HAL_TIM_PWM_Start+0x24>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b01      	cmp	r3, #1
 800414a:	bf14      	ite	ne
 800414c:	2301      	movne	r3, #1
 800414e:	2300      	moveq	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	e022      	b.n	800419a <HAL_TIM_PWM_Start+0x6a>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b04      	cmp	r3, #4
 8004158:	d109      	bne.n	800416e <HAL_TIM_PWM_Start+0x3e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b01      	cmp	r3, #1
 8004164:	bf14      	ite	ne
 8004166:	2301      	movne	r3, #1
 8004168:	2300      	moveq	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	e015      	b.n	800419a <HAL_TIM_PWM_Start+0x6a>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d109      	bne.n	8004188 <HAL_TIM_PWM_Start+0x58>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	bf14      	ite	ne
 8004180:	2301      	movne	r3, #1
 8004182:	2300      	moveq	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e008      	b.n	800419a <HAL_TIM_PWM_Start+0x6a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	bf14      	ite	ne
 8004194:	2301      	movne	r3, #1
 8004196:	2300      	moveq	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e068      	b.n	8004274 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d104      	bne.n	80041b2 <HAL_TIM_PWM_Start+0x82>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041b0:	e013      	b.n	80041da <HAL_TIM_PWM_Start+0xaa>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d104      	bne.n	80041c2 <HAL_TIM_PWM_Start+0x92>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041c0:	e00b      	b.n	80041da <HAL_TIM_PWM_Start+0xaa>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d104      	bne.n	80041d2 <HAL_TIM_PWM_Start+0xa2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041d0:	e003      	b.n	80041da <HAL_TIM_PWM_Start+0xaa>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2201      	movs	r2, #1
 80041e0:	6839      	ldr	r1, [r7, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fc90 	bl	8004b08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a23      	ldr	r2, [pc, #140]	@ (800427c <HAL_TIM_PWM_Start+0x14c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d107      	bne.n	8004202 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004200:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1d      	ldr	r2, [pc, #116]	@ (800427c <HAL_TIM_PWM_Start+0x14c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d018      	beq.n	800423e <HAL_TIM_PWM_Start+0x10e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004214:	d013      	beq.n	800423e <HAL_TIM_PWM_Start+0x10e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a19      	ldr	r2, [pc, #100]	@ (8004280 <HAL_TIM_PWM_Start+0x150>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00e      	beq.n	800423e <HAL_TIM_PWM_Start+0x10e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a17      	ldr	r2, [pc, #92]	@ (8004284 <HAL_TIM_PWM_Start+0x154>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d009      	beq.n	800423e <HAL_TIM_PWM_Start+0x10e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a16      	ldr	r2, [pc, #88]	@ (8004288 <HAL_TIM_PWM_Start+0x158>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_TIM_PWM_Start+0x10e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a14      	ldr	r2, [pc, #80]	@ (800428c <HAL_TIM_PWM_Start+0x15c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d111      	bne.n	8004262 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b06      	cmp	r3, #6
 800424e:	d010      	beq.n	8004272 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004260:	e007      	b.n	8004272 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40010000 	.word	0x40010000
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40014000 	.word	0x40014000

08004290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e0ae      	b.n	800440c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	f200 809f 	bhi.w	80043fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042be:	a201      	add	r2, pc, #4	@ (adr r2, 80042c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	080042f9 	.word	0x080042f9
 80042c8:	080043fd 	.word	0x080043fd
 80042cc:	080043fd 	.word	0x080043fd
 80042d0:	080043fd 	.word	0x080043fd
 80042d4:	08004339 	.word	0x08004339
 80042d8:	080043fd 	.word	0x080043fd
 80042dc:	080043fd 	.word	0x080043fd
 80042e0:	080043fd 	.word	0x080043fd
 80042e4:	0800437b 	.word	0x0800437b
 80042e8:	080043fd 	.word	0x080043fd
 80042ec:	080043fd 	.word	0x080043fd
 80042f0:	080043fd 	.word	0x080043fd
 80042f4:	080043bb 	.word	0x080043bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f9dc 	bl	80046bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0208 	orr.w	r2, r2, #8
 8004312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0204 	bic.w	r2, r2, #4
 8004322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6999      	ldr	r1, [r3, #24]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	619a      	str	r2, [r3, #24]
      break;
 8004336:	e064      	b.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fa22 	bl	8004788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699a      	ldr	r2, [r3, #24]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6999      	ldr	r1, [r3, #24]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	021a      	lsls	r2, r3, #8
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	619a      	str	r2, [r3, #24]
      break;
 8004378:	e043      	b.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fa6d 	bl	8004860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0208 	orr.w	r2, r2, #8
 8004394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0204 	bic.w	r2, r2, #4
 80043a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69d9      	ldr	r1, [r3, #28]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	61da      	str	r2, [r3, #28]
      break;
 80043b8:	e023      	b.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fab7 	bl	8004934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69da      	ldr	r2, [r3, #28]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69d9      	ldr	r1, [r3, #28]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	021a      	lsls	r2, r3, #8
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	61da      	str	r2, [r3, #28]
      break;
 80043fa:	e002      	b.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800440a:	7dfb      	ldrb	r3, [r7, #23]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_TIM_ConfigClockSource+0x1c>
 800442c:	2302      	movs	r3, #2
 800442e:	e0b4      	b.n	800459a <HAL_TIM_ConfigClockSource+0x186>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800444e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004468:	d03e      	beq.n	80044e8 <HAL_TIM_ConfigClockSource+0xd4>
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800446e:	f200 8087 	bhi.w	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004476:	f000 8086 	beq.w	8004586 <HAL_TIM_ConfigClockSource+0x172>
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800447e:	d87f      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004480:	2b70      	cmp	r3, #112	@ 0x70
 8004482:	d01a      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0xa6>
 8004484:	2b70      	cmp	r3, #112	@ 0x70
 8004486:	d87b      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004488:	2b60      	cmp	r3, #96	@ 0x60
 800448a:	d050      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x11a>
 800448c:	2b60      	cmp	r3, #96	@ 0x60
 800448e:	d877      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004490:	2b50      	cmp	r3, #80	@ 0x50
 8004492:	d03c      	beq.n	800450e <HAL_TIM_ConfigClockSource+0xfa>
 8004494:	2b50      	cmp	r3, #80	@ 0x50
 8004496:	d873      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004498:	2b40      	cmp	r3, #64	@ 0x40
 800449a:	d058      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x13a>
 800449c:	2b40      	cmp	r3, #64	@ 0x40
 800449e:	d86f      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 80044a0:	2b30      	cmp	r3, #48	@ 0x30
 80044a2:	d064      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044a4:	2b30      	cmp	r3, #48	@ 0x30
 80044a6:	d86b      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d060      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d867      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d05c      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d05a      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044b8:	e062      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044ca:	f000 fafd 	bl	8004ac8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	609a      	str	r2, [r3, #8]
      break;
 80044e6:	e04f      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044f8:	f000 fae6 	bl	8004ac8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800450a:	609a      	str	r2, [r3, #8]
      break;
 800450c:	e03c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800451a:	461a      	mov	r2, r3
 800451c:	f000 fa5a 	bl	80049d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2150      	movs	r1, #80	@ 0x50
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fab3 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 800452c:	e02c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800453a:	461a      	mov	r2, r3
 800453c:	f000 fa79 	bl	8004a32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2160      	movs	r1, #96	@ 0x60
 8004546:	4618      	mov	r0, r3
 8004548:	f000 faa3 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 800454c:	e01c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800455a:	461a      	mov	r2, r3
 800455c:	f000 fa3a 	bl	80049d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2140      	movs	r1, #64	@ 0x40
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fa93 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 800456c:	e00c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f000 fa8a 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 800457e:	e003      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
      break;
 8004584:	e000      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3a      	ldr	r2, [pc, #232]	@ (80046a0 <TIM_Base_SetConfig+0xfc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00f      	beq.n	80045dc <TIM_Base_SetConfig+0x38>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c2:	d00b      	beq.n	80045dc <TIM_Base_SetConfig+0x38>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a37      	ldr	r2, [pc, #220]	@ (80046a4 <TIM_Base_SetConfig+0x100>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d007      	beq.n	80045dc <TIM_Base_SetConfig+0x38>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a36      	ldr	r2, [pc, #216]	@ (80046a8 <TIM_Base_SetConfig+0x104>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_Base_SetConfig+0x38>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a35      	ldr	r2, [pc, #212]	@ (80046ac <TIM_Base_SetConfig+0x108>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d108      	bne.n	80045ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2b      	ldr	r2, [pc, #172]	@ (80046a0 <TIM_Base_SetConfig+0xfc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01b      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045fc:	d017      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a28      	ldr	r2, [pc, #160]	@ (80046a4 <TIM_Base_SetConfig+0x100>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d013      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a27      	ldr	r2, [pc, #156]	@ (80046a8 <TIM_Base_SetConfig+0x104>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00f      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a26      	ldr	r2, [pc, #152]	@ (80046ac <TIM_Base_SetConfig+0x108>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00b      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a25      	ldr	r2, [pc, #148]	@ (80046b0 <TIM_Base_SetConfig+0x10c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d007      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a24      	ldr	r2, [pc, #144]	@ (80046b4 <TIM_Base_SetConfig+0x110>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d003      	beq.n	800462e <TIM_Base_SetConfig+0x8a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a23      	ldr	r2, [pc, #140]	@ (80046b8 <TIM_Base_SetConfig+0x114>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d108      	bne.n	8004640 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a0e      	ldr	r2, [pc, #56]	@ (80046a0 <TIM_Base_SetConfig+0xfc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d103      	bne.n	8004674 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b01      	cmp	r3, #1
 8004684:	d105      	bne.n	8004692 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	611a      	str	r2, [r3, #16]
  }
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40010000 	.word	0x40010000
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40000800 	.word	0x40000800
 80046ac:	40000c00 	.word	0x40000c00
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40014400 	.word	0x40014400
 80046b8:	40014800 	.word	0x40014800

080046bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f023 0201 	bic.w	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0303 	bic.w	r3, r3, #3
 80046f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f023 0302 	bic.w	r3, r3, #2
 8004704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a1c      	ldr	r2, [pc, #112]	@ (8004784 <TIM_OC1_SetConfig+0xc8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d10c      	bne.n	8004732 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f023 0308 	bic.w	r3, r3, #8
 800471e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f023 0304 	bic.w	r3, r3, #4
 8004730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a13      	ldr	r2, [pc, #76]	@ (8004784 <TIM_OC1_SetConfig+0xc8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d111      	bne.n	800475e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	621a      	str	r2, [r3, #32]
}
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	40010000 	.word	0x40010000

08004788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f023 0210 	bic.w	r2, r3, #16
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f023 0320 	bic.w	r3, r3, #32
 80047d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a1e      	ldr	r2, [pc, #120]	@ (800485c <TIM_OC2_SetConfig+0xd4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d10d      	bne.n	8004804 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004802:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a15      	ldr	r2, [pc, #84]	@ (800485c <TIM_OC2_SetConfig+0xd4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d113      	bne.n	8004834 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800481a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40010000 	.word	0x40010000

08004860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800488e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0303 	bic.w	r3, r3, #3
 8004896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004930 <TIM_OC3_SetConfig+0xd0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d10d      	bne.n	80048da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a14      	ldr	r2, [pc, #80]	@ (8004930 <TIM_OC3_SetConfig+0xd0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d113      	bne.n	800490a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	621a      	str	r2, [r3, #32]
}
 8004924:	bf00      	nop
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	40010000 	.word	0x40010000

08004934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800496a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800497e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	031b      	lsls	r3, r3, #12
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a10      	ldr	r2, [pc, #64]	@ (80049d0 <TIM_OC4_SetConfig+0x9c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d109      	bne.n	80049a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800499a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	019b      	lsls	r3, r3, #6
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40010000 	.word	0x40010000

080049d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f023 0201 	bic.w	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f023 030a 	bic.w	r3, r3, #10
 8004a10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	621a      	str	r2, [r3, #32]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b087      	sub	sp, #28
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	f023 0210 	bic.w	r2, r3, #16
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	031b      	lsls	r3, r3, #12
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f043 0307 	orr.w	r3, r3, #7
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	609a      	str	r2, [r3, #8]
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	021a      	lsls	r2, r3, #8
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	609a      	str	r2, [r3, #8]
}
 8004afc:	bf00      	nop
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a1a      	ldr	r2, [r3, #32]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	401a      	ands	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a1a      	ldr	r2, [r3, #32]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b40:	431a      	orrs	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e050      	b.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1c      	ldr	r2, [pc, #112]	@ (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d018      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb8:	d013      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a18      	ldr	r2, [pc, #96]	@ (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00e      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a16      	ldr	r2, [pc, #88]	@ (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a15      	ldr	r2, [pc, #84]	@ (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a13      	ldr	r2, [pc, #76]	@ (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10c      	bne.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40010000 	.word	0x40010000
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40000800 	.word	0x40000800
 8004c28:	40000c00 	.word	0x40000c00
 8004c2c:	40014000 	.word	0x40014000

08004c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e042      	b.n	8004cc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fd ff78 	bl	8002b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2224      	movs	r2, #36	@ 0x24
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fdbd 	bl	80057f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	@ 0x28
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d175      	bne.n	8004ddc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_UART_Transmit+0x2c>
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e06e      	b.n	8004dde <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2221      	movs	r2, #33	@ 0x21
 8004d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d0e:	f7fe f945 	bl	8002f9c <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	88fa      	ldrh	r2, [r7, #6]
 8004d1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d28:	d108      	bne.n	8004d3c <HAL_UART_Transmit+0x6c>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	e003      	b.n	8004d44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d44:	e02e      	b.n	8004da4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2180      	movs	r1, #128	@ 0x80
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fb1f 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e03a      	b.n	8004dde <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	3302      	adds	r3, #2
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	e007      	b.n	8004d96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	781a      	ldrb	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1cb      	bne.n	8004d46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2140      	movs	r1, #64	@ 0x40
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 faeb 	bl	8005394 <UART_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e006      	b.n	8004dde <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e000      	b.n	8004dde <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ddc:	2302      	movs	r3, #2
  }
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	4613      	mov	r3, r2
 8004df2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d112      	bne.n	8004e26 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_UART_Receive_IT+0x26>
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e00b      	b.n	8004e28 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 fb12 	bl	8005446 <UART_Start_Receive_IT>
 8004e22:	4603      	mov	r3, r0
 8004e24:	e000      	b.n	8004e28 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004e26:	2302      	movs	r3, #2
  }
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b0ba      	sub	sp, #232	@ 0xe8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10f      	bne.n	8004e96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_UART_IRQHandler+0x66>
 8004e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fbf2 	bl	8005678 <UART_Receive_IT>
      return;
 8004e94:	e25b      	b.n	800534e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 80de 	beq.w	800505c <HAL_UART_IRQHandler+0x22c>
 8004ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80d1 	beq.w	800505c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <HAL_UART_IRQHandler+0xae>
 8004ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed6:	f043 0201 	orr.w	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <HAL_UART_IRQHandler+0xd2>
 8004eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efa:	f043 0202 	orr.w	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_UART_IRQHandler+0xf6>
 8004f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1e:	f043 0204 	orr.w	r2, r3, #4
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d011      	beq.n	8004f56 <HAL_UART_IRQHandler+0x126>
 8004f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d105      	bne.n	8004f4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4e:	f043 0208 	orr.w	r2, r3, #8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 81f2 	beq.w	8005344 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_UART_IRQHandler+0x14e>
 8004f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fb7d 	bl	8005678 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f88:	2b40      	cmp	r3, #64	@ 0x40
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d103      	bne.n	8004faa <HAL_UART_IRQHandler+0x17a>
 8004fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d04f      	beq.n	800504a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa85 	bl	80054ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fba:	2b40      	cmp	r3, #64	@ 0x40
 8004fbc:	d141      	bne.n	8005042 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3314      	adds	r3, #20
 8004fc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3314      	adds	r3, #20
 8004fe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ff6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1d9      	bne.n	8004fbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d013      	beq.n	800503a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005016:	4a7e      	ldr	r2, [pc, #504]	@ (8005210 <HAL_UART_IRQHandler+0x3e0>)
 8005018:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe f96d 	bl	80032fe <HAL_DMA_Abort_IT>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d016      	beq.n	8005058 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005034:	4610      	mov	r0, r2
 8005036:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005038:	e00e      	b.n	8005058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f994 	bl	8005368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005040:	e00a      	b.n	8005058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f990 	bl	8005368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005048:	e006      	b.n	8005058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f98c 	bl	8005368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005056:	e175      	b.n	8005344 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	bf00      	nop
    return;
 800505a:	e173      	b.n	8005344 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005060:	2b01      	cmp	r3, #1
 8005062:	f040 814f 	bne.w	8005304 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8148 	beq.w	8005304 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8141 	beq.w	8005304 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005082:	2300      	movs	r3, #0
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a2:	2b40      	cmp	r3, #64	@ 0x40
 80050a4:	f040 80b6 	bne.w	8005214 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8145 	beq.w	8005348 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050c6:	429a      	cmp	r2, r3
 80050c8:	f080 813e 	bcs.w	8005348 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050de:	f000 8088 	beq.w	80051f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	330c      	adds	r3, #12
 80050e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005100:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800510e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005112:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800511a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1d9      	bne.n	80050e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3314      	adds	r3, #20
 8005134:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800513e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005152:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005156:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800515a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e1      	bne.n	800512e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3314      	adds	r3, #20
 8005170:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800517a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800517c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005180:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3314      	adds	r3, #20
 800518a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800518e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005190:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005194:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800519c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e3      	bne.n	800516a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051c2:	f023 0310 	bic.w	r3, r3, #16
 80051c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80051d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e3      	bne.n	80051b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fe f816 	bl	800321e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005200:	b29b      	uxth	r3, r3
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	b29b      	uxth	r3, r3
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f8b7 	bl	800537c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800520e:	e09b      	b.n	8005348 <HAL_UART_IRQHandler+0x518>
 8005210:	08005581 	.word	0x08005581
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800521c:	b29b      	uxth	r3, r3
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 808e 	beq.w	800534c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005230:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8089 	beq.w	800534c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	330c      	adds	r3, #12
 8005240:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800524a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005250:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	330c      	adds	r3, #12
 800525a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800525e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005260:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005264:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800526c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e3      	bne.n	800523a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3314      	adds	r3, #20
 8005278:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	623b      	str	r3, [r7, #32]
   return(result);
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3314      	adds	r3, #20
 8005292:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005296:	633a      	str	r2, [r7, #48]	@ 0x30
 8005298:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800529c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e3      	bne.n	8005272 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0310 	bic.w	r3, r3, #16
 80052ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80052dc:	61fa      	str	r2, [r7, #28]
 80052de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	69b9      	ldr	r1, [r7, #24]
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	617b      	str	r3, [r7, #20]
   return(result);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e3      	bne.n	80052b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052fa:	4619      	mov	r1, r3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f83d 	bl	800537c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005302:	e023      	b.n	800534c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <HAL_UART_IRQHandler+0x4f4>
 8005310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f943 	bl	80055a8 <UART_Transmit_IT>
    return;
 8005322:	e014      	b.n	800534e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00e      	beq.n	800534e <HAL_UART_IRQHandler+0x51e>
 8005330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f983 	bl	8005648 <UART_EndTransmit_IT>
    return;
 8005342:	e004      	b.n	800534e <HAL_UART_IRQHandler+0x51e>
    return;
 8005344:	bf00      	nop
 8005346:	e002      	b.n	800534e <HAL_UART_IRQHandler+0x51e>
      return;
 8005348:	bf00      	nop
 800534a:	e000      	b.n	800534e <HAL_UART_IRQHandler+0x51e>
      return;
 800534c:	bf00      	nop
  }
}
 800534e:	37e8      	adds	r7, #232	@ 0xe8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a4:	e03b      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d037      	beq.n	800541e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fd fdf5 	bl	8002f9c <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	6a3a      	ldr	r2, [r7, #32]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d302      	bcc.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e03a      	b.n	800543e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d023      	beq.n	800541e <UART_WaitOnFlagUntilTimeout+0x8a>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b80      	cmp	r3, #128	@ 0x80
 80053da:	d020      	beq.n	800541e <UART_WaitOnFlagUntilTimeout+0x8a>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b40      	cmp	r3, #64	@ 0x40
 80053e0:	d01d      	beq.n	800541e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d116      	bne.n	800541e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f857 	bl	80054ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2208      	movs	r2, #8
 8005410:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e00f      	b.n	800543e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4013      	ands	r3, r2
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	429a      	cmp	r2, r3
 800542c:	bf0c      	ite	eq
 800542e:	2301      	moveq	r3, #1
 8005430:	2300      	movne	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	429a      	cmp	r2, r3
 800543a:	d0b4      	beq.n	80053a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	4613      	mov	r3, r2
 8005452:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	88fa      	ldrh	r2, [r7, #6]
 800545e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2222      	movs	r2, #34	@ 0x22
 8005470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d007      	beq.n	800548c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800548a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0220 	orr.w	r2, r2, #32
 80054aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b095      	sub	sp, #84	@ 0x54
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	330c      	adds	r3, #12
 80054c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	330c      	adds	r3, #12
 80054e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80054e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e5      	bne.n	80054c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3314      	adds	r3, #20
 80054fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	61fb      	str	r3, [r7, #28]
   return(result);
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	f023 0301 	bic.w	r3, r3, #1
 800550c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3314      	adds	r3, #20
 8005514:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005516:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005518:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800551c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e5      	bne.n	80054f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552e:	2b01      	cmp	r3, #1
 8005530:	d119      	bne.n	8005566 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	330c      	adds	r3, #12
 8005538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	60bb      	str	r3, [r7, #8]
   return(result);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f023 0310 	bic.w	r3, r3, #16
 8005548:	647b      	str	r3, [r7, #68]	@ 0x44
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330c      	adds	r3, #12
 8005550:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005552:	61ba      	str	r2, [r7, #24]
 8005554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6979      	ldr	r1, [r7, #20]
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	613b      	str	r3, [r7, #16]
   return(result);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e5      	bne.n	8005532 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005574:	bf00      	nop
 8005576:	3754      	adds	r7, #84	@ 0x54
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f7ff fee4 	bl	8005368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055a0:	bf00      	nop
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b21      	cmp	r3, #33	@ 0x21
 80055ba:	d13e      	bne.n	800563a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055c4:	d114      	bne.n	80055f0 <UART_Transmit_IT+0x48>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d110      	bne.n	80055f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	1c9a      	adds	r2, r3, #2
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	621a      	str	r2, [r3, #32]
 80055ee:	e008      	b.n	8005602 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	1c59      	adds	r1, r3, #1
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6211      	str	r1, [r2, #32]
 80055fa:	781a      	ldrb	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b29b      	uxth	r3, r3
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	4619      	mov	r1, r3
 8005610:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10f      	bne.n	8005636 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005624:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005634:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	e000      	b.n	800563c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800563a:	2302      	movs	r3, #2
  }
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800565e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff fe73 	bl	8005354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08c      	sub	sp, #48	@ 0x30
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b22      	cmp	r3, #34	@ 0x22
 800568a:	f040 80ae 	bne.w	80057ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005696:	d117      	bne.n	80056c8 <UART_Receive_IT+0x50>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d113      	bne.n	80056c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c0:	1c9a      	adds	r2, r3, #2
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80056c6:	e026      	b.n	8005716 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056da:	d007      	beq.n	80056ec <UART_Receive_IT+0x74>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <UART_Receive_IT+0x82>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d106      	bne.n	80056fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	e008      	b.n	800570c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005706:	b2da      	uxtb	r2, r3
 8005708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29b      	uxth	r3, r3
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	4619      	mov	r1, r3
 8005724:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005726:	2b00      	cmp	r3, #0
 8005728:	d15d      	bne.n	80057e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0220 	bic.w	r2, r2, #32
 8005738:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005748:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0201 	bic.w	r2, r2, #1
 8005758:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576c:	2b01      	cmp	r3, #1
 800576e:	d135      	bne.n	80057dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	613b      	str	r3, [r7, #16]
   return(result);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f023 0310 	bic.w	r3, r3, #16
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005796:	623a      	str	r2, [r7, #32]
 8005798:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	69f9      	ldr	r1, [r7, #28]
 800579c:	6a3a      	ldr	r2, [r7, #32]
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e5      	bne.n	8005776 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d10a      	bne.n	80057ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff fdd1 	bl	800537c <HAL_UARTEx_RxEventCallback>
 80057da:	e002      	b.n	80057e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7fb fe29 	bl	8001434 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	e002      	b.n	80057ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e000      	b.n	80057ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80057ea:	2302      	movs	r3, #2
  }
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3730      	adds	r7, #48	@ 0x30
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057f8:	b0c0      	sub	sp, #256	@ 0x100
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005810:	68d9      	ldr	r1, [r3, #12]
 8005812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	ea40 0301 	orr.w	r3, r0, r1
 800581c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800581e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	431a      	orrs	r2, r3
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	431a      	orrs	r2, r3
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800584c:	f021 010c 	bic.w	r1, r1, #12
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800585a:	430b      	orrs	r3, r1
 800585c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800585e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800586a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586e:	6999      	ldr	r1, [r3, #24]
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	ea40 0301 	orr.w	r3, r0, r1
 800587a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b8f      	ldr	r3, [pc, #572]	@ (8005ac0 <UART_SetConfig+0x2cc>)
 8005884:	429a      	cmp	r2, r3
 8005886:	d005      	beq.n	8005894 <UART_SetConfig+0xa0>
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b8d      	ldr	r3, [pc, #564]	@ (8005ac4 <UART_SetConfig+0x2d0>)
 8005890:	429a      	cmp	r2, r3
 8005892:	d104      	bne.n	800589e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005894:	f7fe fb90 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8005898:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800589c:	e003      	b.n	80058a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800589e:	f7fe fb77 	bl	8003f90 <HAL_RCC_GetPCLK1Freq>
 80058a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058b0:	f040 810c 	bne.w	8005acc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058c6:	4622      	mov	r2, r4
 80058c8:	462b      	mov	r3, r5
 80058ca:	1891      	adds	r1, r2, r2
 80058cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80058ce:	415b      	adcs	r3, r3
 80058d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058d6:	4621      	mov	r1, r4
 80058d8:	eb12 0801 	adds.w	r8, r2, r1
 80058dc:	4629      	mov	r1, r5
 80058de:	eb43 0901 	adc.w	r9, r3, r1
 80058e2:	f04f 0200 	mov.w	r2, #0
 80058e6:	f04f 0300 	mov.w	r3, #0
 80058ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058f6:	4690      	mov	r8, r2
 80058f8:	4699      	mov	r9, r3
 80058fa:	4623      	mov	r3, r4
 80058fc:	eb18 0303 	adds.w	r3, r8, r3
 8005900:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005904:	462b      	mov	r3, r5
 8005906:	eb49 0303 	adc.w	r3, r9, r3
 800590a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800591a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800591e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005922:	460b      	mov	r3, r1
 8005924:	18db      	adds	r3, r3, r3
 8005926:	653b      	str	r3, [r7, #80]	@ 0x50
 8005928:	4613      	mov	r3, r2
 800592a:	eb42 0303 	adc.w	r3, r2, r3
 800592e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005930:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005934:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005938:	f7fb f9be 	bl	8000cb8 <__aeabi_uldivmod>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4b61      	ldr	r3, [pc, #388]	@ (8005ac8 <UART_SetConfig+0x2d4>)
 8005942:	fba3 2302 	umull	r2, r3, r3, r2
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	011c      	lsls	r4, r3, #4
 800594a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594e:	2200      	movs	r2, #0
 8005950:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005954:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005958:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800595c:	4642      	mov	r2, r8
 800595e:	464b      	mov	r3, r9
 8005960:	1891      	adds	r1, r2, r2
 8005962:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005964:	415b      	adcs	r3, r3
 8005966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005968:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800596c:	4641      	mov	r1, r8
 800596e:	eb12 0a01 	adds.w	sl, r2, r1
 8005972:	4649      	mov	r1, r9
 8005974:	eb43 0b01 	adc.w	fp, r3, r1
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005984:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800598c:	4692      	mov	sl, r2
 800598e:	469b      	mov	fp, r3
 8005990:	4643      	mov	r3, r8
 8005992:	eb1a 0303 	adds.w	r3, sl, r3
 8005996:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800599a:	464b      	mov	r3, r9
 800599c:	eb4b 0303 	adc.w	r3, fp, r3
 80059a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059b8:	460b      	mov	r3, r1
 80059ba:	18db      	adds	r3, r3, r3
 80059bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80059be:	4613      	mov	r3, r2
 80059c0:	eb42 0303 	adc.w	r3, r2, r3
 80059c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80059ce:	f7fb f973 	bl	8000cb8 <__aeabi_uldivmod>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4611      	mov	r1, r2
 80059d8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac8 <UART_SetConfig+0x2d4>)
 80059da:	fba3 2301 	umull	r2, r3, r3, r1
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	2264      	movs	r2, #100	@ 0x64
 80059e2:	fb02 f303 	mul.w	r3, r2, r3
 80059e6:	1acb      	subs	r3, r1, r3
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80059ee:	4b36      	ldr	r3, [pc, #216]	@ (8005ac8 <UART_SetConfig+0x2d4>)
 80059f0:	fba3 2302 	umull	r2, r3, r3, r2
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80059fc:	441c      	add	r4, r3
 80059fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a10:	4642      	mov	r2, r8
 8005a12:	464b      	mov	r3, r9
 8005a14:	1891      	adds	r1, r2, r2
 8005a16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a18:	415b      	adcs	r3, r3
 8005a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a20:	4641      	mov	r1, r8
 8005a22:	1851      	adds	r1, r2, r1
 8005a24:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a26:	4649      	mov	r1, r9
 8005a28:	414b      	adcs	r3, r1
 8005a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a38:	4659      	mov	r1, fp
 8005a3a:	00cb      	lsls	r3, r1, #3
 8005a3c:	4651      	mov	r1, sl
 8005a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a42:	4651      	mov	r1, sl
 8005a44:	00ca      	lsls	r2, r1, #3
 8005a46:	4610      	mov	r0, r2
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	189b      	adds	r3, r3, r2
 8005a50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a54:	464b      	mov	r3, r9
 8005a56:	460a      	mov	r2, r1
 8005a58:	eb42 0303 	adc.w	r3, r2, r3
 8005a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a74:	460b      	mov	r3, r1
 8005a76:	18db      	adds	r3, r3, r3
 8005a78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	eb42 0303 	adc.w	r3, r2, r3
 8005a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a8a:	f7fb f915 	bl	8000cb8 <__aeabi_uldivmod>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <UART_SetConfig+0x2d4>)
 8005a94:	fba3 1302 	umull	r1, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	2164      	movs	r1, #100	@ 0x64
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	3332      	adds	r3, #50	@ 0x32
 8005aa6:	4a08      	ldr	r2, [pc, #32]	@ (8005ac8 <UART_SetConfig+0x2d4>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	f003 0207 	and.w	r2, r3, #7
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4422      	add	r2, r4
 8005aba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005abc:	e106      	b.n	8005ccc <UART_SetConfig+0x4d8>
 8005abe:	bf00      	nop
 8005ac0:	40011000 	.word	0x40011000
 8005ac4:	40011400 	.word	0x40011400
 8005ac8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ad6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005ada:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ade:	4642      	mov	r2, r8
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	1891      	adds	r1, r2, r2
 8005ae4:	6239      	str	r1, [r7, #32]
 8005ae6:	415b      	adcs	r3, r3
 8005ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005aee:	4641      	mov	r1, r8
 8005af0:	1854      	adds	r4, r2, r1
 8005af2:	4649      	mov	r1, r9
 8005af4:	eb43 0501 	adc.w	r5, r3, r1
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	00eb      	lsls	r3, r5, #3
 8005b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b06:	00e2      	lsls	r2, r4, #3
 8005b08:	4614      	mov	r4, r2
 8005b0a:	461d      	mov	r5, r3
 8005b0c:	4643      	mov	r3, r8
 8005b0e:	18e3      	adds	r3, r4, r3
 8005b10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b14:	464b      	mov	r3, r9
 8005b16:	eb45 0303 	adc.w	r3, r5, r3
 8005b1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	008b      	lsls	r3, r1, #2
 8005b3e:	4621      	mov	r1, r4
 8005b40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b44:	4621      	mov	r1, r4
 8005b46:	008a      	lsls	r2, r1, #2
 8005b48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b4c:	f7fb f8b4 	bl	8000cb8 <__aeabi_uldivmod>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4b60      	ldr	r3, [pc, #384]	@ (8005cd8 <UART_SetConfig+0x4e4>)
 8005b56:	fba3 2302 	umull	r2, r3, r3, r2
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	011c      	lsls	r4, r3, #4
 8005b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	1891      	adds	r1, r2, r2
 8005b76:	61b9      	str	r1, [r7, #24]
 8005b78:	415b      	adcs	r3, r3
 8005b7a:	61fb      	str	r3, [r7, #28]
 8005b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b80:	4641      	mov	r1, r8
 8005b82:	1851      	adds	r1, r2, r1
 8005b84:	6139      	str	r1, [r7, #16]
 8005b86:	4649      	mov	r1, r9
 8005b88:	414b      	adcs	r3, r1
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b98:	4659      	mov	r1, fp
 8005b9a:	00cb      	lsls	r3, r1, #3
 8005b9c:	4651      	mov	r1, sl
 8005b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ba2:	4651      	mov	r1, sl
 8005ba4:	00ca      	lsls	r2, r1, #3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	4642      	mov	r2, r8
 8005bae:	189b      	adds	r3, r3, r2
 8005bb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bb4:	464b      	mov	r3, r9
 8005bb6:	460a      	mov	r2, r1
 8005bb8:	eb42 0303 	adc.w	r3, r2, r3
 8005bbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005bd8:	4649      	mov	r1, r9
 8005bda:	008b      	lsls	r3, r1, #2
 8005bdc:	4641      	mov	r1, r8
 8005bde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005be2:	4641      	mov	r1, r8
 8005be4:	008a      	lsls	r2, r1, #2
 8005be6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005bea:	f7fb f865 	bl	8000cb8 <__aeabi_uldivmod>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	4b38      	ldr	r3, [pc, #224]	@ (8005cd8 <UART_SetConfig+0x4e4>)
 8005bf6:	fba3 2301 	umull	r2, r3, r3, r1
 8005bfa:	095b      	lsrs	r3, r3, #5
 8005bfc:	2264      	movs	r2, #100	@ 0x64
 8005bfe:	fb02 f303 	mul.w	r3, r2, r3
 8005c02:	1acb      	subs	r3, r1, r3
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	3332      	adds	r3, #50	@ 0x32
 8005c08:	4a33      	ldr	r2, [pc, #204]	@ (8005cd8 <UART_SetConfig+0x4e4>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c14:	441c      	add	r4, r3
 8005c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	1891      	adds	r1, r2, r2
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	415b      	adcs	r3, r3
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c34:	4641      	mov	r1, r8
 8005c36:	1851      	adds	r1, r2, r1
 8005c38:	6039      	str	r1, [r7, #0]
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	414b      	adcs	r3, r1
 8005c3e:	607b      	str	r3, [r7, #4]
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c4c:	4659      	mov	r1, fp
 8005c4e:	00cb      	lsls	r3, r1, #3
 8005c50:	4651      	mov	r1, sl
 8005c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c56:	4651      	mov	r1, sl
 8005c58:	00ca      	lsls	r2, r1, #3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4642      	mov	r2, r8
 8005c62:	189b      	adds	r3, r3, r2
 8005c64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c66:	464b      	mov	r3, r9
 8005c68:	460a      	mov	r2, r1
 8005c6a:	eb42 0303 	adc.w	r3, r2, r3
 8005c6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c88:	4649      	mov	r1, r9
 8005c8a:	008b      	lsls	r3, r1, #2
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c92:	4641      	mov	r1, r8
 8005c94:	008a      	lsls	r2, r1, #2
 8005c96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c9a:	f7fb f80d 	bl	8000cb8 <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd8 <UART_SetConfig+0x4e4>)
 8005ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	2164      	movs	r1, #100	@ 0x64
 8005cac:	fb01 f303 	mul.w	r3, r1, r3
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	3332      	adds	r3, #50	@ 0x32
 8005cb6:	4a08      	ldr	r2, [pc, #32]	@ (8005cd8 <UART_SetConfig+0x4e4>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	f003 020f 	and.w	r2, r3, #15
 8005cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4422      	add	r2, r4
 8005cca:	609a      	str	r2, [r3, #8]
}
 8005ccc:	bf00      	nop
 8005cce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cd8:	51eb851f 	.word	0x51eb851f

08005cdc <__cvt>:
 8005cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce0:	ec57 6b10 	vmov	r6, r7, d0
 8005ce4:	2f00      	cmp	r7, #0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	4619      	mov	r1, r3
 8005cea:	463b      	mov	r3, r7
 8005cec:	bfbb      	ittet	lt
 8005cee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005cf2:	461f      	movlt	r7, r3
 8005cf4:	2300      	movge	r3, #0
 8005cf6:	232d      	movlt	r3, #45	@ 0x2d
 8005cf8:	700b      	strb	r3, [r1, #0]
 8005cfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cfc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005d00:	4691      	mov	r9, r2
 8005d02:	f023 0820 	bic.w	r8, r3, #32
 8005d06:	bfbc      	itt	lt
 8005d08:	4632      	movlt	r2, r6
 8005d0a:	4616      	movlt	r6, r2
 8005d0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d10:	d005      	beq.n	8005d1e <__cvt+0x42>
 8005d12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d16:	d100      	bne.n	8005d1a <__cvt+0x3e>
 8005d18:	3401      	adds	r4, #1
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	e000      	b.n	8005d20 <__cvt+0x44>
 8005d1e:	2103      	movs	r1, #3
 8005d20:	ab03      	add	r3, sp, #12
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	ab02      	add	r3, sp, #8
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	ec47 6b10 	vmov	d0, r6, r7
 8005d2c:	4653      	mov	r3, sl
 8005d2e:	4622      	mov	r2, r4
 8005d30:	f001 fafa 	bl	8007328 <_dtoa_r>
 8005d34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d38:	4605      	mov	r5, r0
 8005d3a:	d119      	bne.n	8005d70 <__cvt+0x94>
 8005d3c:	f019 0f01 	tst.w	r9, #1
 8005d40:	d00e      	beq.n	8005d60 <__cvt+0x84>
 8005d42:	eb00 0904 	add.w	r9, r0, r4
 8005d46:	2200      	movs	r2, #0
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	4639      	mov	r1, r7
 8005d4e:	f7fa fed3 	bl	8000af8 <__aeabi_dcmpeq>
 8005d52:	b108      	cbz	r0, 8005d58 <__cvt+0x7c>
 8005d54:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d58:	2230      	movs	r2, #48	@ 0x30
 8005d5a:	9b03      	ldr	r3, [sp, #12]
 8005d5c:	454b      	cmp	r3, r9
 8005d5e:	d31e      	bcc.n	8005d9e <__cvt+0xc2>
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d64:	1b5b      	subs	r3, r3, r5
 8005d66:	4628      	mov	r0, r5
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	b004      	add	sp, #16
 8005d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d74:	eb00 0904 	add.w	r9, r0, r4
 8005d78:	d1e5      	bne.n	8005d46 <__cvt+0x6a>
 8005d7a:	7803      	ldrb	r3, [r0, #0]
 8005d7c:	2b30      	cmp	r3, #48	@ 0x30
 8005d7e:	d10a      	bne.n	8005d96 <__cvt+0xba>
 8005d80:	2200      	movs	r2, #0
 8005d82:	2300      	movs	r3, #0
 8005d84:	4630      	mov	r0, r6
 8005d86:	4639      	mov	r1, r7
 8005d88:	f7fa feb6 	bl	8000af8 <__aeabi_dcmpeq>
 8005d8c:	b918      	cbnz	r0, 8005d96 <__cvt+0xba>
 8005d8e:	f1c4 0401 	rsb	r4, r4, #1
 8005d92:	f8ca 4000 	str.w	r4, [sl]
 8005d96:	f8da 3000 	ldr.w	r3, [sl]
 8005d9a:	4499      	add	r9, r3
 8005d9c:	e7d3      	b.n	8005d46 <__cvt+0x6a>
 8005d9e:	1c59      	adds	r1, r3, #1
 8005da0:	9103      	str	r1, [sp, #12]
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	e7d9      	b.n	8005d5a <__cvt+0x7e>

08005da6 <__exponent>:
 8005da6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005da8:	2900      	cmp	r1, #0
 8005daa:	bfba      	itte	lt
 8005dac:	4249      	neglt	r1, r1
 8005dae:	232d      	movlt	r3, #45	@ 0x2d
 8005db0:	232b      	movge	r3, #43	@ 0x2b
 8005db2:	2909      	cmp	r1, #9
 8005db4:	7002      	strb	r2, [r0, #0]
 8005db6:	7043      	strb	r3, [r0, #1]
 8005db8:	dd29      	ble.n	8005e0e <__exponent+0x68>
 8005dba:	f10d 0307 	add.w	r3, sp, #7
 8005dbe:	461d      	mov	r5, r3
 8005dc0:	270a      	movs	r7, #10
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	fbb1 f6f7 	udiv	r6, r1, r7
 8005dc8:	fb07 1416 	mls	r4, r7, r6, r1
 8005dcc:	3430      	adds	r4, #48	@ 0x30
 8005dce:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	2c63      	cmp	r4, #99	@ 0x63
 8005dd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005dda:	4631      	mov	r1, r6
 8005ddc:	dcf1      	bgt.n	8005dc2 <__exponent+0x1c>
 8005dde:	3130      	adds	r1, #48	@ 0x30
 8005de0:	1e94      	subs	r4, r2, #2
 8005de2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005de6:	1c41      	adds	r1, r0, #1
 8005de8:	4623      	mov	r3, r4
 8005dea:	42ab      	cmp	r3, r5
 8005dec:	d30a      	bcc.n	8005e04 <__exponent+0x5e>
 8005dee:	f10d 0309 	add.w	r3, sp, #9
 8005df2:	1a9b      	subs	r3, r3, r2
 8005df4:	42ac      	cmp	r4, r5
 8005df6:	bf88      	it	hi
 8005df8:	2300      	movhi	r3, #0
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	4403      	add	r3, r0
 8005dfe:	1a18      	subs	r0, r3, r0
 8005e00:	b003      	add	sp, #12
 8005e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e04:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e08:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e0c:	e7ed      	b.n	8005dea <__exponent+0x44>
 8005e0e:	2330      	movs	r3, #48	@ 0x30
 8005e10:	3130      	adds	r1, #48	@ 0x30
 8005e12:	7083      	strb	r3, [r0, #2]
 8005e14:	70c1      	strb	r1, [r0, #3]
 8005e16:	1d03      	adds	r3, r0, #4
 8005e18:	e7f1      	b.n	8005dfe <__exponent+0x58>
	...

08005e1c <_printf_float>:
 8005e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e20:	b08d      	sub	sp, #52	@ 0x34
 8005e22:	460c      	mov	r4, r1
 8005e24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005e28:	4616      	mov	r6, r2
 8005e2a:	461f      	mov	r7, r3
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	f001 f941 	bl	80070b4 <_localeconv_r>
 8005e32:	6803      	ldr	r3, [r0, #0]
 8005e34:	9304      	str	r3, [sp, #16]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fa fa32 	bl	80002a0 <strlen>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e40:	f8d8 3000 	ldr.w	r3, [r8]
 8005e44:	9005      	str	r0, [sp, #20]
 8005e46:	3307      	adds	r3, #7
 8005e48:	f023 0307 	bic.w	r3, r3, #7
 8005e4c:	f103 0208 	add.w	r2, r3, #8
 8005e50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005e54:	f8d4 b000 	ldr.w	fp, [r4]
 8005e58:	f8c8 2000 	str.w	r2, [r8]
 8005e5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e64:	9307      	str	r3, [sp, #28]
 8005e66:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005e6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e72:	4b9c      	ldr	r3, [pc, #624]	@ (80060e4 <_printf_float+0x2c8>)
 8005e74:	f04f 32ff 	mov.w	r2, #4294967295
 8005e78:	f7fa fe70 	bl	8000b5c <__aeabi_dcmpun>
 8005e7c:	bb70      	cbnz	r0, 8005edc <_printf_float+0xc0>
 8005e7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e82:	4b98      	ldr	r3, [pc, #608]	@ (80060e4 <_printf_float+0x2c8>)
 8005e84:	f04f 32ff 	mov.w	r2, #4294967295
 8005e88:	f7fa fe4a 	bl	8000b20 <__aeabi_dcmple>
 8005e8c:	bb30      	cbnz	r0, 8005edc <_printf_float+0xc0>
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2300      	movs	r3, #0
 8005e92:	4640      	mov	r0, r8
 8005e94:	4649      	mov	r1, r9
 8005e96:	f7fa fe39 	bl	8000b0c <__aeabi_dcmplt>
 8005e9a:	b110      	cbz	r0, 8005ea2 <_printf_float+0x86>
 8005e9c:	232d      	movs	r3, #45	@ 0x2d
 8005e9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ea2:	4a91      	ldr	r2, [pc, #580]	@ (80060e8 <_printf_float+0x2cc>)
 8005ea4:	4b91      	ldr	r3, [pc, #580]	@ (80060ec <_printf_float+0x2d0>)
 8005ea6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005eaa:	bf94      	ite	ls
 8005eac:	4690      	movls	r8, r2
 8005eae:	4698      	movhi	r8, r3
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	6123      	str	r3, [r4, #16]
 8005eb4:	f02b 0304 	bic.w	r3, fp, #4
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	f04f 0900 	mov.w	r9, #0
 8005ebe:	9700      	str	r7, [sp, #0]
 8005ec0:	4633      	mov	r3, r6
 8005ec2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 f9d2 	bl	8006270 <_printf_common>
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f040 808d 	bne.w	8005fec <_printf_float+0x1d0>
 8005ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed6:	b00d      	add	sp, #52	@ 0x34
 8005ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005edc:	4642      	mov	r2, r8
 8005ede:	464b      	mov	r3, r9
 8005ee0:	4640      	mov	r0, r8
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	f7fa fe3a 	bl	8000b5c <__aeabi_dcmpun>
 8005ee8:	b140      	cbz	r0, 8005efc <_printf_float+0xe0>
 8005eea:	464b      	mov	r3, r9
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bfbc      	itt	lt
 8005ef0:	232d      	movlt	r3, #45	@ 0x2d
 8005ef2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80060f0 <_printf_float+0x2d4>)
 8005ef8:	4b7e      	ldr	r3, [pc, #504]	@ (80060f4 <_printf_float+0x2d8>)
 8005efa:	e7d4      	b.n	8005ea6 <_printf_float+0x8a>
 8005efc:	6863      	ldr	r3, [r4, #4]
 8005efe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005f02:	9206      	str	r2, [sp, #24]
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	d13b      	bne.n	8005f80 <_printf_float+0x164>
 8005f08:	2306      	movs	r3, #6
 8005f0a:	6063      	str	r3, [r4, #4]
 8005f0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f10:	2300      	movs	r3, #0
 8005f12:	6022      	str	r2, [r4, #0]
 8005f14:	9303      	str	r3, [sp, #12]
 8005f16:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f18:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005f1c:	ab09      	add	r3, sp, #36	@ 0x24
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	6861      	ldr	r1, [r4, #4]
 8005f22:	ec49 8b10 	vmov	d0, r8, r9
 8005f26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f7ff fed6 	bl	8005cdc <__cvt>
 8005f30:	9b06      	ldr	r3, [sp, #24]
 8005f32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f34:	2b47      	cmp	r3, #71	@ 0x47
 8005f36:	4680      	mov	r8, r0
 8005f38:	d129      	bne.n	8005f8e <_printf_float+0x172>
 8005f3a:	1cc8      	adds	r0, r1, #3
 8005f3c:	db02      	blt.n	8005f44 <_printf_float+0x128>
 8005f3e:	6863      	ldr	r3, [r4, #4]
 8005f40:	4299      	cmp	r1, r3
 8005f42:	dd41      	ble.n	8005fc8 <_printf_float+0x1ac>
 8005f44:	f1aa 0a02 	sub.w	sl, sl, #2
 8005f48:	fa5f fa8a 	uxtb.w	sl, sl
 8005f4c:	3901      	subs	r1, #1
 8005f4e:	4652      	mov	r2, sl
 8005f50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005f54:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f56:	f7ff ff26 	bl	8005da6 <__exponent>
 8005f5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f5c:	1813      	adds	r3, r2, r0
 8005f5e:	2a01      	cmp	r2, #1
 8005f60:	4681      	mov	r9, r0
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	dc02      	bgt.n	8005f6c <_printf_float+0x150>
 8005f66:	6822      	ldr	r2, [r4, #0]
 8005f68:	07d2      	lsls	r2, r2, #31
 8005f6a:	d501      	bpl.n	8005f70 <_printf_float+0x154>
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	6123      	str	r3, [r4, #16]
 8005f70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0a2      	beq.n	8005ebe <_printf_float+0xa2>
 8005f78:	232d      	movs	r3, #45	@ 0x2d
 8005f7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f7e:	e79e      	b.n	8005ebe <_printf_float+0xa2>
 8005f80:	9a06      	ldr	r2, [sp, #24]
 8005f82:	2a47      	cmp	r2, #71	@ 0x47
 8005f84:	d1c2      	bne.n	8005f0c <_printf_float+0xf0>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1c0      	bne.n	8005f0c <_printf_float+0xf0>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e7bd      	b.n	8005f0a <_printf_float+0xee>
 8005f8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f92:	d9db      	bls.n	8005f4c <_printf_float+0x130>
 8005f94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005f98:	d118      	bne.n	8005fcc <_printf_float+0x1b0>
 8005f9a:	2900      	cmp	r1, #0
 8005f9c:	6863      	ldr	r3, [r4, #4]
 8005f9e:	dd0b      	ble.n	8005fb8 <_printf_float+0x19c>
 8005fa0:	6121      	str	r1, [r4, #16]
 8005fa2:	b913      	cbnz	r3, 8005faa <_printf_float+0x18e>
 8005fa4:	6822      	ldr	r2, [r4, #0]
 8005fa6:	07d0      	lsls	r0, r2, #31
 8005fa8:	d502      	bpl.n	8005fb0 <_printf_float+0x194>
 8005faa:	3301      	adds	r3, #1
 8005fac:	440b      	add	r3, r1
 8005fae:	6123      	str	r3, [r4, #16]
 8005fb0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005fb2:	f04f 0900 	mov.w	r9, #0
 8005fb6:	e7db      	b.n	8005f70 <_printf_float+0x154>
 8005fb8:	b913      	cbnz	r3, 8005fc0 <_printf_float+0x1a4>
 8005fba:	6822      	ldr	r2, [r4, #0]
 8005fbc:	07d2      	lsls	r2, r2, #31
 8005fbe:	d501      	bpl.n	8005fc4 <_printf_float+0x1a8>
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	e7f4      	b.n	8005fae <_printf_float+0x192>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e7f2      	b.n	8005fae <_printf_float+0x192>
 8005fc8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	db05      	blt.n	8005fde <_printf_float+0x1c2>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	6121      	str	r1, [r4, #16]
 8005fd6:	07d8      	lsls	r0, r3, #31
 8005fd8:	d5ea      	bpl.n	8005fb0 <_printf_float+0x194>
 8005fda:	1c4b      	adds	r3, r1, #1
 8005fdc:	e7e7      	b.n	8005fae <_printf_float+0x192>
 8005fde:	2900      	cmp	r1, #0
 8005fe0:	bfd4      	ite	le
 8005fe2:	f1c1 0202 	rsble	r2, r1, #2
 8005fe6:	2201      	movgt	r2, #1
 8005fe8:	4413      	add	r3, r2
 8005fea:	e7e0      	b.n	8005fae <_printf_float+0x192>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	055a      	lsls	r2, r3, #21
 8005ff0:	d407      	bmi.n	8006002 <_printf_float+0x1e6>
 8005ff2:	6923      	ldr	r3, [r4, #16]
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d12b      	bne.n	8006058 <_printf_float+0x23c>
 8006000:	e767      	b.n	8005ed2 <_printf_float+0xb6>
 8006002:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006006:	f240 80dd 	bls.w	80061c4 <_printf_float+0x3a8>
 800600a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800600e:	2200      	movs	r2, #0
 8006010:	2300      	movs	r3, #0
 8006012:	f7fa fd71 	bl	8000af8 <__aeabi_dcmpeq>
 8006016:	2800      	cmp	r0, #0
 8006018:	d033      	beq.n	8006082 <_printf_float+0x266>
 800601a:	4a37      	ldr	r2, [pc, #220]	@ (80060f8 <_printf_float+0x2dc>)
 800601c:	2301      	movs	r3, #1
 800601e:	4631      	mov	r1, r6
 8006020:	4628      	mov	r0, r5
 8006022:	47b8      	blx	r7
 8006024:	3001      	adds	r0, #1
 8006026:	f43f af54 	beq.w	8005ed2 <_printf_float+0xb6>
 800602a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800602e:	4543      	cmp	r3, r8
 8006030:	db02      	blt.n	8006038 <_printf_float+0x21c>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	07d8      	lsls	r0, r3, #31
 8006036:	d50f      	bpl.n	8006058 <_printf_float+0x23c>
 8006038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800603c:	4631      	mov	r1, r6
 800603e:	4628      	mov	r0, r5
 8006040:	47b8      	blx	r7
 8006042:	3001      	adds	r0, #1
 8006044:	f43f af45 	beq.w	8005ed2 <_printf_float+0xb6>
 8006048:	f04f 0900 	mov.w	r9, #0
 800604c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006050:	f104 0a1a 	add.w	sl, r4, #26
 8006054:	45c8      	cmp	r8, r9
 8006056:	dc09      	bgt.n	800606c <_printf_float+0x250>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	079b      	lsls	r3, r3, #30
 800605c:	f100 8103 	bmi.w	8006266 <_printf_float+0x44a>
 8006060:	68e0      	ldr	r0, [r4, #12]
 8006062:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006064:	4298      	cmp	r0, r3
 8006066:	bfb8      	it	lt
 8006068:	4618      	movlt	r0, r3
 800606a:	e734      	b.n	8005ed6 <_printf_float+0xba>
 800606c:	2301      	movs	r3, #1
 800606e:	4652      	mov	r2, sl
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	f43f af2b 	beq.w	8005ed2 <_printf_float+0xb6>
 800607c:	f109 0901 	add.w	r9, r9, #1
 8006080:	e7e8      	b.n	8006054 <_printf_float+0x238>
 8006082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006084:	2b00      	cmp	r3, #0
 8006086:	dc39      	bgt.n	80060fc <_printf_float+0x2e0>
 8006088:	4a1b      	ldr	r2, [pc, #108]	@ (80060f8 <_printf_float+0x2dc>)
 800608a:	2301      	movs	r3, #1
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	f43f af1d 	beq.w	8005ed2 <_printf_float+0xb6>
 8006098:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800609c:	ea59 0303 	orrs.w	r3, r9, r3
 80060a0:	d102      	bne.n	80060a8 <_printf_float+0x28c>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	07d9      	lsls	r1, r3, #31
 80060a6:	d5d7      	bpl.n	8006058 <_printf_float+0x23c>
 80060a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b8      	blx	r7
 80060b2:	3001      	adds	r0, #1
 80060b4:	f43f af0d 	beq.w	8005ed2 <_printf_float+0xb6>
 80060b8:	f04f 0a00 	mov.w	sl, #0
 80060bc:	f104 0b1a 	add.w	fp, r4, #26
 80060c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060c2:	425b      	negs	r3, r3
 80060c4:	4553      	cmp	r3, sl
 80060c6:	dc01      	bgt.n	80060cc <_printf_float+0x2b0>
 80060c8:	464b      	mov	r3, r9
 80060ca:	e793      	b.n	8005ff4 <_printf_float+0x1d8>
 80060cc:	2301      	movs	r3, #1
 80060ce:	465a      	mov	r2, fp
 80060d0:	4631      	mov	r1, r6
 80060d2:	4628      	mov	r0, r5
 80060d4:	47b8      	blx	r7
 80060d6:	3001      	adds	r0, #1
 80060d8:	f43f aefb 	beq.w	8005ed2 <_printf_float+0xb6>
 80060dc:	f10a 0a01 	add.w	sl, sl, #1
 80060e0:	e7ee      	b.n	80060c0 <_printf_float+0x2a4>
 80060e2:	bf00      	nop
 80060e4:	7fefffff 	.word	0x7fefffff
 80060e8:	0800c75c 	.word	0x0800c75c
 80060ec:	0800c760 	.word	0x0800c760
 80060f0:	0800c764 	.word	0x0800c764
 80060f4:	0800c768 	.word	0x0800c768
 80060f8:	0800c76c 	.word	0x0800c76c
 80060fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006102:	4553      	cmp	r3, sl
 8006104:	bfa8      	it	ge
 8006106:	4653      	movge	r3, sl
 8006108:	2b00      	cmp	r3, #0
 800610a:	4699      	mov	r9, r3
 800610c:	dc36      	bgt.n	800617c <_printf_float+0x360>
 800610e:	f04f 0b00 	mov.w	fp, #0
 8006112:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006116:	f104 021a 	add.w	r2, r4, #26
 800611a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800611c:	9306      	str	r3, [sp, #24]
 800611e:	eba3 0309 	sub.w	r3, r3, r9
 8006122:	455b      	cmp	r3, fp
 8006124:	dc31      	bgt.n	800618a <_printf_float+0x36e>
 8006126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006128:	459a      	cmp	sl, r3
 800612a:	dc3a      	bgt.n	80061a2 <_printf_float+0x386>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	07da      	lsls	r2, r3, #31
 8006130:	d437      	bmi.n	80061a2 <_printf_float+0x386>
 8006132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006134:	ebaa 0903 	sub.w	r9, sl, r3
 8006138:	9b06      	ldr	r3, [sp, #24]
 800613a:	ebaa 0303 	sub.w	r3, sl, r3
 800613e:	4599      	cmp	r9, r3
 8006140:	bfa8      	it	ge
 8006142:	4699      	movge	r9, r3
 8006144:	f1b9 0f00 	cmp.w	r9, #0
 8006148:	dc33      	bgt.n	80061b2 <_printf_float+0x396>
 800614a:	f04f 0800 	mov.w	r8, #0
 800614e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006152:	f104 0b1a 	add.w	fp, r4, #26
 8006156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006158:	ebaa 0303 	sub.w	r3, sl, r3
 800615c:	eba3 0309 	sub.w	r3, r3, r9
 8006160:	4543      	cmp	r3, r8
 8006162:	f77f af79 	ble.w	8006058 <_printf_float+0x23c>
 8006166:	2301      	movs	r3, #1
 8006168:	465a      	mov	r2, fp
 800616a:	4631      	mov	r1, r6
 800616c:	4628      	mov	r0, r5
 800616e:	47b8      	blx	r7
 8006170:	3001      	adds	r0, #1
 8006172:	f43f aeae 	beq.w	8005ed2 <_printf_float+0xb6>
 8006176:	f108 0801 	add.w	r8, r8, #1
 800617a:	e7ec      	b.n	8006156 <_printf_float+0x33a>
 800617c:	4642      	mov	r2, r8
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	d1c2      	bne.n	800610e <_printf_float+0x2f2>
 8006188:	e6a3      	b.n	8005ed2 <_printf_float+0xb6>
 800618a:	2301      	movs	r3, #1
 800618c:	4631      	mov	r1, r6
 800618e:	4628      	mov	r0, r5
 8006190:	9206      	str	r2, [sp, #24]
 8006192:	47b8      	blx	r7
 8006194:	3001      	adds	r0, #1
 8006196:	f43f ae9c 	beq.w	8005ed2 <_printf_float+0xb6>
 800619a:	9a06      	ldr	r2, [sp, #24]
 800619c:	f10b 0b01 	add.w	fp, fp, #1
 80061a0:	e7bb      	b.n	800611a <_printf_float+0x2fe>
 80061a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061a6:	4631      	mov	r1, r6
 80061a8:	4628      	mov	r0, r5
 80061aa:	47b8      	blx	r7
 80061ac:	3001      	adds	r0, #1
 80061ae:	d1c0      	bne.n	8006132 <_printf_float+0x316>
 80061b0:	e68f      	b.n	8005ed2 <_printf_float+0xb6>
 80061b2:	9a06      	ldr	r2, [sp, #24]
 80061b4:	464b      	mov	r3, r9
 80061b6:	4442      	add	r2, r8
 80061b8:	4631      	mov	r1, r6
 80061ba:	4628      	mov	r0, r5
 80061bc:	47b8      	blx	r7
 80061be:	3001      	adds	r0, #1
 80061c0:	d1c3      	bne.n	800614a <_printf_float+0x32e>
 80061c2:	e686      	b.n	8005ed2 <_printf_float+0xb6>
 80061c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80061c8:	f1ba 0f01 	cmp.w	sl, #1
 80061cc:	dc01      	bgt.n	80061d2 <_printf_float+0x3b6>
 80061ce:	07db      	lsls	r3, r3, #31
 80061d0:	d536      	bpl.n	8006240 <_printf_float+0x424>
 80061d2:	2301      	movs	r3, #1
 80061d4:	4642      	mov	r2, r8
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	47b8      	blx	r7
 80061dc:	3001      	adds	r0, #1
 80061de:	f43f ae78 	beq.w	8005ed2 <_printf_float+0xb6>
 80061e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061e6:	4631      	mov	r1, r6
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b8      	blx	r7
 80061ec:	3001      	adds	r0, #1
 80061ee:	f43f ae70 	beq.w	8005ed2 <_printf_float+0xb6>
 80061f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80061f6:	2200      	movs	r2, #0
 80061f8:	2300      	movs	r3, #0
 80061fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061fe:	f7fa fc7b 	bl	8000af8 <__aeabi_dcmpeq>
 8006202:	b9c0      	cbnz	r0, 8006236 <_printf_float+0x41a>
 8006204:	4653      	mov	r3, sl
 8006206:	f108 0201 	add.w	r2, r8, #1
 800620a:	4631      	mov	r1, r6
 800620c:	4628      	mov	r0, r5
 800620e:	47b8      	blx	r7
 8006210:	3001      	adds	r0, #1
 8006212:	d10c      	bne.n	800622e <_printf_float+0x412>
 8006214:	e65d      	b.n	8005ed2 <_printf_float+0xb6>
 8006216:	2301      	movs	r3, #1
 8006218:	465a      	mov	r2, fp
 800621a:	4631      	mov	r1, r6
 800621c:	4628      	mov	r0, r5
 800621e:	47b8      	blx	r7
 8006220:	3001      	adds	r0, #1
 8006222:	f43f ae56 	beq.w	8005ed2 <_printf_float+0xb6>
 8006226:	f108 0801 	add.w	r8, r8, #1
 800622a:	45d0      	cmp	r8, sl
 800622c:	dbf3      	blt.n	8006216 <_printf_float+0x3fa>
 800622e:	464b      	mov	r3, r9
 8006230:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006234:	e6df      	b.n	8005ff6 <_printf_float+0x1da>
 8006236:	f04f 0800 	mov.w	r8, #0
 800623a:	f104 0b1a 	add.w	fp, r4, #26
 800623e:	e7f4      	b.n	800622a <_printf_float+0x40e>
 8006240:	2301      	movs	r3, #1
 8006242:	4642      	mov	r2, r8
 8006244:	e7e1      	b.n	800620a <_printf_float+0x3ee>
 8006246:	2301      	movs	r3, #1
 8006248:	464a      	mov	r2, r9
 800624a:	4631      	mov	r1, r6
 800624c:	4628      	mov	r0, r5
 800624e:	47b8      	blx	r7
 8006250:	3001      	adds	r0, #1
 8006252:	f43f ae3e 	beq.w	8005ed2 <_printf_float+0xb6>
 8006256:	f108 0801 	add.w	r8, r8, #1
 800625a:	68e3      	ldr	r3, [r4, #12]
 800625c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800625e:	1a5b      	subs	r3, r3, r1
 8006260:	4543      	cmp	r3, r8
 8006262:	dcf0      	bgt.n	8006246 <_printf_float+0x42a>
 8006264:	e6fc      	b.n	8006060 <_printf_float+0x244>
 8006266:	f04f 0800 	mov.w	r8, #0
 800626a:	f104 0919 	add.w	r9, r4, #25
 800626e:	e7f4      	b.n	800625a <_printf_float+0x43e>

08006270 <_printf_common>:
 8006270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006274:	4616      	mov	r6, r2
 8006276:	4698      	mov	r8, r3
 8006278:	688a      	ldr	r2, [r1, #8]
 800627a:	690b      	ldr	r3, [r1, #16]
 800627c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006280:	4293      	cmp	r3, r2
 8006282:	bfb8      	it	lt
 8006284:	4613      	movlt	r3, r2
 8006286:	6033      	str	r3, [r6, #0]
 8006288:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800628c:	4607      	mov	r7, r0
 800628e:	460c      	mov	r4, r1
 8006290:	b10a      	cbz	r2, 8006296 <_printf_common+0x26>
 8006292:	3301      	adds	r3, #1
 8006294:	6033      	str	r3, [r6, #0]
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	0699      	lsls	r1, r3, #26
 800629a:	bf42      	ittt	mi
 800629c:	6833      	ldrmi	r3, [r6, #0]
 800629e:	3302      	addmi	r3, #2
 80062a0:	6033      	strmi	r3, [r6, #0]
 80062a2:	6825      	ldr	r5, [r4, #0]
 80062a4:	f015 0506 	ands.w	r5, r5, #6
 80062a8:	d106      	bne.n	80062b8 <_printf_common+0x48>
 80062aa:	f104 0a19 	add.w	sl, r4, #25
 80062ae:	68e3      	ldr	r3, [r4, #12]
 80062b0:	6832      	ldr	r2, [r6, #0]
 80062b2:	1a9b      	subs	r3, r3, r2
 80062b4:	42ab      	cmp	r3, r5
 80062b6:	dc26      	bgt.n	8006306 <_printf_common+0x96>
 80062b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	3b00      	subs	r3, #0
 80062c0:	bf18      	it	ne
 80062c2:	2301      	movne	r3, #1
 80062c4:	0692      	lsls	r2, r2, #26
 80062c6:	d42b      	bmi.n	8006320 <_printf_common+0xb0>
 80062c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062cc:	4641      	mov	r1, r8
 80062ce:	4638      	mov	r0, r7
 80062d0:	47c8      	blx	r9
 80062d2:	3001      	adds	r0, #1
 80062d4:	d01e      	beq.n	8006314 <_printf_common+0xa4>
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	6922      	ldr	r2, [r4, #16]
 80062da:	f003 0306 	and.w	r3, r3, #6
 80062de:	2b04      	cmp	r3, #4
 80062e0:	bf02      	ittt	eq
 80062e2:	68e5      	ldreq	r5, [r4, #12]
 80062e4:	6833      	ldreq	r3, [r6, #0]
 80062e6:	1aed      	subeq	r5, r5, r3
 80062e8:	68a3      	ldr	r3, [r4, #8]
 80062ea:	bf0c      	ite	eq
 80062ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062f0:	2500      	movne	r5, #0
 80062f2:	4293      	cmp	r3, r2
 80062f4:	bfc4      	itt	gt
 80062f6:	1a9b      	subgt	r3, r3, r2
 80062f8:	18ed      	addgt	r5, r5, r3
 80062fa:	2600      	movs	r6, #0
 80062fc:	341a      	adds	r4, #26
 80062fe:	42b5      	cmp	r5, r6
 8006300:	d11a      	bne.n	8006338 <_printf_common+0xc8>
 8006302:	2000      	movs	r0, #0
 8006304:	e008      	b.n	8006318 <_printf_common+0xa8>
 8006306:	2301      	movs	r3, #1
 8006308:	4652      	mov	r2, sl
 800630a:	4641      	mov	r1, r8
 800630c:	4638      	mov	r0, r7
 800630e:	47c8      	blx	r9
 8006310:	3001      	adds	r0, #1
 8006312:	d103      	bne.n	800631c <_printf_common+0xac>
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631c:	3501      	adds	r5, #1
 800631e:	e7c6      	b.n	80062ae <_printf_common+0x3e>
 8006320:	18e1      	adds	r1, r4, r3
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	2030      	movs	r0, #48	@ 0x30
 8006326:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800632a:	4422      	add	r2, r4
 800632c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006330:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006334:	3302      	adds	r3, #2
 8006336:	e7c7      	b.n	80062c8 <_printf_common+0x58>
 8006338:	2301      	movs	r3, #1
 800633a:	4622      	mov	r2, r4
 800633c:	4641      	mov	r1, r8
 800633e:	4638      	mov	r0, r7
 8006340:	47c8      	blx	r9
 8006342:	3001      	adds	r0, #1
 8006344:	d0e6      	beq.n	8006314 <_printf_common+0xa4>
 8006346:	3601      	adds	r6, #1
 8006348:	e7d9      	b.n	80062fe <_printf_common+0x8e>
	...

0800634c <_printf_i>:
 800634c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006350:	7e0f      	ldrb	r7, [r1, #24]
 8006352:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006354:	2f78      	cmp	r7, #120	@ 0x78
 8006356:	4691      	mov	r9, r2
 8006358:	4680      	mov	r8, r0
 800635a:	460c      	mov	r4, r1
 800635c:	469a      	mov	sl, r3
 800635e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006362:	d807      	bhi.n	8006374 <_printf_i+0x28>
 8006364:	2f62      	cmp	r7, #98	@ 0x62
 8006366:	d80a      	bhi.n	800637e <_printf_i+0x32>
 8006368:	2f00      	cmp	r7, #0
 800636a:	f000 80d2 	beq.w	8006512 <_printf_i+0x1c6>
 800636e:	2f58      	cmp	r7, #88	@ 0x58
 8006370:	f000 80b9 	beq.w	80064e6 <_printf_i+0x19a>
 8006374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006378:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800637c:	e03a      	b.n	80063f4 <_printf_i+0xa8>
 800637e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006382:	2b15      	cmp	r3, #21
 8006384:	d8f6      	bhi.n	8006374 <_printf_i+0x28>
 8006386:	a101      	add	r1, pc, #4	@ (adr r1, 800638c <_printf_i+0x40>)
 8006388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800638c:	080063e5 	.word	0x080063e5
 8006390:	080063f9 	.word	0x080063f9
 8006394:	08006375 	.word	0x08006375
 8006398:	08006375 	.word	0x08006375
 800639c:	08006375 	.word	0x08006375
 80063a0:	08006375 	.word	0x08006375
 80063a4:	080063f9 	.word	0x080063f9
 80063a8:	08006375 	.word	0x08006375
 80063ac:	08006375 	.word	0x08006375
 80063b0:	08006375 	.word	0x08006375
 80063b4:	08006375 	.word	0x08006375
 80063b8:	080064f9 	.word	0x080064f9
 80063bc:	08006423 	.word	0x08006423
 80063c0:	080064b3 	.word	0x080064b3
 80063c4:	08006375 	.word	0x08006375
 80063c8:	08006375 	.word	0x08006375
 80063cc:	0800651b 	.word	0x0800651b
 80063d0:	08006375 	.word	0x08006375
 80063d4:	08006423 	.word	0x08006423
 80063d8:	08006375 	.word	0x08006375
 80063dc:	08006375 	.word	0x08006375
 80063e0:	080064bb 	.word	0x080064bb
 80063e4:	6833      	ldr	r3, [r6, #0]
 80063e6:	1d1a      	adds	r2, r3, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6032      	str	r2, [r6, #0]
 80063ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063f4:	2301      	movs	r3, #1
 80063f6:	e09d      	b.n	8006534 <_printf_i+0x1e8>
 80063f8:	6833      	ldr	r3, [r6, #0]
 80063fa:	6820      	ldr	r0, [r4, #0]
 80063fc:	1d19      	adds	r1, r3, #4
 80063fe:	6031      	str	r1, [r6, #0]
 8006400:	0606      	lsls	r6, r0, #24
 8006402:	d501      	bpl.n	8006408 <_printf_i+0xbc>
 8006404:	681d      	ldr	r5, [r3, #0]
 8006406:	e003      	b.n	8006410 <_printf_i+0xc4>
 8006408:	0645      	lsls	r5, r0, #25
 800640a:	d5fb      	bpl.n	8006404 <_printf_i+0xb8>
 800640c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006410:	2d00      	cmp	r5, #0
 8006412:	da03      	bge.n	800641c <_printf_i+0xd0>
 8006414:	232d      	movs	r3, #45	@ 0x2d
 8006416:	426d      	negs	r5, r5
 8006418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800641c:	4859      	ldr	r0, [pc, #356]	@ (8006584 <_printf_i+0x238>)
 800641e:	230a      	movs	r3, #10
 8006420:	e011      	b.n	8006446 <_printf_i+0xfa>
 8006422:	6821      	ldr	r1, [r4, #0]
 8006424:	6833      	ldr	r3, [r6, #0]
 8006426:	0608      	lsls	r0, r1, #24
 8006428:	f853 5b04 	ldr.w	r5, [r3], #4
 800642c:	d402      	bmi.n	8006434 <_printf_i+0xe8>
 800642e:	0649      	lsls	r1, r1, #25
 8006430:	bf48      	it	mi
 8006432:	b2ad      	uxthmi	r5, r5
 8006434:	2f6f      	cmp	r7, #111	@ 0x6f
 8006436:	4853      	ldr	r0, [pc, #332]	@ (8006584 <_printf_i+0x238>)
 8006438:	6033      	str	r3, [r6, #0]
 800643a:	bf14      	ite	ne
 800643c:	230a      	movne	r3, #10
 800643e:	2308      	moveq	r3, #8
 8006440:	2100      	movs	r1, #0
 8006442:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006446:	6866      	ldr	r6, [r4, #4]
 8006448:	60a6      	str	r6, [r4, #8]
 800644a:	2e00      	cmp	r6, #0
 800644c:	bfa2      	ittt	ge
 800644e:	6821      	ldrge	r1, [r4, #0]
 8006450:	f021 0104 	bicge.w	r1, r1, #4
 8006454:	6021      	strge	r1, [r4, #0]
 8006456:	b90d      	cbnz	r5, 800645c <_printf_i+0x110>
 8006458:	2e00      	cmp	r6, #0
 800645a:	d04b      	beq.n	80064f4 <_printf_i+0x1a8>
 800645c:	4616      	mov	r6, r2
 800645e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006462:	fb03 5711 	mls	r7, r3, r1, r5
 8006466:	5dc7      	ldrb	r7, [r0, r7]
 8006468:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800646c:	462f      	mov	r7, r5
 800646e:	42bb      	cmp	r3, r7
 8006470:	460d      	mov	r5, r1
 8006472:	d9f4      	bls.n	800645e <_printf_i+0x112>
 8006474:	2b08      	cmp	r3, #8
 8006476:	d10b      	bne.n	8006490 <_printf_i+0x144>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	07df      	lsls	r7, r3, #31
 800647c:	d508      	bpl.n	8006490 <_printf_i+0x144>
 800647e:	6923      	ldr	r3, [r4, #16]
 8006480:	6861      	ldr	r1, [r4, #4]
 8006482:	4299      	cmp	r1, r3
 8006484:	bfde      	ittt	le
 8006486:	2330      	movle	r3, #48	@ 0x30
 8006488:	f806 3c01 	strble.w	r3, [r6, #-1]
 800648c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006490:	1b92      	subs	r2, r2, r6
 8006492:	6122      	str	r2, [r4, #16]
 8006494:	f8cd a000 	str.w	sl, [sp]
 8006498:	464b      	mov	r3, r9
 800649a:	aa03      	add	r2, sp, #12
 800649c:	4621      	mov	r1, r4
 800649e:	4640      	mov	r0, r8
 80064a0:	f7ff fee6 	bl	8006270 <_printf_common>
 80064a4:	3001      	adds	r0, #1
 80064a6:	d14a      	bne.n	800653e <_printf_i+0x1f2>
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	b004      	add	sp, #16
 80064ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	f043 0320 	orr.w	r3, r3, #32
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	4833      	ldr	r0, [pc, #204]	@ (8006588 <_printf_i+0x23c>)
 80064bc:	2778      	movs	r7, #120	@ 0x78
 80064be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	6831      	ldr	r1, [r6, #0]
 80064c6:	061f      	lsls	r7, r3, #24
 80064c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80064cc:	d402      	bmi.n	80064d4 <_printf_i+0x188>
 80064ce:	065f      	lsls	r7, r3, #25
 80064d0:	bf48      	it	mi
 80064d2:	b2ad      	uxthmi	r5, r5
 80064d4:	6031      	str	r1, [r6, #0]
 80064d6:	07d9      	lsls	r1, r3, #31
 80064d8:	bf44      	itt	mi
 80064da:	f043 0320 	orrmi.w	r3, r3, #32
 80064de:	6023      	strmi	r3, [r4, #0]
 80064e0:	b11d      	cbz	r5, 80064ea <_printf_i+0x19e>
 80064e2:	2310      	movs	r3, #16
 80064e4:	e7ac      	b.n	8006440 <_printf_i+0xf4>
 80064e6:	4827      	ldr	r0, [pc, #156]	@ (8006584 <_printf_i+0x238>)
 80064e8:	e7e9      	b.n	80064be <_printf_i+0x172>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	f023 0320 	bic.w	r3, r3, #32
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	e7f6      	b.n	80064e2 <_printf_i+0x196>
 80064f4:	4616      	mov	r6, r2
 80064f6:	e7bd      	b.n	8006474 <_printf_i+0x128>
 80064f8:	6833      	ldr	r3, [r6, #0]
 80064fa:	6825      	ldr	r5, [r4, #0]
 80064fc:	6961      	ldr	r1, [r4, #20]
 80064fe:	1d18      	adds	r0, r3, #4
 8006500:	6030      	str	r0, [r6, #0]
 8006502:	062e      	lsls	r6, r5, #24
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	d501      	bpl.n	800650c <_printf_i+0x1c0>
 8006508:	6019      	str	r1, [r3, #0]
 800650a:	e002      	b.n	8006512 <_printf_i+0x1c6>
 800650c:	0668      	lsls	r0, r5, #25
 800650e:	d5fb      	bpl.n	8006508 <_printf_i+0x1bc>
 8006510:	8019      	strh	r1, [r3, #0]
 8006512:	2300      	movs	r3, #0
 8006514:	6123      	str	r3, [r4, #16]
 8006516:	4616      	mov	r6, r2
 8006518:	e7bc      	b.n	8006494 <_printf_i+0x148>
 800651a:	6833      	ldr	r3, [r6, #0]
 800651c:	1d1a      	adds	r2, r3, #4
 800651e:	6032      	str	r2, [r6, #0]
 8006520:	681e      	ldr	r6, [r3, #0]
 8006522:	6862      	ldr	r2, [r4, #4]
 8006524:	2100      	movs	r1, #0
 8006526:	4630      	mov	r0, r6
 8006528:	f7f9 fe6a 	bl	8000200 <memchr>
 800652c:	b108      	cbz	r0, 8006532 <_printf_i+0x1e6>
 800652e:	1b80      	subs	r0, r0, r6
 8006530:	6060      	str	r0, [r4, #4]
 8006532:	6863      	ldr	r3, [r4, #4]
 8006534:	6123      	str	r3, [r4, #16]
 8006536:	2300      	movs	r3, #0
 8006538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800653c:	e7aa      	b.n	8006494 <_printf_i+0x148>
 800653e:	6923      	ldr	r3, [r4, #16]
 8006540:	4632      	mov	r2, r6
 8006542:	4649      	mov	r1, r9
 8006544:	4640      	mov	r0, r8
 8006546:	47d0      	blx	sl
 8006548:	3001      	adds	r0, #1
 800654a:	d0ad      	beq.n	80064a8 <_printf_i+0x15c>
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	079b      	lsls	r3, r3, #30
 8006550:	d413      	bmi.n	800657a <_printf_i+0x22e>
 8006552:	68e0      	ldr	r0, [r4, #12]
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	4298      	cmp	r0, r3
 8006558:	bfb8      	it	lt
 800655a:	4618      	movlt	r0, r3
 800655c:	e7a6      	b.n	80064ac <_printf_i+0x160>
 800655e:	2301      	movs	r3, #1
 8006560:	4632      	mov	r2, r6
 8006562:	4649      	mov	r1, r9
 8006564:	4640      	mov	r0, r8
 8006566:	47d0      	blx	sl
 8006568:	3001      	adds	r0, #1
 800656a:	d09d      	beq.n	80064a8 <_printf_i+0x15c>
 800656c:	3501      	adds	r5, #1
 800656e:	68e3      	ldr	r3, [r4, #12]
 8006570:	9903      	ldr	r1, [sp, #12]
 8006572:	1a5b      	subs	r3, r3, r1
 8006574:	42ab      	cmp	r3, r5
 8006576:	dcf2      	bgt.n	800655e <_printf_i+0x212>
 8006578:	e7eb      	b.n	8006552 <_printf_i+0x206>
 800657a:	2500      	movs	r5, #0
 800657c:	f104 0619 	add.w	r6, r4, #25
 8006580:	e7f5      	b.n	800656e <_printf_i+0x222>
 8006582:	bf00      	nop
 8006584:	0800c76e 	.word	0x0800c76e
 8006588:	0800c77f 	.word	0x0800c77f

0800658c <_scanf_float>:
 800658c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006590:	b087      	sub	sp, #28
 8006592:	4617      	mov	r7, r2
 8006594:	9303      	str	r3, [sp, #12]
 8006596:	688b      	ldr	r3, [r1, #8]
 8006598:	1e5a      	subs	r2, r3, #1
 800659a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800659e:	bf81      	itttt	hi
 80065a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80065a4:	eb03 0b05 	addhi.w	fp, r3, r5
 80065a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80065ac:	608b      	strhi	r3, [r1, #8]
 80065ae:	680b      	ldr	r3, [r1, #0]
 80065b0:	460a      	mov	r2, r1
 80065b2:	f04f 0500 	mov.w	r5, #0
 80065b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80065ba:	f842 3b1c 	str.w	r3, [r2], #28
 80065be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80065c2:	4680      	mov	r8, r0
 80065c4:	460c      	mov	r4, r1
 80065c6:	bf98      	it	ls
 80065c8:	f04f 0b00 	movls.w	fp, #0
 80065cc:	9201      	str	r2, [sp, #4]
 80065ce:	4616      	mov	r6, r2
 80065d0:	46aa      	mov	sl, r5
 80065d2:	46a9      	mov	r9, r5
 80065d4:	9502      	str	r5, [sp, #8]
 80065d6:	68a2      	ldr	r2, [r4, #8]
 80065d8:	b152      	cbz	r2, 80065f0 <_scanf_float+0x64>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b4e      	cmp	r3, #78	@ 0x4e
 80065e0:	d864      	bhi.n	80066ac <_scanf_float+0x120>
 80065e2:	2b40      	cmp	r3, #64	@ 0x40
 80065e4:	d83c      	bhi.n	8006660 <_scanf_float+0xd4>
 80065e6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80065ea:	b2c8      	uxtb	r0, r1
 80065ec:	280e      	cmp	r0, #14
 80065ee:	d93a      	bls.n	8006666 <_scanf_float+0xda>
 80065f0:	f1b9 0f00 	cmp.w	r9, #0
 80065f4:	d003      	beq.n	80065fe <_scanf_float+0x72>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006602:	f1ba 0f01 	cmp.w	sl, #1
 8006606:	f200 8117 	bhi.w	8006838 <_scanf_float+0x2ac>
 800660a:	9b01      	ldr	r3, [sp, #4]
 800660c:	429e      	cmp	r6, r3
 800660e:	f200 8108 	bhi.w	8006822 <_scanf_float+0x296>
 8006612:	2001      	movs	r0, #1
 8006614:	b007      	add	sp, #28
 8006616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800661e:	2a0d      	cmp	r2, #13
 8006620:	d8e6      	bhi.n	80065f0 <_scanf_float+0x64>
 8006622:	a101      	add	r1, pc, #4	@ (adr r1, 8006628 <_scanf_float+0x9c>)
 8006624:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006628:	0800676f 	.word	0x0800676f
 800662c:	080065f1 	.word	0x080065f1
 8006630:	080065f1 	.word	0x080065f1
 8006634:	080065f1 	.word	0x080065f1
 8006638:	080067cf 	.word	0x080067cf
 800663c:	080067a7 	.word	0x080067a7
 8006640:	080065f1 	.word	0x080065f1
 8006644:	080065f1 	.word	0x080065f1
 8006648:	0800677d 	.word	0x0800677d
 800664c:	080065f1 	.word	0x080065f1
 8006650:	080065f1 	.word	0x080065f1
 8006654:	080065f1 	.word	0x080065f1
 8006658:	080065f1 	.word	0x080065f1
 800665c:	08006735 	.word	0x08006735
 8006660:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006664:	e7db      	b.n	800661e <_scanf_float+0x92>
 8006666:	290e      	cmp	r1, #14
 8006668:	d8c2      	bhi.n	80065f0 <_scanf_float+0x64>
 800666a:	a001      	add	r0, pc, #4	@ (adr r0, 8006670 <_scanf_float+0xe4>)
 800666c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006670:	08006725 	.word	0x08006725
 8006674:	080065f1 	.word	0x080065f1
 8006678:	08006725 	.word	0x08006725
 800667c:	080067bb 	.word	0x080067bb
 8006680:	080065f1 	.word	0x080065f1
 8006684:	080066cd 	.word	0x080066cd
 8006688:	0800670b 	.word	0x0800670b
 800668c:	0800670b 	.word	0x0800670b
 8006690:	0800670b 	.word	0x0800670b
 8006694:	0800670b 	.word	0x0800670b
 8006698:	0800670b 	.word	0x0800670b
 800669c:	0800670b 	.word	0x0800670b
 80066a0:	0800670b 	.word	0x0800670b
 80066a4:	0800670b 	.word	0x0800670b
 80066a8:	0800670b 	.word	0x0800670b
 80066ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80066ae:	d809      	bhi.n	80066c4 <_scanf_float+0x138>
 80066b0:	2b60      	cmp	r3, #96	@ 0x60
 80066b2:	d8b2      	bhi.n	800661a <_scanf_float+0x8e>
 80066b4:	2b54      	cmp	r3, #84	@ 0x54
 80066b6:	d07b      	beq.n	80067b0 <_scanf_float+0x224>
 80066b8:	2b59      	cmp	r3, #89	@ 0x59
 80066ba:	d199      	bne.n	80065f0 <_scanf_float+0x64>
 80066bc:	2d07      	cmp	r5, #7
 80066be:	d197      	bne.n	80065f0 <_scanf_float+0x64>
 80066c0:	2508      	movs	r5, #8
 80066c2:	e02c      	b.n	800671e <_scanf_float+0x192>
 80066c4:	2b74      	cmp	r3, #116	@ 0x74
 80066c6:	d073      	beq.n	80067b0 <_scanf_float+0x224>
 80066c8:	2b79      	cmp	r3, #121	@ 0x79
 80066ca:	e7f6      	b.n	80066ba <_scanf_float+0x12e>
 80066cc:	6821      	ldr	r1, [r4, #0]
 80066ce:	05c8      	lsls	r0, r1, #23
 80066d0:	d51b      	bpl.n	800670a <_scanf_float+0x17e>
 80066d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80066d6:	6021      	str	r1, [r4, #0]
 80066d8:	f109 0901 	add.w	r9, r9, #1
 80066dc:	f1bb 0f00 	cmp.w	fp, #0
 80066e0:	d003      	beq.n	80066ea <_scanf_float+0x15e>
 80066e2:	3201      	adds	r2, #1
 80066e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066e8:	60a2      	str	r2, [r4, #8]
 80066ea:	68a3      	ldr	r3, [r4, #8]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	60a3      	str	r3, [r4, #8]
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	3301      	adds	r3, #1
 80066f4:	6123      	str	r3, [r4, #16]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	607b      	str	r3, [r7, #4]
 80066fe:	f340 8087 	ble.w	8006810 <_scanf_float+0x284>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	3301      	adds	r3, #1
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	e765      	b.n	80065d6 <_scanf_float+0x4a>
 800670a:	eb1a 0105 	adds.w	r1, sl, r5
 800670e:	f47f af6f 	bne.w	80065f0 <_scanf_float+0x64>
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006718:	6022      	str	r2, [r4, #0]
 800671a:	460d      	mov	r5, r1
 800671c:	468a      	mov	sl, r1
 800671e:	f806 3b01 	strb.w	r3, [r6], #1
 8006722:	e7e2      	b.n	80066ea <_scanf_float+0x15e>
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	0610      	lsls	r0, r2, #24
 8006728:	f57f af62 	bpl.w	80065f0 <_scanf_float+0x64>
 800672c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006730:	6022      	str	r2, [r4, #0]
 8006732:	e7f4      	b.n	800671e <_scanf_float+0x192>
 8006734:	f1ba 0f00 	cmp.w	sl, #0
 8006738:	d10e      	bne.n	8006758 <_scanf_float+0x1cc>
 800673a:	f1b9 0f00 	cmp.w	r9, #0
 800673e:	d10e      	bne.n	800675e <_scanf_float+0x1d2>
 8006740:	6822      	ldr	r2, [r4, #0]
 8006742:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006746:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800674a:	d108      	bne.n	800675e <_scanf_float+0x1d2>
 800674c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006750:	6022      	str	r2, [r4, #0]
 8006752:	f04f 0a01 	mov.w	sl, #1
 8006756:	e7e2      	b.n	800671e <_scanf_float+0x192>
 8006758:	f1ba 0f02 	cmp.w	sl, #2
 800675c:	d055      	beq.n	800680a <_scanf_float+0x27e>
 800675e:	2d01      	cmp	r5, #1
 8006760:	d002      	beq.n	8006768 <_scanf_float+0x1dc>
 8006762:	2d04      	cmp	r5, #4
 8006764:	f47f af44 	bne.w	80065f0 <_scanf_float+0x64>
 8006768:	3501      	adds	r5, #1
 800676a:	b2ed      	uxtb	r5, r5
 800676c:	e7d7      	b.n	800671e <_scanf_float+0x192>
 800676e:	f1ba 0f01 	cmp.w	sl, #1
 8006772:	f47f af3d 	bne.w	80065f0 <_scanf_float+0x64>
 8006776:	f04f 0a02 	mov.w	sl, #2
 800677a:	e7d0      	b.n	800671e <_scanf_float+0x192>
 800677c:	b97d      	cbnz	r5, 800679e <_scanf_float+0x212>
 800677e:	f1b9 0f00 	cmp.w	r9, #0
 8006782:	f47f af38 	bne.w	80065f6 <_scanf_float+0x6a>
 8006786:	6822      	ldr	r2, [r4, #0]
 8006788:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800678c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006790:	f040 8108 	bne.w	80069a4 <_scanf_float+0x418>
 8006794:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006798:	6022      	str	r2, [r4, #0]
 800679a:	2501      	movs	r5, #1
 800679c:	e7bf      	b.n	800671e <_scanf_float+0x192>
 800679e:	2d03      	cmp	r5, #3
 80067a0:	d0e2      	beq.n	8006768 <_scanf_float+0x1dc>
 80067a2:	2d05      	cmp	r5, #5
 80067a4:	e7de      	b.n	8006764 <_scanf_float+0x1d8>
 80067a6:	2d02      	cmp	r5, #2
 80067a8:	f47f af22 	bne.w	80065f0 <_scanf_float+0x64>
 80067ac:	2503      	movs	r5, #3
 80067ae:	e7b6      	b.n	800671e <_scanf_float+0x192>
 80067b0:	2d06      	cmp	r5, #6
 80067b2:	f47f af1d 	bne.w	80065f0 <_scanf_float+0x64>
 80067b6:	2507      	movs	r5, #7
 80067b8:	e7b1      	b.n	800671e <_scanf_float+0x192>
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	0591      	lsls	r1, r2, #22
 80067be:	f57f af17 	bpl.w	80065f0 <_scanf_float+0x64>
 80067c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80067c6:	6022      	str	r2, [r4, #0]
 80067c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80067cc:	e7a7      	b.n	800671e <_scanf_float+0x192>
 80067ce:	6822      	ldr	r2, [r4, #0]
 80067d0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80067d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80067d8:	d006      	beq.n	80067e8 <_scanf_float+0x25c>
 80067da:	0550      	lsls	r0, r2, #21
 80067dc:	f57f af08 	bpl.w	80065f0 <_scanf_float+0x64>
 80067e0:	f1b9 0f00 	cmp.w	r9, #0
 80067e4:	f000 80de 	beq.w	80069a4 <_scanf_float+0x418>
 80067e8:	0591      	lsls	r1, r2, #22
 80067ea:	bf58      	it	pl
 80067ec:	9902      	ldrpl	r1, [sp, #8]
 80067ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80067f2:	bf58      	it	pl
 80067f4:	eba9 0101 	subpl.w	r1, r9, r1
 80067f8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80067fc:	bf58      	it	pl
 80067fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006802:	6022      	str	r2, [r4, #0]
 8006804:	f04f 0900 	mov.w	r9, #0
 8006808:	e789      	b.n	800671e <_scanf_float+0x192>
 800680a:	f04f 0a03 	mov.w	sl, #3
 800680e:	e786      	b.n	800671e <_scanf_float+0x192>
 8006810:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006814:	4639      	mov	r1, r7
 8006816:	4640      	mov	r0, r8
 8006818:	4798      	blx	r3
 800681a:	2800      	cmp	r0, #0
 800681c:	f43f aedb 	beq.w	80065d6 <_scanf_float+0x4a>
 8006820:	e6e6      	b.n	80065f0 <_scanf_float+0x64>
 8006822:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006826:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800682a:	463a      	mov	r2, r7
 800682c:	4640      	mov	r0, r8
 800682e:	4798      	blx	r3
 8006830:	6923      	ldr	r3, [r4, #16]
 8006832:	3b01      	subs	r3, #1
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	e6e8      	b.n	800660a <_scanf_float+0x7e>
 8006838:	1e6b      	subs	r3, r5, #1
 800683a:	2b06      	cmp	r3, #6
 800683c:	d824      	bhi.n	8006888 <_scanf_float+0x2fc>
 800683e:	2d02      	cmp	r5, #2
 8006840:	d836      	bhi.n	80068b0 <_scanf_float+0x324>
 8006842:	9b01      	ldr	r3, [sp, #4]
 8006844:	429e      	cmp	r6, r3
 8006846:	f67f aee4 	bls.w	8006612 <_scanf_float+0x86>
 800684a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800684e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006852:	463a      	mov	r2, r7
 8006854:	4640      	mov	r0, r8
 8006856:	4798      	blx	r3
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	3b01      	subs	r3, #1
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	e7f0      	b.n	8006842 <_scanf_float+0x2b6>
 8006860:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006864:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006868:	463a      	mov	r2, r7
 800686a:	4640      	mov	r0, r8
 800686c:	4798      	blx	r3
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	3b01      	subs	r3, #1
 8006872:	6123      	str	r3, [r4, #16]
 8006874:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006878:	fa5f fa8a 	uxtb.w	sl, sl
 800687c:	f1ba 0f02 	cmp.w	sl, #2
 8006880:	d1ee      	bne.n	8006860 <_scanf_float+0x2d4>
 8006882:	3d03      	subs	r5, #3
 8006884:	b2ed      	uxtb	r5, r5
 8006886:	1b76      	subs	r6, r6, r5
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	05da      	lsls	r2, r3, #23
 800688c:	d530      	bpl.n	80068f0 <_scanf_float+0x364>
 800688e:	055b      	lsls	r3, r3, #21
 8006890:	d511      	bpl.n	80068b6 <_scanf_float+0x32a>
 8006892:	9b01      	ldr	r3, [sp, #4]
 8006894:	429e      	cmp	r6, r3
 8006896:	f67f aebc 	bls.w	8006612 <_scanf_float+0x86>
 800689a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800689e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068a2:	463a      	mov	r2, r7
 80068a4:	4640      	mov	r0, r8
 80068a6:	4798      	blx	r3
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	6123      	str	r3, [r4, #16]
 80068ae:	e7f0      	b.n	8006892 <_scanf_float+0x306>
 80068b0:	46aa      	mov	sl, r5
 80068b2:	46b3      	mov	fp, r6
 80068b4:	e7de      	b.n	8006874 <_scanf_float+0x2e8>
 80068b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	2965      	cmp	r1, #101	@ 0x65
 80068be:	f103 33ff 	add.w	r3, r3, #4294967295
 80068c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80068c6:	6123      	str	r3, [r4, #16]
 80068c8:	d00c      	beq.n	80068e4 <_scanf_float+0x358>
 80068ca:	2945      	cmp	r1, #69	@ 0x45
 80068cc:	d00a      	beq.n	80068e4 <_scanf_float+0x358>
 80068ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068d2:	463a      	mov	r2, r7
 80068d4:	4640      	mov	r0, r8
 80068d6:	4798      	blx	r3
 80068d8:	6923      	ldr	r3, [r4, #16]
 80068da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80068de:	3b01      	subs	r3, #1
 80068e0:	1eb5      	subs	r5, r6, #2
 80068e2:	6123      	str	r3, [r4, #16]
 80068e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068e8:	463a      	mov	r2, r7
 80068ea:	4640      	mov	r0, r8
 80068ec:	4798      	blx	r3
 80068ee:	462e      	mov	r6, r5
 80068f0:	6822      	ldr	r2, [r4, #0]
 80068f2:	f012 0210 	ands.w	r2, r2, #16
 80068f6:	d001      	beq.n	80068fc <_scanf_float+0x370>
 80068f8:	2000      	movs	r0, #0
 80068fa:	e68b      	b.n	8006614 <_scanf_float+0x88>
 80068fc:	7032      	strb	r2, [r6, #0]
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006908:	d11c      	bne.n	8006944 <_scanf_float+0x3b8>
 800690a:	9b02      	ldr	r3, [sp, #8]
 800690c:	454b      	cmp	r3, r9
 800690e:	eba3 0209 	sub.w	r2, r3, r9
 8006912:	d123      	bne.n	800695c <_scanf_float+0x3d0>
 8006914:	9901      	ldr	r1, [sp, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	4640      	mov	r0, r8
 800691a:	f002 fe7d 	bl	8009618 <_strtod_r>
 800691e:	9b03      	ldr	r3, [sp, #12]
 8006920:	6821      	ldr	r1, [r4, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f011 0f02 	tst.w	r1, #2
 8006928:	ec57 6b10 	vmov	r6, r7, d0
 800692c:	f103 0204 	add.w	r2, r3, #4
 8006930:	d01f      	beq.n	8006972 <_scanf_float+0x3e6>
 8006932:	9903      	ldr	r1, [sp, #12]
 8006934:	600a      	str	r2, [r1, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	e9c3 6700 	strd	r6, r7, [r3]
 800693c:	68e3      	ldr	r3, [r4, #12]
 800693e:	3301      	adds	r3, #1
 8006940:	60e3      	str	r3, [r4, #12]
 8006942:	e7d9      	b.n	80068f8 <_scanf_float+0x36c>
 8006944:	9b04      	ldr	r3, [sp, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0e4      	beq.n	8006914 <_scanf_float+0x388>
 800694a:	9905      	ldr	r1, [sp, #20]
 800694c:	230a      	movs	r3, #10
 800694e:	3101      	adds	r1, #1
 8006950:	4640      	mov	r0, r8
 8006952:	f002 fee1 	bl	8009718 <_strtol_r>
 8006956:	9b04      	ldr	r3, [sp, #16]
 8006958:	9e05      	ldr	r6, [sp, #20]
 800695a:	1ac2      	subs	r2, r0, r3
 800695c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006960:	429e      	cmp	r6, r3
 8006962:	bf28      	it	cs
 8006964:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006968:	4910      	ldr	r1, [pc, #64]	@ (80069ac <_scanf_float+0x420>)
 800696a:	4630      	mov	r0, r6
 800696c:	f000 fa10 	bl	8006d90 <siprintf>
 8006970:	e7d0      	b.n	8006914 <_scanf_float+0x388>
 8006972:	f011 0f04 	tst.w	r1, #4
 8006976:	9903      	ldr	r1, [sp, #12]
 8006978:	600a      	str	r2, [r1, #0]
 800697a:	d1dc      	bne.n	8006936 <_scanf_float+0x3aa>
 800697c:	681d      	ldr	r5, [r3, #0]
 800697e:	4632      	mov	r2, r6
 8006980:	463b      	mov	r3, r7
 8006982:	4630      	mov	r0, r6
 8006984:	4639      	mov	r1, r7
 8006986:	f7fa f8e9 	bl	8000b5c <__aeabi_dcmpun>
 800698a:	b128      	cbz	r0, 8006998 <_scanf_float+0x40c>
 800698c:	4808      	ldr	r0, [pc, #32]	@ (80069b0 <_scanf_float+0x424>)
 800698e:	f000 fc1f 	bl	80071d0 <nanf>
 8006992:	ed85 0a00 	vstr	s0, [r5]
 8006996:	e7d1      	b.n	800693c <_scanf_float+0x3b0>
 8006998:	4630      	mov	r0, r6
 800699a:	4639      	mov	r1, r7
 800699c:	f7fa f93c 	bl	8000c18 <__aeabi_d2f>
 80069a0:	6028      	str	r0, [r5, #0]
 80069a2:	e7cb      	b.n	800693c <_scanf_float+0x3b0>
 80069a4:	f04f 0900 	mov.w	r9, #0
 80069a8:	e629      	b.n	80065fe <_scanf_float+0x72>
 80069aa:	bf00      	nop
 80069ac:	0800c790 	.word	0x0800c790
 80069b0:	0800c841 	.word	0x0800c841

080069b4 <std>:
 80069b4:	2300      	movs	r3, #0
 80069b6:	b510      	push	{r4, lr}
 80069b8:	4604      	mov	r4, r0
 80069ba:	e9c0 3300 	strd	r3, r3, [r0]
 80069be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069c2:	6083      	str	r3, [r0, #8]
 80069c4:	8181      	strh	r1, [r0, #12]
 80069c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80069c8:	81c2      	strh	r2, [r0, #14]
 80069ca:	6183      	str	r3, [r0, #24]
 80069cc:	4619      	mov	r1, r3
 80069ce:	2208      	movs	r2, #8
 80069d0:	305c      	adds	r0, #92	@ 0x5c
 80069d2:	f000 fad5 	bl	8006f80 <memset>
 80069d6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a0c <std+0x58>)
 80069d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80069da:	4b0d      	ldr	r3, [pc, #52]	@ (8006a10 <std+0x5c>)
 80069dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069de:	4b0d      	ldr	r3, [pc, #52]	@ (8006a14 <std+0x60>)
 80069e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a18 <std+0x64>)
 80069e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80069e6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a1c <std+0x68>)
 80069e8:	6224      	str	r4, [r4, #32]
 80069ea:	429c      	cmp	r4, r3
 80069ec:	d006      	beq.n	80069fc <std+0x48>
 80069ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069f2:	4294      	cmp	r4, r2
 80069f4:	d002      	beq.n	80069fc <std+0x48>
 80069f6:	33d0      	adds	r3, #208	@ 0xd0
 80069f8:	429c      	cmp	r4, r3
 80069fa:	d105      	bne.n	8006a08 <std+0x54>
 80069fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a04:	f000 bbca 	b.w	800719c <__retarget_lock_init_recursive>
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	bf00      	nop
 8006a0c:	08006dd1 	.word	0x08006dd1
 8006a10:	08006df3 	.word	0x08006df3
 8006a14:	08006e2b 	.word	0x08006e2b
 8006a18:	08006e4f 	.word	0x08006e4f
 8006a1c:	20000c08 	.word	0x20000c08

08006a20 <stdio_exit_handler>:
 8006a20:	4a02      	ldr	r2, [pc, #8]	@ (8006a2c <stdio_exit_handler+0xc>)
 8006a22:	4903      	ldr	r1, [pc, #12]	@ (8006a30 <stdio_exit_handler+0x10>)
 8006a24:	4803      	ldr	r0, [pc, #12]	@ (8006a34 <stdio_exit_handler+0x14>)
 8006a26:	f000 b869 	b.w	8006afc <_fwalk_sglue>
 8006a2a:	bf00      	nop
 8006a2c:	2000003c 	.word	0x2000003c
 8006a30:	08009d59 	.word	0x08009d59
 8006a34:	2000004c 	.word	0x2000004c

08006a38 <cleanup_stdio>:
 8006a38:	6841      	ldr	r1, [r0, #4]
 8006a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <cleanup_stdio+0x34>)
 8006a3c:	4299      	cmp	r1, r3
 8006a3e:	b510      	push	{r4, lr}
 8006a40:	4604      	mov	r4, r0
 8006a42:	d001      	beq.n	8006a48 <cleanup_stdio+0x10>
 8006a44:	f003 f988 	bl	8009d58 <_fflush_r>
 8006a48:	68a1      	ldr	r1, [r4, #8]
 8006a4a:	4b09      	ldr	r3, [pc, #36]	@ (8006a70 <cleanup_stdio+0x38>)
 8006a4c:	4299      	cmp	r1, r3
 8006a4e:	d002      	beq.n	8006a56 <cleanup_stdio+0x1e>
 8006a50:	4620      	mov	r0, r4
 8006a52:	f003 f981 	bl	8009d58 <_fflush_r>
 8006a56:	68e1      	ldr	r1, [r4, #12]
 8006a58:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <cleanup_stdio+0x3c>)
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	d004      	beq.n	8006a68 <cleanup_stdio+0x30>
 8006a5e:	4620      	mov	r0, r4
 8006a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a64:	f003 b978 	b.w	8009d58 <_fflush_r>
 8006a68:	bd10      	pop	{r4, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000c08 	.word	0x20000c08
 8006a70:	20000c70 	.word	0x20000c70
 8006a74:	20000cd8 	.word	0x20000cd8

08006a78 <global_stdio_init.part.0>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <global_stdio_init.part.0+0x30>)
 8006a7c:	4c0b      	ldr	r4, [pc, #44]	@ (8006aac <global_stdio_init.part.0+0x34>)
 8006a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ab0 <global_stdio_init.part.0+0x38>)
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	4620      	mov	r0, r4
 8006a84:	2200      	movs	r2, #0
 8006a86:	2104      	movs	r1, #4
 8006a88:	f7ff ff94 	bl	80069b4 <std>
 8006a8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a90:	2201      	movs	r2, #1
 8006a92:	2109      	movs	r1, #9
 8006a94:	f7ff ff8e 	bl	80069b4 <std>
 8006a98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa2:	2112      	movs	r1, #18
 8006aa4:	f7ff bf86 	b.w	80069b4 <std>
 8006aa8:	20000d40 	.word	0x20000d40
 8006aac:	20000c08 	.word	0x20000c08
 8006ab0:	08006a21 	.word	0x08006a21

08006ab4 <__sfp_lock_acquire>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	@ (8006abc <__sfp_lock_acquire+0x8>)
 8006ab6:	f000 bb72 	b.w	800719e <__retarget_lock_acquire_recursive>
 8006aba:	bf00      	nop
 8006abc:	20000d49 	.word	0x20000d49

08006ac0 <__sfp_lock_release>:
 8006ac0:	4801      	ldr	r0, [pc, #4]	@ (8006ac8 <__sfp_lock_release+0x8>)
 8006ac2:	f000 bb6d 	b.w	80071a0 <__retarget_lock_release_recursive>
 8006ac6:	bf00      	nop
 8006ac8:	20000d49 	.word	0x20000d49

08006acc <__sinit>:
 8006acc:	b510      	push	{r4, lr}
 8006ace:	4604      	mov	r4, r0
 8006ad0:	f7ff fff0 	bl	8006ab4 <__sfp_lock_acquire>
 8006ad4:	6a23      	ldr	r3, [r4, #32]
 8006ad6:	b11b      	cbz	r3, 8006ae0 <__sinit+0x14>
 8006ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006adc:	f7ff bff0 	b.w	8006ac0 <__sfp_lock_release>
 8006ae0:	4b04      	ldr	r3, [pc, #16]	@ (8006af4 <__sinit+0x28>)
 8006ae2:	6223      	str	r3, [r4, #32]
 8006ae4:	4b04      	ldr	r3, [pc, #16]	@ (8006af8 <__sinit+0x2c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f5      	bne.n	8006ad8 <__sinit+0xc>
 8006aec:	f7ff ffc4 	bl	8006a78 <global_stdio_init.part.0>
 8006af0:	e7f2      	b.n	8006ad8 <__sinit+0xc>
 8006af2:	bf00      	nop
 8006af4:	08006a39 	.word	0x08006a39
 8006af8:	20000d40 	.word	0x20000d40

08006afc <_fwalk_sglue>:
 8006afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b00:	4607      	mov	r7, r0
 8006b02:	4688      	mov	r8, r1
 8006b04:	4614      	mov	r4, r2
 8006b06:	2600      	movs	r6, #0
 8006b08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b0c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b10:	d505      	bpl.n	8006b1e <_fwalk_sglue+0x22>
 8006b12:	6824      	ldr	r4, [r4, #0]
 8006b14:	2c00      	cmp	r4, #0
 8006b16:	d1f7      	bne.n	8006b08 <_fwalk_sglue+0xc>
 8006b18:	4630      	mov	r0, r6
 8006b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d907      	bls.n	8006b34 <_fwalk_sglue+0x38>
 8006b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	d003      	beq.n	8006b34 <_fwalk_sglue+0x38>
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	4638      	mov	r0, r7
 8006b30:	47c0      	blx	r8
 8006b32:	4306      	orrs	r6, r0
 8006b34:	3568      	adds	r5, #104	@ 0x68
 8006b36:	e7e9      	b.n	8006b0c <_fwalk_sglue+0x10>

08006b38 <iprintf>:
 8006b38:	b40f      	push	{r0, r1, r2, r3}
 8006b3a:	b507      	push	{r0, r1, r2, lr}
 8006b3c:	4906      	ldr	r1, [pc, #24]	@ (8006b58 <iprintf+0x20>)
 8006b3e:	ab04      	add	r3, sp, #16
 8006b40:	6808      	ldr	r0, [r1, #0]
 8006b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b46:	6881      	ldr	r1, [r0, #8]
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	f002 ff69 	bl	8009a20 <_vfiprintf_r>
 8006b4e:	b003      	add	sp, #12
 8006b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b54:	b004      	add	sp, #16
 8006b56:	4770      	bx	lr
 8006b58:	20000048 	.word	0x20000048

08006b5c <putchar>:
 8006b5c:	4b02      	ldr	r3, [pc, #8]	@ (8006b68 <putchar+0xc>)
 8006b5e:	4601      	mov	r1, r0
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	6882      	ldr	r2, [r0, #8]
 8006b64:	f003 b994 	b.w	8009e90 <_putc_r>
 8006b68:	20000048 	.word	0x20000048

08006b6c <_puts_r>:
 8006b6c:	6a03      	ldr	r3, [r0, #32]
 8006b6e:	b570      	push	{r4, r5, r6, lr}
 8006b70:	6884      	ldr	r4, [r0, #8]
 8006b72:	4605      	mov	r5, r0
 8006b74:	460e      	mov	r6, r1
 8006b76:	b90b      	cbnz	r3, 8006b7c <_puts_r+0x10>
 8006b78:	f7ff ffa8 	bl	8006acc <__sinit>
 8006b7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b7e:	07db      	lsls	r3, r3, #31
 8006b80:	d405      	bmi.n	8006b8e <_puts_r+0x22>
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	0598      	lsls	r0, r3, #22
 8006b86:	d402      	bmi.n	8006b8e <_puts_r+0x22>
 8006b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b8a:	f000 fb08 	bl	800719e <__retarget_lock_acquire_recursive>
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	0719      	lsls	r1, r3, #28
 8006b92:	d502      	bpl.n	8006b9a <_puts_r+0x2e>
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d135      	bne.n	8006c06 <_puts_r+0x9a>
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	f000 f999 	bl	8006ed4 <__swsetup_r>
 8006ba2:	b380      	cbz	r0, 8006c06 <_puts_r+0x9a>
 8006ba4:	f04f 35ff 	mov.w	r5, #4294967295
 8006ba8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006baa:	07da      	lsls	r2, r3, #31
 8006bac:	d405      	bmi.n	8006bba <_puts_r+0x4e>
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	059b      	lsls	r3, r3, #22
 8006bb2:	d402      	bmi.n	8006bba <_puts_r+0x4e>
 8006bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bb6:	f000 faf3 	bl	80071a0 <__retarget_lock_release_recursive>
 8006bba:	4628      	mov	r0, r5
 8006bbc:	bd70      	pop	{r4, r5, r6, pc}
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	da04      	bge.n	8006bcc <_puts_r+0x60>
 8006bc2:	69a2      	ldr	r2, [r4, #24]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	dc17      	bgt.n	8006bf8 <_puts_r+0x8c>
 8006bc8:	290a      	cmp	r1, #10
 8006bca:	d015      	beq.n	8006bf8 <_puts_r+0x8c>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	6022      	str	r2, [r4, #0]
 8006bd2:	7019      	strb	r1, [r3, #0]
 8006bd4:	68a3      	ldr	r3, [r4, #8]
 8006bd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	60a3      	str	r3, [r4, #8]
 8006bde:	2900      	cmp	r1, #0
 8006be0:	d1ed      	bne.n	8006bbe <_puts_r+0x52>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	da11      	bge.n	8006c0a <_puts_r+0x9e>
 8006be6:	4622      	mov	r2, r4
 8006be8:	210a      	movs	r1, #10
 8006bea:	4628      	mov	r0, r5
 8006bec:	f000 f933 	bl	8006e56 <__swbuf_r>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d0d7      	beq.n	8006ba4 <_puts_r+0x38>
 8006bf4:	250a      	movs	r5, #10
 8006bf6:	e7d7      	b.n	8006ba8 <_puts_r+0x3c>
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f000 f92b 	bl	8006e56 <__swbuf_r>
 8006c00:	3001      	adds	r0, #1
 8006c02:	d1e7      	bne.n	8006bd4 <_puts_r+0x68>
 8006c04:	e7ce      	b.n	8006ba4 <_puts_r+0x38>
 8006c06:	3e01      	subs	r6, #1
 8006c08:	e7e4      	b.n	8006bd4 <_puts_r+0x68>
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	6022      	str	r2, [r4, #0]
 8006c10:	220a      	movs	r2, #10
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	e7ee      	b.n	8006bf4 <_puts_r+0x88>
	...

08006c18 <puts>:
 8006c18:	4b02      	ldr	r3, [pc, #8]	@ (8006c24 <puts+0xc>)
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	f7ff bfa5 	b.w	8006b6c <_puts_r>
 8006c22:	bf00      	nop
 8006c24:	20000048 	.word	0x20000048

08006c28 <setvbuf>:
 8006c28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c2c:	461d      	mov	r5, r3
 8006c2e:	4b57      	ldr	r3, [pc, #348]	@ (8006d8c <setvbuf+0x164>)
 8006c30:	681f      	ldr	r7, [r3, #0]
 8006c32:	4604      	mov	r4, r0
 8006c34:	460e      	mov	r6, r1
 8006c36:	4690      	mov	r8, r2
 8006c38:	b127      	cbz	r7, 8006c44 <setvbuf+0x1c>
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	b913      	cbnz	r3, 8006c44 <setvbuf+0x1c>
 8006c3e:	4638      	mov	r0, r7
 8006c40:	f7ff ff44 	bl	8006acc <__sinit>
 8006c44:	f1b8 0f02 	cmp.w	r8, #2
 8006c48:	d006      	beq.n	8006c58 <setvbuf+0x30>
 8006c4a:	f1b8 0f01 	cmp.w	r8, #1
 8006c4e:	f200 809a 	bhi.w	8006d86 <setvbuf+0x15e>
 8006c52:	2d00      	cmp	r5, #0
 8006c54:	f2c0 8097 	blt.w	8006d86 <setvbuf+0x15e>
 8006c58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c5a:	07d9      	lsls	r1, r3, #31
 8006c5c:	d405      	bmi.n	8006c6a <setvbuf+0x42>
 8006c5e:	89a3      	ldrh	r3, [r4, #12]
 8006c60:	059a      	lsls	r2, r3, #22
 8006c62:	d402      	bmi.n	8006c6a <setvbuf+0x42>
 8006c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c66:	f000 fa9a 	bl	800719e <__retarget_lock_acquire_recursive>
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	f003 f873 	bl	8009d58 <_fflush_r>
 8006c72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c74:	b141      	cbz	r1, 8006c88 <setvbuf+0x60>
 8006c76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c7a:	4299      	cmp	r1, r3
 8006c7c:	d002      	beq.n	8006c84 <setvbuf+0x5c>
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f001 f916 	bl	8007eb0 <_free_r>
 8006c84:	2300      	movs	r3, #0
 8006c86:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61a3      	str	r3, [r4, #24]
 8006c8c:	6063      	str	r3, [r4, #4]
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	061b      	lsls	r3, r3, #24
 8006c92:	d503      	bpl.n	8006c9c <setvbuf+0x74>
 8006c94:	6921      	ldr	r1, [r4, #16]
 8006c96:	4638      	mov	r0, r7
 8006c98:	f001 f90a 	bl	8007eb0 <_free_r>
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8006ca2:	f023 0303 	bic.w	r3, r3, #3
 8006ca6:	f1b8 0f02 	cmp.w	r8, #2
 8006caa:	81a3      	strh	r3, [r4, #12]
 8006cac:	d061      	beq.n	8006d72 <setvbuf+0x14a>
 8006cae:	ab01      	add	r3, sp, #4
 8006cb0:	466a      	mov	r2, sp
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	f003 f889 	bl	8009dcc <__swhatbuf_r>
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	4318      	orrs	r0, r3
 8006cbe:	81a0      	strh	r0, [r4, #12]
 8006cc0:	bb2d      	cbnz	r5, 8006d0e <setvbuf+0xe6>
 8006cc2:	9d00      	ldr	r5, [sp, #0]
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	f001 f93d 	bl	8007f44 <malloc>
 8006cca:	4606      	mov	r6, r0
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d152      	bne.n	8006d76 <setvbuf+0x14e>
 8006cd0:	f8dd 9000 	ldr.w	r9, [sp]
 8006cd4:	45a9      	cmp	r9, r5
 8006cd6:	d140      	bne.n	8006d5a <setvbuf+0x132>
 8006cd8:	f04f 35ff 	mov.w	r5, #4294967295
 8006cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce0:	f043 0202 	orr.w	r2, r3, #2
 8006ce4:	81a2      	strh	r2, [r4, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	60a2      	str	r2, [r4, #8]
 8006cea:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8006cee:	6022      	str	r2, [r4, #0]
 8006cf0:	6122      	str	r2, [r4, #16]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	6162      	str	r2, [r4, #20]
 8006cf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006cf8:	07d6      	lsls	r6, r2, #31
 8006cfa:	d404      	bmi.n	8006d06 <setvbuf+0xde>
 8006cfc:	0598      	lsls	r0, r3, #22
 8006cfe:	d402      	bmi.n	8006d06 <setvbuf+0xde>
 8006d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d02:	f000 fa4d 	bl	80071a0 <__retarget_lock_release_recursive>
 8006d06:	4628      	mov	r0, r5
 8006d08:	b003      	add	sp, #12
 8006d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d0e:	2e00      	cmp	r6, #0
 8006d10:	d0d8      	beq.n	8006cc4 <setvbuf+0x9c>
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	b913      	cbnz	r3, 8006d1c <setvbuf+0xf4>
 8006d16:	4638      	mov	r0, r7
 8006d18:	f7ff fed8 	bl	8006acc <__sinit>
 8006d1c:	f1b8 0f01 	cmp.w	r8, #1
 8006d20:	bf08      	it	eq
 8006d22:	89a3      	ldrheq	r3, [r4, #12]
 8006d24:	6026      	str	r6, [r4, #0]
 8006d26:	bf04      	itt	eq
 8006d28:	f043 0301 	orreq.w	r3, r3, #1
 8006d2c:	81a3      	strheq	r3, [r4, #12]
 8006d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d32:	f013 0208 	ands.w	r2, r3, #8
 8006d36:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006d3a:	d01e      	beq.n	8006d7a <setvbuf+0x152>
 8006d3c:	07d9      	lsls	r1, r3, #31
 8006d3e:	bf41      	itttt	mi
 8006d40:	2200      	movmi	r2, #0
 8006d42:	426d      	negmi	r5, r5
 8006d44:	60a2      	strmi	r2, [r4, #8]
 8006d46:	61a5      	strmi	r5, [r4, #24]
 8006d48:	bf58      	it	pl
 8006d4a:	60a5      	strpl	r5, [r4, #8]
 8006d4c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d4e:	07d2      	lsls	r2, r2, #31
 8006d50:	d401      	bmi.n	8006d56 <setvbuf+0x12e>
 8006d52:	059b      	lsls	r3, r3, #22
 8006d54:	d513      	bpl.n	8006d7e <setvbuf+0x156>
 8006d56:	2500      	movs	r5, #0
 8006d58:	e7d5      	b.n	8006d06 <setvbuf+0xde>
 8006d5a:	4648      	mov	r0, r9
 8006d5c:	f001 f8f2 	bl	8007f44 <malloc>
 8006d60:	4606      	mov	r6, r0
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d0b8      	beq.n	8006cd8 <setvbuf+0xb0>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	464d      	mov	r5, r9
 8006d70:	e7cf      	b.n	8006d12 <setvbuf+0xea>
 8006d72:	2500      	movs	r5, #0
 8006d74:	e7b2      	b.n	8006cdc <setvbuf+0xb4>
 8006d76:	46a9      	mov	r9, r5
 8006d78:	e7f5      	b.n	8006d66 <setvbuf+0x13e>
 8006d7a:	60a2      	str	r2, [r4, #8]
 8006d7c:	e7e6      	b.n	8006d4c <setvbuf+0x124>
 8006d7e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d80:	f000 fa0e 	bl	80071a0 <__retarget_lock_release_recursive>
 8006d84:	e7e7      	b.n	8006d56 <setvbuf+0x12e>
 8006d86:	f04f 35ff 	mov.w	r5, #4294967295
 8006d8a:	e7bc      	b.n	8006d06 <setvbuf+0xde>
 8006d8c:	20000048 	.word	0x20000048

08006d90 <siprintf>:
 8006d90:	b40e      	push	{r1, r2, r3}
 8006d92:	b500      	push	{lr}
 8006d94:	b09c      	sub	sp, #112	@ 0x70
 8006d96:	ab1d      	add	r3, sp, #116	@ 0x74
 8006d98:	9002      	str	r0, [sp, #8]
 8006d9a:	9006      	str	r0, [sp, #24]
 8006d9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006da0:	4809      	ldr	r0, [pc, #36]	@ (8006dc8 <siprintf+0x38>)
 8006da2:	9107      	str	r1, [sp, #28]
 8006da4:	9104      	str	r1, [sp, #16]
 8006da6:	4909      	ldr	r1, [pc, #36]	@ (8006dcc <siprintf+0x3c>)
 8006da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dac:	9105      	str	r1, [sp, #20]
 8006dae:	6800      	ldr	r0, [r0, #0]
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	a902      	add	r1, sp, #8
 8006db4:	f002 fd0e 	bl	80097d4 <_svfiprintf_r>
 8006db8:	9b02      	ldr	r3, [sp, #8]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	b01c      	add	sp, #112	@ 0x70
 8006dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dc4:	b003      	add	sp, #12
 8006dc6:	4770      	bx	lr
 8006dc8:	20000048 	.word	0x20000048
 8006dcc:	ffff0208 	.word	0xffff0208

08006dd0 <__sread>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd8:	f000 f992 	bl	8007100 <_read_r>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	bfab      	itete	ge
 8006de0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006de2:	89a3      	ldrhlt	r3, [r4, #12]
 8006de4:	181b      	addge	r3, r3, r0
 8006de6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006dea:	bfac      	ite	ge
 8006dec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006dee:	81a3      	strhlt	r3, [r4, #12]
 8006df0:	bd10      	pop	{r4, pc}

08006df2 <__swrite>:
 8006df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df6:	461f      	mov	r7, r3
 8006df8:	898b      	ldrh	r3, [r1, #12]
 8006dfa:	05db      	lsls	r3, r3, #23
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	460c      	mov	r4, r1
 8006e00:	4616      	mov	r6, r2
 8006e02:	d505      	bpl.n	8006e10 <__swrite+0x1e>
 8006e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e08:	2302      	movs	r3, #2
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f000 f966 	bl	80070dc <_lseek_r>
 8006e10:	89a3      	ldrh	r3, [r4, #12]
 8006e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e1a:	81a3      	strh	r3, [r4, #12]
 8006e1c:	4632      	mov	r2, r6
 8006e1e:	463b      	mov	r3, r7
 8006e20:	4628      	mov	r0, r5
 8006e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e26:	f000 b97d 	b.w	8007124 <_write_r>

08006e2a <__sseek>:
 8006e2a:	b510      	push	{r4, lr}
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e32:	f000 f953 	bl	80070dc <_lseek_r>
 8006e36:	1c43      	adds	r3, r0, #1
 8006e38:	89a3      	ldrh	r3, [r4, #12]
 8006e3a:	bf15      	itete	ne
 8006e3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e46:	81a3      	strheq	r3, [r4, #12]
 8006e48:	bf18      	it	ne
 8006e4a:	81a3      	strhne	r3, [r4, #12]
 8006e4c:	bd10      	pop	{r4, pc}

08006e4e <__sclose>:
 8006e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e52:	f000 b933 	b.w	80070bc <_close_r>

08006e56 <__swbuf_r>:
 8006e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e58:	460e      	mov	r6, r1
 8006e5a:	4614      	mov	r4, r2
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	b118      	cbz	r0, 8006e68 <__swbuf_r+0x12>
 8006e60:	6a03      	ldr	r3, [r0, #32]
 8006e62:	b90b      	cbnz	r3, 8006e68 <__swbuf_r+0x12>
 8006e64:	f7ff fe32 	bl	8006acc <__sinit>
 8006e68:	69a3      	ldr	r3, [r4, #24]
 8006e6a:	60a3      	str	r3, [r4, #8]
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	071a      	lsls	r2, r3, #28
 8006e70:	d501      	bpl.n	8006e76 <__swbuf_r+0x20>
 8006e72:	6923      	ldr	r3, [r4, #16]
 8006e74:	b943      	cbnz	r3, 8006e88 <__swbuf_r+0x32>
 8006e76:	4621      	mov	r1, r4
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f000 f82b 	bl	8006ed4 <__swsetup_r>
 8006e7e:	b118      	cbz	r0, 8006e88 <__swbuf_r+0x32>
 8006e80:	f04f 37ff 	mov.w	r7, #4294967295
 8006e84:	4638      	mov	r0, r7
 8006e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	6922      	ldr	r2, [r4, #16]
 8006e8c:	1a98      	subs	r0, r3, r2
 8006e8e:	6963      	ldr	r3, [r4, #20]
 8006e90:	b2f6      	uxtb	r6, r6
 8006e92:	4283      	cmp	r3, r0
 8006e94:	4637      	mov	r7, r6
 8006e96:	dc05      	bgt.n	8006ea4 <__swbuf_r+0x4e>
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f002 ff5c 	bl	8009d58 <_fflush_r>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d1ed      	bne.n	8006e80 <__swbuf_r+0x2a>
 8006ea4:	68a3      	ldr	r3, [r4, #8]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	60a3      	str	r3, [r4, #8]
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	6022      	str	r2, [r4, #0]
 8006eb0:	701e      	strb	r6, [r3, #0]
 8006eb2:	6962      	ldr	r2, [r4, #20]
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d004      	beq.n	8006ec4 <__swbuf_r+0x6e>
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	07db      	lsls	r3, r3, #31
 8006ebe:	d5e1      	bpl.n	8006e84 <__swbuf_r+0x2e>
 8006ec0:	2e0a      	cmp	r6, #10
 8006ec2:	d1df      	bne.n	8006e84 <__swbuf_r+0x2e>
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f002 ff46 	bl	8009d58 <_fflush_r>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d0d9      	beq.n	8006e84 <__swbuf_r+0x2e>
 8006ed0:	e7d6      	b.n	8006e80 <__swbuf_r+0x2a>
	...

08006ed4 <__swsetup_r>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	4b29      	ldr	r3, [pc, #164]	@ (8006f7c <__swsetup_r+0xa8>)
 8006ed8:	4605      	mov	r5, r0
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	460c      	mov	r4, r1
 8006ede:	b118      	cbz	r0, 8006ee8 <__swsetup_r+0x14>
 8006ee0:	6a03      	ldr	r3, [r0, #32]
 8006ee2:	b90b      	cbnz	r3, 8006ee8 <__swsetup_r+0x14>
 8006ee4:	f7ff fdf2 	bl	8006acc <__sinit>
 8006ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eec:	0719      	lsls	r1, r3, #28
 8006eee:	d422      	bmi.n	8006f36 <__swsetup_r+0x62>
 8006ef0:	06da      	lsls	r2, r3, #27
 8006ef2:	d407      	bmi.n	8006f04 <__swsetup_r+0x30>
 8006ef4:	2209      	movs	r2, #9
 8006ef6:	602a      	str	r2, [r5, #0]
 8006ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006efc:	81a3      	strh	r3, [r4, #12]
 8006efe:	f04f 30ff 	mov.w	r0, #4294967295
 8006f02:	e033      	b.n	8006f6c <__swsetup_r+0x98>
 8006f04:	0758      	lsls	r0, r3, #29
 8006f06:	d512      	bpl.n	8006f2e <__swsetup_r+0x5a>
 8006f08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f0a:	b141      	cbz	r1, 8006f1e <__swsetup_r+0x4a>
 8006f0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f10:	4299      	cmp	r1, r3
 8006f12:	d002      	beq.n	8006f1a <__swsetup_r+0x46>
 8006f14:	4628      	mov	r0, r5
 8006f16:	f000 ffcb 	bl	8007eb0 <_free_r>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f1e:	89a3      	ldrh	r3, [r4, #12]
 8006f20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f24:	81a3      	strh	r3, [r4, #12]
 8006f26:	2300      	movs	r3, #0
 8006f28:	6063      	str	r3, [r4, #4]
 8006f2a:	6923      	ldr	r3, [r4, #16]
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	89a3      	ldrh	r3, [r4, #12]
 8006f30:	f043 0308 	orr.w	r3, r3, #8
 8006f34:	81a3      	strh	r3, [r4, #12]
 8006f36:	6923      	ldr	r3, [r4, #16]
 8006f38:	b94b      	cbnz	r3, 8006f4e <__swsetup_r+0x7a>
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f44:	d003      	beq.n	8006f4e <__swsetup_r+0x7a>
 8006f46:	4621      	mov	r1, r4
 8006f48:	4628      	mov	r0, r5
 8006f4a:	f002 ff65 	bl	8009e18 <__smakebuf_r>
 8006f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f52:	f013 0201 	ands.w	r2, r3, #1
 8006f56:	d00a      	beq.n	8006f6e <__swsetup_r+0x9a>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	60a2      	str	r2, [r4, #8]
 8006f5c:	6962      	ldr	r2, [r4, #20]
 8006f5e:	4252      	negs	r2, r2
 8006f60:	61a2      	str	r2, [r4, #24]
 8006f62:	6922      	ldr	r2, [r4, #16]
 8006f64:	b942      	cbnz	r2, 8006f78 <__swsetup_r+0xa4>
 8006f66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f6a:	d1c5      	bne.n	8006ef8 <__swsetup_r+0x24>
 8006f6c:	bd38      	pop	{r3, r4, r5, pc}
 8006f6e:	0799      	lsls	r1, r3, #30
 8006f70:	bf58      	it	pl
 8006f72:	6962      	ldrpl	r2, [r4, #20]
 8006f74:	60a2      	str	r2, [r4, #8]
 8006f76:	e7f4      	b.n	8006f62 <__swsetup_r+0x8e>
 8006f78:	2000      	movs	r0, #0
 8006f7a:	e7f7      	b.n	8006f6c <__swsetup_r+0x98>
 8006f7c:	20000048 	.word	0x20000048

08006f80 <memset>:
 8006f80:	4402      	add	r2, r0
 8006f82:	4603      	mov	r3, r0
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d100      	bne.n	8006f8a <memset+0xa>
 8006f88:	4770      	bx	lr
 8006f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f8e:	e7f9      	b.n	8006f84 <memset+0x4>

08006f90 <strchr>:
 8006f90:	b2c9      	uxtb	r1, r1
 8006f92:	4603      	mov	r3, r0
 8006f94:	4618      	mov	r0, r3
 8006f96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f9a:	b112      	cbz	r2, 8006fa2 <strchr+0x12>
 8006f9c:	428a      	cmp	r2, r1
 8006f9e:	d1f9      	bne.n	8006f94 <strchr+0x4>
 8006fa0:	4770      	bx	lr
 8006fa2:	2900      	cmp	r1, #0
 8006fa4:	bf18      	it	ne
 8006fa6:	2000      	movne	r0, #0
 8006fa8:	4770      	bx	lr

08006faa <strncmp>:
 8006faa:	b510      	push	{r4, lr}
 8006fac:	b16a      	cbz	r2, 8006fca <strncmp+0x20>
 8006fae:	3901      	subs	r1, #1
 8006fb0:	1884      	adds	r4, r0, r2
 8006fb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fb6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d103      	bne.n	8006fc6 <strncmp+0x1c>
 8006fbe:	42a0      	cmp	r0, r4
 8006fc0:	d001      	beq.n	8006fc6 <strncmp+0x1c>
 8006fc2:	2a00      	cmp	r2, #0
 8006fc4:	d1f5      	bne.n	8006fb2 <strncmp+0x8>
 8006fc6:	1ad0      	subs	r0, r2, r3
 8006fc8:	bd10      	pop	{r4, pc}
 8006fca:	4610      	mov	r0, r2
 8006fcc:	e7fc      	b.n	8006fc8 <strncmp+0x1e>
	...

08006fd0 <strtok>:
 8006fd0:	4b16      	ldr	r3, [pc, #88]	@ (800702c <strtok+0x5c>)
 8006fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd6:	681f      	ldr	r7, [r3, #0]
 8006fd8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006fda:	4605      	mov	r5, r0
 8006fdc:	460e      	mov	r6, r1
 8006fde:	b9ec      	cbnz	r4, 800701c <strtok+0x4c>
 8006fe0:	2050      	movs	r0, #80	@ 0x50
 8006fe2:	f000 ffaf 	bl	8007f44 <malloc>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	6478      	str	r0, [r7, #68]	@ 0x44
 8006fea:	b920      	cbnz	r0, 8006ff6 <strtok+0x26>
 8006fec:	4b10      	ldr	r3, [pc, #64]	@ (8007030 <strtok+0x60>)
 8006fee:	4811      	ldr	r0, [pc, #68]	@ (8007034 <strtok+0x64>)
 8006ff0:	215b      	movs	r1, #91	@ 0x5b
 8006ff2:	f000 f8f3 	bl	80071dc <__assert_func>
 8006ff6:	e9c0 4400 	strd	r4, r4, [r0]
 8006ffa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006ffe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007002:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007006:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800700a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800700e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007012:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007016:	6184      	str	r4, [r0, #24]
 8007018:	7704      	strb	r4, [r0, #28]
 800701a:	6244      	str	r4, [r0, #36]	@ 0x24
 800701c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800701e:	4631      	mov	r1, r6
 8007020:	4628      	mov	r0, r5
 8007022:	2301      	movs	r3, #1
 8007024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007028:	f000 b806 	b.w	8007038 <__strtok_r>
 800702c:	20000048 	.word	0x20000048
 8007030:	0800c795 	.word	0x0800c795
 8007034:	0800c7ac 	.word	0x0800c7ac

08007038 <__strtok_r>:
 8007038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800703a:	4604      	mov	r4, r0
 800703c:	b908      	cbnz	r0, 8007042 <__strtok_r+0xa>
 800703e:	6814      	ldr	r4, [r2, #0]
 8007040:	b144      	cbz	r4, 8007054 <__strtok_r+0x1c>
 8007042:	4620      	mov	r0, r4
 8007044:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007048:	460f      	mov	r7, r1
 800704a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800704e:	b91e      	cbnz	r6, 8007058 <__strtok_r+0x20>
 8007050:	b965      	cbnz	r5, 800706c <__strtok_r+0x34>
 8007052:	6015      	str	r5, [r2, #0]
 8007054:	2000      	movs	r0, #0
 8007056:	e005      	b.n	8007064 <__strtok_r+0x2c>
 8007058:	42b5      	cmp	r5, r6
 800705a:	d1f6      	bne.n	800704a <__strtok_r+0x12>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1f0      	bne.n	8007042 <__strtok_r+0xa>
 8007060:	6014      	str	r4, [r2, #0]
 8007062:	7003      	strb	r3, [r0, #0]
 8007064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007066:	461c      	mov	r4, r3
 8007068:	e00c      	b.n	8007084 <__strtok_r+0x4c>
 800706a:	b915      	cbnz	r5, 8007072 <__strtok_r+0x3a>
 800706c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007070:	460e      	mov	r6, r1
 8007072:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007076:	42ab      	cmp	r3, r5
 8007078:	d1f7      	bne.n	800706a <__strtok_r+0x32>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0f3      	beq.n	8007066 <__strtok_r+0x2e>
 800707e:	2300      	movs	r3, #0
 8007080:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007084:	6014      	str	r4, [r2, #0]
 8007086:	e7ed      	b.n	8007064 <__strtok_r+0x2c>

08007088 <strstr>:
 8007088:	780a      	ldrb	r2, [r1, #0]
 800708a:	b570      	push	{r4, r5, r6, lr}
 800708c:	b96a      	cbnz	r2, 80070aa <strstr+0x22>
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	429a      	cmp	r2, r3
 8007092:	d109      	bne.n	80070a8 <strstr+0x20>
 8007094:	460c      	mov	r4, r1
 8007096:	4605      	mov	r5, r0
 8007098:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0f6      	beq.n	800708e <strstr+0x6>
 80070a0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80070a4:	429e      	cmp	r6, r3
 80070a6:	d0f7      	beq.n	8007098 <strstr+0x10>
 80070a8:	3001      	adds	r0, #1
 80070aa:	7803      	ldrb	r3, [r0, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1ef      	bne.n	8007090 <strstr+0x8>
 80070b0:	4618      	mov	r0, r3
 80070b2:	e7ec      	b.n	800708e <strstr+0x6>

080070b4 <_localeconv_r>:
 80070b4:	4800      	ldr	r0, [pc, #0]	@ (80070b8 <_localeconv_r+0x4>)
 80070b6:	4770      	bx	lr
 80070b8:	20000188 	.word	0x20000188

080070bc <_close_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4d06      	ldr	r5, [pc, #24]	@ (80070d8 <_close_r+0x1c>)
 80070c0:	2300      	movs	r3, #0
 80070c2:	4604      	mov	r4, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	602b      	str	r3, [r5, #0]
 80070c8:	f7fb fe5c 	bl	8002d84 <_close>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_close_r+0x1a>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_close_r+0x1a>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	20000d44 	.word	0x20000d44

080070dc <_lseek_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d07      	ldr	r5, [pc, #28]	@ (80070fc <_lseek_r+0x20>)
 80070e0:	4604      	mov	r4, r0
 80070e2:	4608      	mov	r0, r1
 80070e4:	4611      	mov	r1, r2
 80070e6:	2200      	movs	r2, #0
 80070e8:	602a      	str	r2, [r5, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	f7fb fe71 	bl	8002dd2 <_lseek>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_lseek_r+0x1e>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_lseek_r+0x1e>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	20000d44 	.word	0x20000d44

08007100 <_read_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	4d07      	ldr	r5, [pc, #28]	@ (8007120 <_read_r+0x20>)
 8007104:	4604      	mov	r4, r0
 8007106:	4608      	mov	r0, r1
 8007108:	4611      	mov	r1, r2
 800710a:	2200      	movs	r2, #0
 800710c:	602a      	str	r2, [r5, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	f7fb fdff 	bl	8002d12 <_read>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d102      	bne.n	800711e <_read_r+0x1e>
 8007118:	682b      	ldr	r3, [r5, #0]
 800711a:	b103      	cbz	r3, 800711e <_read_r+0x1e>
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	bd38      	pop	{r3, r4, r5, pc}
 8007120:	20000d44 	.word	0x20000d44

08007124 <_write_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4d07      	ldr	r5, [pc, #28]	@ (8007144 <_write_r+0x20>)
 8007128:	4604      	mov	r4, r0
 800712a:	4608      	mov	r0, r1
 800712c:	4611      	mov	r1, r2
 800712e:	2200      	movs	r2, #0
 8007130:	602a      	str	r2, [r5, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	f7fb fe0a 	bl	8002d4c <_write>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d102      	bne.n	8007142 <_write_r+0x1e>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	b103      	cbz	r3, 8007142 <_write_r+0x1e>
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	20000d44 	.word	0x20000d44

08007148 <__errno>:
 8007148:	4b01      	ldr	r3, [pc, #4]	@ (8007150 <__errno+0x8>)
 800714a:	6818      	ldr	r0, [r3, #0]
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	20000048 	.word	0x20000048

08007154 <__libc_init_array>:
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	4d0d      	ldr	r5, [pc, #52]	@ (800718c <__libc_init_array+0x38>)
 8007158:	4c0d      	ldr	r4, [pc, #52]	@ (8007190 <__libc_init_array+0x3c>)
 800715a:	1b64      	subs	r4, r4, r5
 800715c:	10a4      	asrs	r4, r4, #2
 800715e:	2600      	movs	r6, #0
 8007160:	42a6      	cmp	r6, r4
 8007162:	d109      	bne.n	8007178 <__libc_init_array+0x24>
 8007164:	4d0b      	ldr	r5, [pc, #44]	@ (8007194 <__libc_init_array+0x40>)
 8007166:	4c0c      	ldr	r4, [pc, #48]	@ (8007198 <__libc_init_array+0x44>)
 8007168:	f004 ff82 	bl	800c070 <_init>
 800716c:	1b64      	subs	r4, r4, r5
 800716e:	10a4      	asrs	r4, r4, #2
 8007170:	2600      	movs	r6, #0
 8007172:	42a6      	cmp	r6, r4
 8007174:	d105      	bne.n	8007182 <__libc_init_array+0x2e>
 8007176:	bd70      	pop	{r4, r5, r6, pc}
 8007178:	f855 3b04 	ldr.w	r3, [r5], #4
 800717c:	4798      	blx	r3
 800717e:	3601      	adds	r6, #1
 8007180:	e7ee      	b.n	8007160 <__libc_init_array+0xc>
 8007182:	f855 3b04 	ldr.w	r3, [r5], #4
 8007186:	4798      	blx	r3
 8007188:	3601      	adds	r6, #1
 800718a:	e7f2      	b.n	8007172 <__libc_init_array+0x1e>
 800718c:	0800cc90 	.word	0x0800cc90
 8007190:	0800cc90 	.word	0x0800cc90
 8007194:	0800cc90 	.word	0x0800cc90
 8007198:	0800cc94 	.word	0x0800cc94

0800719c <__retarget_lock_init_recursive>:
 800719c:	4770      	bx	lr

0800719e <__retarget_lock_acquire_recursive>:
 800719e:	4770      	bx	lr

080071a0 <__retarget_lock_release_recursive>:
 80071a0:	4770      	bx	lr

080071a2 <strcpy>:
 80071a2:	4603      	mov	r3, r0
 80071a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071a8:	f803 2b01 	strb.w	r2, [r3], #1
 80071ac:	2a00      	cmp	r2, #0
 80071ae:	d1f9      	bne.n	80071a4 <strcpy+0x2>
 80071b0:	4770      	bx	lr

080071b2 <memcpy>:
 80071b2:	440a      	add	r2, r1
 80071b4:	4291      	cmp	r1, r2
 80071b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80071ba:	d100      	bne.n	80071be <memcpy+0xc>
 80071bc:	4770      	bx	lr
 80071be:	b510      	push	{r4, lr}
 80071c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071c8:	4291      	cmp	r1, r2
 80071ca:	d1f9      	bne.n	80071c0 <memcpy+0xe>
 80071cc:	bd10      	pop	{r4, pc}
	...

080071d0 <nanf>:
 80071d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80071d8 <nanf+0x8>
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	7fc00000 	.word	0x7fc00000

080071dc <__assert_func>:
 80071dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071de:	4614      	mov	r4, r2
 80071e0:	461a      	mov	r2, r3
 80071e2:	4b09      	ldr	r3, [pc, #36]	@ (8007208 <__assert_func+0x2c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4605      	mov	r5, r0
 80071e8:	68d8      	ldr	r0, [r3, #12]
 80071ea:	b954      	cbnz	r4, 8007202 <__assert_func+0x26>
 80071ec:	4b07      	ldr	r3, [pc, #28]	@ (800720c <__assert_func+0x30>)
 80071ee:	461c      	mov	r4, r3
 80071f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071f4:	9100      	str	r1, [sp, #0]
 80071f6:	462b      	mov	r3, r5
 80071f8:	4905      	ldr	r1, [pc, #20]	@ (8007210 <__assert_func+0x34>)
 80071fa:	f002 fdd5 	bl	8009da8 <fiprintf>
 80071fe:	f002 fecf 	bl	8009fa0 <abort>
 8007202:	4b04      	ldr	r3, [pc, #16]	@ (8007214 <__assert_func+0x38>)
 8007204:	e7f4      	b.n	80071f0 <__assert_func+0x14>
 8007206:	bf00      	nop
 8007208:	20000048 	.word	0x20000048
 800720c:	0800c841 	.word	0x0800c841
 8007210:	0800c813 	.word	0x0800c813
 8007214:	0800c806 	.word	0x0800c806

08007218 <quorem>:
 8007218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	6903      	ldr	r3, [r0, #16]
 800721e:	690c      	ldr	r4, [r1, #16]
 8007220:	42a3      	cmp	r3, r4
 8007222:	4607      	mov	r7, r0
 8007224:	db7e      	blt.n	8007324 <quorem+0x10c>
 8007226:	3c01      	subs	r4, #1
 8007228:	f101 0814 	add.w	r8, r1, #20
 800722c:	00a3      	lsls	r3, r4, #2
 800722e:	f100 0514 	add.w	r5, r0, #20
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800723e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007242:	3301      	adds	r3, #1
 8007244:	429a      	cmp	r2, r3
 8007246:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800724a:	fbb2 f6f3 	udiv	r6, r2, r3
 800724e:	d32e      	bcc.n	80072ae <quorem+0x96>
 8007250:	f04f 0a00 	mov.w	sl, #0
 8007254:	46c4      	mov	ip, r8
 8007256:	46ae      	mov	lr, r5
 8007258:	46d3      	mov	fp, sl
 800725a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800725e:	b298      	uxth	r0, r3
 8007260:	fb06 a000 	mla	r0, r6, r0, sl
 8007264:	0c02      	lsrs	r2, r0, #16
 8007266:	0c1b      	lsrs	r3, r3, #16
 8007268:	fb06 2303 	mla	r3, r6, r3, r2
 800726c:	f8de 2000 	ldr.w	r2, [lr]
 8007270:	b280      	uxth	r0, r0
 8007272:	b292      	uxth	r2, r2
 8007274:	1a12      	subs	r2, r2, r0
 8007276:	445a      	add	r2, fp
 8007278:	f8de 0000 	ldr.w	r0, [lr]
 800727c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007280:	b29b      	uxth	r3, r3
 8007282:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007286:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800728a:	b292      	uxth	r2, r2
 800728c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007290:	45e1      	cmp	r9, ip
 8007292:	f84e 2b04 	str.w	r2, [lr], #4
 8007296:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800729a:	d2de      	bcs.n	800725a <quorem+0x42>
 800729c:	9b00      	ldr	r3, [sp, #0]
 800729e:	58eb      	ldr	r3, [r5, r3]
 80072a0:	b92b      	cbnz	r3, 80072ae <quorem+0x96>
 80072a2:	9b01      	ldr	r3, [sp, #4]
 80072a4:	3b04      	subs	r3, #4
 80072a6:	429d      	cmp	r5, r3
 80072a8:	461a      	mov	r2, r3
 80072aa:	d32f      	bcc.n	800730c <quorem+0xf4>
 80072ac:	613c      	str	r4, [r7, #16]
 80072ae:	4638      	mov	r0, r7
 80072b0:	f001 f9c2 	bl	8008638 <__mcmp>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	db25      	blt.n	8007304 <quorem+0xec>
 80072b8:	4629      	mov	r1, r5
 80072ba:	2000      	movs	r0, #0
 80072bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80072c0:	f8d1 c000 	ldr.w	ip, [r1]
 80072c4:	fa1f fe82 	uxth.w	lr, r2
 80072c8:	fa1f f38c 	uxth.w	r3, ip
 80072cc:	eba3 030e 	sub.w	r3, r3, lr
 80072d0:	4403      	add	r3, r0
 80072d2:	0c12      	lsrs	r2, r2, #16
 80072d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80072d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80072dc:	b29b      	uxth	r3, r3
 80072de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072e2:	45c1      	cmp	r9, r8
 80072e4:	f841 3b04 	str.w	r3, [r1], #4
 80072e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072ec:	d2e6      	bcs.n	80072bc <quorem+0xa4>
 80072ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072f6:	b922      	cbnz	r2, 8007302 <quorem+0xea>
 80072f8:	3b04      	subs	r3, #4
 80072fa:	429d      	cmp	r5, r3
 80072fc:	461a      	mov	r2, r3
 80072fe:	d30b      	bcc.n	8007318 <quorem+0x100>
 8007300:	613c      	str	r4, [r7, #16]
 8007302:	3601      	adds	r6, #1
 8007304:	4630      	mov	r0, r6
 8007306:	b003      	add	sp, #12
 8007308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	3b04      	subs	r3, #4
 8007310:	2a00      	cmp	r2, #0
 8007312:	d1cb      	bne.n	80072ac <quorem+0x94>
 8007314:	3c01      	subs	r4, #1
 8007316:	e7c6      	b.n	80072a6 <quorem+0x8e>
 8007318:	6812      	ldr	r2, [r2, #0]
 800731a:	3b04      	subs	r3, #4
 800731c:	2a00      	cmp	r2, #0
 800731e:	d1ef      	bne.n	8007300 <quorem+0xe8>
 8007320:	3c01      	subs	r4, #1
 8007322:	e7ea      	b.n	80072fa <quorem+0xe2>
 8007324:	2000      	movs	r0, #0
 8007326:	e7ee      	b.n	8007306 <quorem+0xee>

08007328 <_dtoa_r>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	69c7      	ldr	r7, [r0, #28]
 800732e:	b099      	sub	sp, #100	@ 0x64
 8007330:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007334:	ec55 4b10 	vmov	r4, r5, d0
 8007338:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800733a:	9109      	str	r1, [sp, #36]	@ 0x24
 800733c:	4683      	mov	fp, r0
 800733e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007340:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007342:	b97f      	cbnz	r7, 8007364 <_dtoa_r+0x3c>
 8007344:	2010      	movs	r0, #16
 8007346:	f000 fdfd 	bl	8007f44 <malloc>
 800734a:	4602      	mov	r2, r0
 800734c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007350:	b920      	cbnz	r0, 800735c <_dtoa_r+0x34>
 8007352:	4ba7      	ldr	r3, [pc, #668]	@ (80075f0 <_dtoa_r+0x2c8>)
 8007354:	21ef      	movs	r1, #239	@ 0xef
 8007356:	48a7      	ldr	r0, [pc, #668]	@ (80075f4 <_dtoa_r+0x2cc>)
 8007358:	f7ff ff40 	bl	80071dc <__assert_func>
 800735c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007360:	6007      	str	r7, [r0, #0]
 8007362:	60c7      	str	r7, [r0, #12]
 8007364:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007368:	6819      	ldr	r1, [r3, #0]
 800736a:	b159      	cbz	r1, 8007384 <_dtoa_r+0x5c>
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	604a      	str	r2, [r1, #4]
 8007370:	2301      	movs	r3, #1
 8007372:	4093      	lsls	r3, r2
 8007374:	608b      	str	r3, [r1, #8]
 8007376:	4658      	mov	r0, fp
 8007378:	f000 feda 	bl	8008130 <_Bfree>
 800737c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	1e2b      	subs	r3, r5, #0
 8007386:	bfb9      	ittee	lt
 8007388:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800738c:	9303      	strlt	r3, [sp, #12]
 800738e:	2300      	movge	r3, #0
 8007390:	6033      	strge	r3, [r6, #0]
 8007392:	9f03      	ldr	r7, [sp, #12]
 8007394:	4b98      	ldr	r3, [pc, #608]	@ (80075f8 <_dtoa_r+0x2d0>)
 8007396:	bfbc      	itt	lt
 8007398:	2201      	movlt	r2, #1
 800739a:	6032      	strlt	r2, [r6, #0]
 800739c:	43bb      	bics	r3, r7
 800739e:	d112      	bne.n	80073c6 <_dtoa_r+0x9e>
 80073a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80073a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073ac:	4323      	orrs	r3, r4
 80073ae:	f000 854d 	beq.w	8007e4c <_dtoa_r+0xb24>
 80073b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80073b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800760c <_dtoa_r+0x2e4>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 854f 	beq.w	8007e5c <_dtoa_r+0xb34>
 80073be:	f10a 0303 	add.w	r3, sl, #3
 80073c2:	f000 bd49 	b.w	8007e58 <_dtoa_r+0xb30>
 80073c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073ca:	2200      	movs	r2, #0
 80073cc:	ec51 0b17 	vmov	r0, r1, d7
 80073d0:	2300      	movs	r3, #0
 80073d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80073d6:	f7f9 fb8f 	bl	8000af8 <__aeabi_dcmpeq>
 80073da:	4680      	mov	r8, r0
 80073dc:	b158      	cbz	r0, 80073f6 <_dtoa_r+0xce>
 80073de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80073e0:	2301      	movs	r3, #1
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80073e6:	b113      	cbz	r3, 80073ee <_dtoa_r+0xc6>
 80073e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80073ea:	4b84      	ldr	r3, [pc, #528]	@ (80075fc <_dtoa_r+0x2d4>)
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007610 <_dtoa_r+0x2e8>
 80073f2:	f000 bd33 	b.w	8007e5c <_dtoa_r+0xb34>
 80073f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80073fa:	aa16      	add	r2, sp, #88	@ 0x58
 80073fc:	a917      	add	r1, sp, #92	@ 0x5c
 80073fe:	4658      	mov	r0, fp
 8007400:	f001 fa3a 	bl	8008878 <__d2b>
 8007404:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007408:	4681      	mov	r9, r0
 800740a:	2e00      	cmp	r6, #0
 800740c:	d077      	beq.n	80074fe <_dtoa_r+0x1d6>
 800740e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007410:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800741c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007420:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007424:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007428:	4619      	mov	r1, r3
 800742a:	2200      	movs	r2, #0
 800742c:	4b74      	ldr	r3, [pc, #464]	@ (8007600 <_dtoa_r+0x2d8>)
 800742e:	f7f8 ff43 	bl	80002b8 <__aeabi_dsub>
 8007432:	a369      	add	r3, pc, #420	@ (adr r3, 80075d8 <_dtoa_r+0x2b0>)
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f7f9 f8f6 	bl	8000628 <__aeabi_dmul>
 800743c:	a368      	add	r3, pc, #416	@ (adr r3, 80075e0 <_dtoa_r+0x2b8>)
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f7f8 ff3b 	bl	80002bc <__adddf3>
 8007446:	4604      	mov	r4, r0
 8007448:	4630      	mov	r0, r6
 800744a:	460d      	mov	r5, r1
 800744c:	f7f9 f882 	bl	8000554 <__aeabi_i2d>
 8007450:	a365      	add	r3, pc, #404	@ (adr r3, 80075e8 <_dtoa_r+0x2c0>)
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	f7f9 f8e7 	bl	8000628 <__aeabi_dmul>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4620      	mov	r0, r4
 8007460:	4629      	mov	r1, r5
 8007462:	f7f8 ff2b 	bl	80002bc <__adddf3>
 8007466:	4604      	mov	r4, r0
 8007468:	460d      	mov	r5, r1
 800746a:	f7f9 fb8d 	bl	8000b88 <__aeabi_d2iz>
 800746e:	2200      	movs	r2, #0
 8007470:	4607      	mov	r7, r0
 8007472:	2300      	movs	r3, #0
 8007474:	4620      	mov	r0, r4
 8007476:	4629      	mov	r1, r5
 8007478:	f7f9 fb48 	bl	8000b0c <__aeabi_dcmplt>
 800747c:	b140      	cbz	r0, 8007490 <_dtoa_r+0x168>
 800747e:	4638      	mov	r0, r7
 8007480:	f7f9 f868 	bl	8000554 <__aeabi_i2d>
 8007484:	4622      	mov	r2, r4
 8007486:	462b      	mov	r3, r5
 8007488:	f7f9 fb36 	bl	8000af8 <__aeabi_dcmpeq>
 800748c:	b900      	cbnz	r0, 8007490 <_dtoa_r+0x168>
 800748e:	3f01      	subs	r7, #1
 8007490:	2f16      	cmp	r7, #22
 8007492:	d851      	bhi.n	8007538 <_dtoa_r+0x210>
 8007494:	4b5b      	ldr	r3, [pc, #364]	@ (8007604 <_dtoa_r+0x2dc>)
 8007496:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074a2:	f7f9 fb33 	bl	8000b0c <__aeabi_dcmplt>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d048      	beq.n	800753c <_dtoa_r+0x214>
 80074aa:	3f01      	subs	r7, #1
 80074ac:	2300      	movs	r3, #0
 80074ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80074b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80074b2:	1b9b      	subs	r3, r3, r6
 80074b4:	1e5a      	subs	r2, r3, #1
 80074b6:	bf44      	itt	mi
 80074b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80074bc:	2300      	movmi	r3, #0
 80074be:	9208      	str	r2, [sp, #32]
 80074c0:	bf54      	ite	pl
 80074c2:	f04f 0800 	movpl.w	r8, #0
 80074c6:	9308      	strmi	r3, [sp, #32]
 80074c8:	2f00      	cmp	r7, #0
 80074ca:	db39      	blt.n	8007540 <_dtoa_r+0x218>
 80074cc:	9b08      	ldr	r3, [sp, #32]
 80074ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80074d0:	443b      	add	r3, r7
 80074d2:	9308      	str	r3, [sp, #32]
 80074d4:	2300      	movs	r3, #0
 80074d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074da:	2b09      	cmp	r3, #9
 80074dc:	d864      	bhi.n	80075a8 <_dtoa_r+0x280>
 80074de:	2b05      	cmp	r3, #5
 80074e0:	bfc4      	itt	gt
 80074e2:	3b04      	subgt	r3, #4
 80074e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80074e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074e8:	f1a3 0302 	sub.w	r3, r3, #2
 80074ec:	bfcc      	ite	gt
 80074ee:	2400      	movgt	r4, #0
 80074f0:	2401      	movle	r4, #1
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d863      	bhi.n	80075be <_dtoa_r+0x296>
 80074f6:	e8df f003 	tbb	[pc, r3]
 80074fa:	372a      	.short	0x372a
 80074fc:	5535      	.short	0x5535
 80074fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007502:	441e      	add	r6, r3
 8007504:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007508:	2b20      	cmp	r3, #32
 800750a:	bfc1      	itttt	gt
 800750c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007510:	409f      	lslgt	r7, r3
 8007512:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007516:	fa24 f303 	lsrgt.w	r3, r4, r3
 800751a:	bfd6      	itet	le
 800751c:	f1c3 0320 	rsble	r3, r3, #32
 8007520:	ea47 0003 	orrgt.w	r0, r7, r3
 8007524:	fa04 f003 	lslle.w	r0, r4, r3
 8007528:	f7f9 f804 	bl	8000534 <__aeabi_ui2d>
 800752c:	2201      	movs	r2, #1
 800752e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007532:	3e01      	subs	r6, #1
 8007534:	9214      	str	r2, [sp, #80]	@ 0x50
 8007536:	e777      	b.n	8007428 <_dtoa_r+0x100>
 8007538:	2301      	movs	r3, #1
 800753a:	e7b8      	b.n	80074ae <_dtoa_r+0x186>
 800753c:	9012      	str	r0, [sp, #72]	@ 0x48
 800753e:	e7b7      	b.n	80074b0 <_dtoa_r+0x188>
 8007540:	427b      	negs	r3, r7
 8007542:	930a      	str	r3, [sp, #40]	@ 0x28
 8007544:	2300      	movs	r3, #0
 8007546:	eba8 0807 	sub.w	r8, r8, r7
 800754a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800754c:	e7c4      	b.n	80074d8 <_dtoa_r+0x1b0>
 800754e:	2300      	movs	r3, #0
 8007550:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007552:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007554:	2b00      	cmp	r3, #0
 8007556:	dc35      	bgt.n	80075c4 <_dtoa_r+0x29c>
 8007558:	2301      	movs	r3, #1
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	9307      	str	r3, [sp, #28]
 800755e:	461a      	mov	r2, r3
 8007560:	920e      	str	r2, [sp, #56]	@ 0x38
 8007562:	e00b      	b.n	800757c <_dtoa_r+0x254>
 8007564:	2301      	movs	r3, #1
 8007566:	e7f3      	b.n	8007550 <_dtoa_r+0x228>
 8007568:	2300      	movs	r3, #0
 800756a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800756c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800756e:	18fb      	adds	r3, r7, r3
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	3301      	adds	r3, #1
 8007574:	2b01      	cmp	r3, #1
 8007576:	9307      	str	r3, [sp, #28]
 8007578:	bfb8      	it	lt
 800757a:	2301      	movlt	r3, #1
 800757c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007580:	2100      	movs	r1, #0
 8007582:	2204      	movs	r2, #4
 8007584:	f102 0514 	add.w	r5, r2, #20
 8007588:	429d      	cmp	r5, r3
 800758a:	d91f      	bls.n	80075cc <_dtoa_r+0x2a4>
 800758c:	6041      	str	r1, [r0, #4]
 800758e:	4658      	mov	r0, fp
 8007590:	f000 fd8e 	bl	80080b0 <_Balloc>
 8007594:	4682      	mov	sl, r0
 8007596:	2800      	cmp	r0, #0
 8007598:	d13c      	bne.n	8007614 <_dtoa_r+0x2ec>
 800759a:	4b1b      	ldr	r3, [pc, #108]	@ (8007608 <_dtoa_r+0x2e0>)
 800759c:	4602      	mov	r2, r0
 800759e:	f240 11af 	movw	r1, #431	@ 0x1af
 80075a2:	e6d8      	b.n	8007356 <_dtoa_r+0x2e>
 80075a4:	2301      	movs	r3, #1
 80075a6:	e7e0      	b.n	800756a <_dtoa_r+0x242>
 80075a8:	2401      	movs	r4, #1
 80075aa:	2300      	movs	r3, #0
 80075ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80075b0:	f04f 33ff 	mov.w	r3, #4294967295
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	9307      	str	r3, [sp, #28]
 80075b8:	2200      	movs	r2, #0
 80075ba:	2312      	movs	r3, #18
 80075bc:	e7d0      	b.n	8007560 <_dtoa_r+0x238>
 80075be:	2301      	movs	r3, #1
 80075c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075c2:	e7f5      	b.n	80075b0 <_dtoa_r+0x288>
 80075c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	9307      	str	r3, [sp, #28]
 80075ca:	e7d7      	b.n	800757c <_dtoa_r+0x254>
 80075cc:	3101      	adds	r1, #1
 80075ce:	0052      	lsls	r2, r2, #1
 80075d0:	e7d8      	b.n	8007584 <_dtoa_r+0x25c>
 80075d2:	bf00      	nop
 80075d4:	f3af 8000 	nop.w
 80075d8:	636f4361 	.word	0x636f4361
 80075dc:	3fd287a7 	.word	0x3fd287a7
 80075e0:	8b60c8b3 	.word	0x8b60c8b3
 80075e4:	3fc68a28 	.word	0x3fc68a28
 80075e8:	509f79fb 	.word	0x509f79fb
 80075ec:	3fd34413 	.word	0x3fd34413
 80075f0:	0800c795 	.word	0x0800c795
 80075f4:	0800c84f 	.word	0x0800c84f
 80075f8:	7ff00000 	.word	0x7ff00000
 80075fc:	0800c76d 	.word	0x0800c76d
 8007600:	3ff80000 	.word	0x3ff80000
 8007604:	0800c948 	.word	0x0800c948
 8007608:	0800c8a7 	.word	0x0800c8a7
 800760c:	0800c84b 	.word	0x0800c84b
 8007610:	0800c76c 	.word	0x0800c76c
 8007614:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007618:	6018      	str	r0, [r3, #0]
 800761a:	9b07      	ldr	r3, [sp, #28]
 800761c:	2b0e      	cmp	r3, #14
 800761e:	f200 80a4 	bhi.w	800776a <_dtoa_r+0x442>
 8007622:	2c00      	cmp	r4, #0
 8007624:	f000 80a1 	beq.w	800776a <_dtoa_r+0x442>
 8007628:	2f00      	cmp	r7, #0
 800762a:	dd33      	ble.n	8007694 <_dtoa_r+0x36c>
 800762c:	4bad      	ldr	r3, [pc, #692]	@ (80078e4 <_dtoa_r+0x5bc>)
 800762e:	f007 020f 	and.w	r2, r7, #15
 8007632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007636:	ed93 7b00 	vldr	d7, [r3]
 800763a:	05f8      	lsls	r0, r7, #23
 800763c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007640:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007644:	d516      	bpl.n	8007674 <_dtoa_r+0x34c>
 8007646:	4ba8      	ldr	r3, [pc, #672]	@ (80078e8 <_dtoa_r+0x5c0>)
 8007648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800764c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007650:	f7f9 f914 	bl	800087c <__aeabi_ddiv>
 8007654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007658:	f004 040f 	and.w	r4, r4, #15
 800765c:	2603      	movs	r6, #3
 800765e:	4da2      	ldr	r5, [pc, #648]	@ (80078e8 <_dtoa_r+0x5c0>)
 8007660:	b954      	cbnz	r4, 8007678 <_dtoa_r+0x350>
 8007662:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800766a:	f7f9 f907 	bl	800087c <__aeabi_ddiv>
 800766e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007672:	e028      	b.n	80076c6 <_dtoa_r+0x39e>
 8007674:	2602      	movs	r6, #2
 8007676:	e7f2      	b.n	800765e <_dtoa_r+0x336>
 8007678:	07e1      	lsls	r1, r4, #31
 800767a:	d508      	bpl.n	800768e <_dtoa_r+0x366>
 800767c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007680:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007684:	f7f8 ffd0 	bl	8000628 <__aeabi_dmul>
 8007688:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800768c:	3601      	adds	r6, #1
 800768e:	1064      	asrs	r4, r4, #1
 8007690:	3508      	adds	r5, #8
 8007692:	e7e5      	b.n	8007660 <_dtoa_r+0x338>
 8007694:	f000 80d2 	beq.w	800783c <_dtoa_r+0x514>
 8007698:	427c      	negs	r4, r7
 800769a:	4b92      	ldr	r3, [pc, #584]	@ (80078e4 <_dtoa_r+0x5bc>)
 800769c:	4d92      	ldr	r5, [pc, #584]	@ (80078e8 <_dtoa_r+0x5c0>)
 800769e:	f004 020f 	and.w	r2, r4, #15
 80076a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076ae:	f7f8 ffbb 	bl	8000628 <__aeabi_dmul>
 80076b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076b6:	1124      	asrs	r4, r4, #4
 80076b8:	2300      	movs	r3, #0
 80076ba:	2602      	movs	r6, #2
 80076bc:	2c00      	cmp	r4, #0
 80076be:	f040 80b2 	bne.w	8007826 <_dtoa_r+0x4fe>
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1d3      	bne.n	800766e <_dtoa_r+0x346>
 80076c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80076c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 80b7 	beq.w	8007840 <_dtoa_r+0x518>
 80076d2:	4b86      	ldr	r3, [pc, #536]	@ (80078ec <_dtoa_r+0x5c4>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	4620      	mov	r0, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	f7f9 fa17 	bl	8000b0c <__aeabi_dcmplt>
 80076de:	2800      	cmp	r0, #0
 80076e0:	f000 80ae 	beq.w	8007840 <_dtoa_r+0x518>
 80076e4:	9b07      	ldr	r3, [sp, #28]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 80aa 	beq.w	8007840 <_dtoa_r+0x518>
 80076ec:	9b00      	ldr	r3, [sp, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	dd37      	ble.n	8007762 <_dtoa_r+0x43a>
 80076f2:	1e7b      	subs	r3, r7, #1
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	4620      	mov	r0, r4
 80076f8:	4b7d      	ldr	r3, [pc, #500]	@ (80078f0 <_dtoa_r+0x5c8>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	4629      	mov	r1, r5
 80076fe:	f7f8 ff93 	bl	8000628 <__aeabi_dmul>
 8007702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007706:	9c00      	ldr	r4, [sp, #0]
 8007708:	3601      	adds	r6, #1
 800770a:	4630      	mov	r0, r6
 800770c:	f7f8 ff22 	bl	8000554 <__aeabi_i2d>
 8007710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007714:	f7f8 ff88 	bl	8000628 <__aeabi_dmul>
 8007718:	4b76      	ldr	r3, [pc, #472]	@ (80078f4 <_dtoa_r+0x5cc>)
 800771a:	2200      	movs	r2, #0
 800771c:	f7f8 fdce 	bl	80002bc <__adddf3>
 8007720:	4605      	mov	r5, r0
 8007722:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007726:	2c00      	cmp	r4, #0
 8007728:	f040 808d 	bne.w	8007846 <_dtoa_r+0x51e>
 800772c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007730:	4b71      	ldr	r3, [pc, #452]	@ (80078f8 <_dtoa_r+0x5d0>)
 8007732:	2200      	movs	r2, #0
 8007734:	f7f8 fdc0 	bl	80002b8 <__aeabi_dsub>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007740:	462a      	mov	r2, r5
 8007742:	4633      	mov	r3, r6
 8007744:	f7f9 fa00 	bl	8000b48 <__aeabi_dcmpgt>
 8007748:	2800      	cmp	r0, #0
 800774a:	f040 828b 	bne.w	8007c64 <_dtoa_r+0x93c>
 800774e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007752:	462a      	mov	r2, r5
 8007754:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007758:	f7f9 f9d8 	bl	8000b0c <__aeabi_dcmplt>
 800775c:	2800      	cmp	r0, #0
 800775e:	f040 8128 	bne.w	80079b2 <_dtoa_r+0x68a>
 8007762:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007766:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800776a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800776c:	2b00      	cmp	r3, #0
 800776e:	f2c0 815a 	blt.w	8007a26 <_dtoa_r+0x6fe>
 8007772:	2f0e      	cmp	r7, #14
 8007774:	f300 8157 	bgt.w	8007a26 <_dtoa_r+0x6fe>
 8007778:	4b5a      	ldr	r3, [pc, #360]	@ (80078e4 <_dtoa_r+0x5bc>)
 800777a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800777e:	ed93 7b00 	vldr	d7, [r3]
 8007782:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007784:	2b00      	cmp	r3, #0
 8007786:	ed8d 7b00 	vstr	d7, [sp]
 800778a:	da03      	bge.n	8007794 <_dtoa_r+0x46c>
 800778c:	9b07      	ldr	r3, [sp, #28]
 800778e:	2b00      	cmp	r3, #0
 8007790:	f340 8101 	ble.w	8007996 <_dtoa_r+0x66e>
 8007794:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007798:	4656      	mov	r6, sl
 800779a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800779e:	4620      	mov	r0, r4
 80077a0:	4629      	mov	r1, r5
 80077a2:	f7f9 f86b 	bl	800087c <__aeabi_ddiv>
 80077a6:	f7f9 f9ef 	bl	8000b88 <__aeabi_d2iz>
 80077aa:	4680      	mov	r8, r0
 80077ac:	f7f8 fed2 	bl	8000554 <__aeabi_i2d>
 80077b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077b4:	f7f8 ff38 	bl	8000628 <__aeabi_dmul>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4620      	mov	r0, r4
 80077be:	4629      	mov	r1, r5
 80077c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80077c4:	f7f8 fd78 	bl	80002b8 <__aeabi_dsub>
 80077c8:	f806 4b01 	strb.w	r4, [r6], #1
 80077cc:	9d07      	ldr	r5, [sp, #28]
 80077ce:	eba6 040a 	sub.w	r4, r6, sl
 80077d2:	42a5      	cmp	r5, r4
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	f040 8117 	bne.w	8007a0a <_dtoa_r+0x6e2>
 80077dc:	f7f8 fd6e 	bl	80002bc <__adddf3>
 80077e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077e4:	4604      	mov	r4, r0
 80077e6:	460d      	mov	r5, r1
 80077e8:	f7f9 f9ae 	bl	8000b48 <__aeabi_dcmpgt>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	f040 80f9 	bne.w	80079e4 <_dtoa_r+0x6bc>
 80077f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077f6:	4620      	mov	r0, r4
 80077f8:	4629      	mov	r1, r5
 80077fa:	f7f9 f97d 	bl	8000af8 <__aeabi_dcmpeq>
 80077fe:	b118      	cbz	r0, 8007808 <_dtoa_r+0x4e0>
 8007800:	f018 0f01 	tst.w	r8, #1
 8007804:	f040 80ee 	bne.w	80079e4 <_dtoa_r+0x6bc>
 8007808:	4649      	mov	r1, r9
 800780a:	4658      	mov	r0, fp
 800780c:	f000 fc90 	bl	8008130 <_Bfree>
 8007810:	2300      	movs	r3, #0
 8007812:	7033      	strb	r3, [r6, #0]
 8007814:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007816:	3701      	adds	r7, #1
 8007818:	601f      	str	r7, [r3, #0]
 800781a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 831d 	beq.w	8007e5c <_dtoa_r+0xb34>
 8007822:	601e      	str	r6, [r3, #0]
 8007824:	e31a      	b.n	8007e5c <_dtoa_r+0xb34>
 8007826:	07e2      	lsls	r2, r4, #31
 8007828:	d505      	bpl.n	8007836 <_dtoa_r+0x50e>
 800782a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800782e:	f7f8 fefb 	bl	8000628 <__aeabi_dmul>
 8007832:	3601      	adds	r6, #1
 8007834:	2301      	movs	r3, #1
 8007836:	1064      	asrs	r4, r4, #1
 8007838:	3508      	adds	r5, #8
 800783a:	e73f      	b.n	80076bc <_dtoa_r+0x394>
 800783c:	2602      	movs	r6, #2
 800783e:	e742      	b.n	80076c6 <_dtoa_r+0x39e>
 8007840:	9c07      	ldr	r4, [sp, #28]
 8007842:	9704      	str	r7, [sp, #16]
 8007844:	e761      	b.n	800770a <_dtoa_r+0x3e2>
 8007846:	4b27      	ldr	r3, [pc, #156]	@ (80078e4 <_dtoa_r+0x5bc>)
 8007848:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800784a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800784e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007852:	4454      	add	r4, sl
 8007854:	2900      	cmp	r1, #0
 8007856:	d053      	beq.n	8007900 <_dtoa_r+0x5d8>
 8007858:	4928      	ldr	r1, [pc, #160]	@ (80078fc <_dtoa_r+0x5d4>)
 800785a:	2000      	movs	r0, #0
 800785c:	f7f9 f80e 	bl	800087c <__aeabi_ddiv>
 8007860:	4633      	mov	r3, r6
 8007862:	462a      	mov	r2, r5
 8007864:	f7f8 fd28 	bl	80002b8 <__aeabi_dsub>
 8007868:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800786c:	4656      	mov	r6, sl
 800786e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007872:	f7f9 f989 	bl	8000b88 <__aeabi_d2iz>
 8007876:	4605      	mov	r5, r0
 8007878:	f7f8 fe6c 	bl	8000554 <__aeabi_i2d>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007884:	f7f8 fd18 	bl	80002b8 <__aeabi_dsub>
 8007888:	3530      	adds	r5, #48	@ 0x30
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007892:	f806 5b01 	strb.w	r5, [r6], #1
 8007896:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800789a:	f7f9 f937 	bl	8000b0c <__aeabi_dcmplt>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d171      	bne.n	8007986 <_dtoa_r+0x65e>
 80078a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078a6:	4911      	ldr	r1, [pc, #68]	@ (80078ec <_dtoa_r+0x5c4>)
 80078a8:	2000      	movs	r0, #0
 80078aa:	f7f8 fd05 	bl	80002b8 <__aeabi_dsub>
 80078ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078b2:	f7f9 f92b 	bl	8000b0c <__aeabi_dcmplt>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	f040 8095 	bne.w	80079e6 <_dtoa_r+0x6be>
 80078bc:	42a6      	cmp	r6, r4
 80078be:	f43f af50 	beq.w	8007762 <_dtoa_r+0x43a>
 80078c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078c6:	4b0a      	ldr	r3, [pc, #40]	@ (80078f0 <_dtoa_r+0x5c8>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	f7f8 fead 	bl	8000628 <__aeabi_dmul>
 80078ce:	4b08      	ldr	r3, [pc, #32]	@ (80078f0 <_dtoa_r+0x5c8>)
 80078d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078d4:	2200      	movs	r2, #0
 80078d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078da:	f7f8 fea5 	bl	8000628 <__aeabi_dmul>
 80078de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078e2:	e7c4      	b.n	800786e <_dtoa_r+0x546>
 80078e4:	0800c948 	.word	0x0800c948
 80078e8:	0800c920 	.word	0x0800c920
 80078ec:	3ff00000 	.word	0x3ff00000
 80078f0:	40240000 	.word	0x40240000
 80078f4:	401c0000 	.word	0x401c0000
 80078f8:	40140000 	.word	0x40140000
 80078fc:	3fe00000 	.word	0x3fe00000
 8007900:	4631      	mov	r1, r6
 8007902:	4628      	mov	r0, r5
 8007904:	f7f8 fe90 	bl	8000628 <__aeabi_dmul>
 8007908:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800790c:	9415      	str	r4, [sp, #84]	@ 0x54
 800790e:	4656      	mov	r6, sl
 8007910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007914:	f7f9 f938 	bl	8000b88 <__aeabi_d2iz>
 8007918:	4605      	mov	r5, r0
 800791a:	f7f8 fe1b 	bl	8000554 <__aeabi_i2d>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007926:	f7f8 fcc7 	bl	80002b8 <__aeabi_dsub>
 800792a:	3530      	adds	r5, #48	@ 0x30
 800792c:	f806 5b01 	strb.w	r5, [r6], #1
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	42a6      	cmp	r6, r4
 8007936:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	d124      	bne.n	800798a <_dtoa_r+0x662>
 8007940:	4bac      	ldr	r3, [pc, #688]	@ (8007bf4 <_dtoa_r+0x8cc>)
 8007942:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007946:	f7f8 fcb9 	bl	80002bc <__adddf3>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007952:	f7f9 f8f9 	bl	8000b48 <__aeabi_dcmpgt>
 8007956:	2800      	cmp	r0, #0
 8007958:	d145      	bne.n	80079e6 <_dtoa_r+0x6be>
 800795a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800795e:	49a5      	ldr	r1, [pc, #660]	@ (8007bf4 <_dtoa_r+0x8cc>)
 8007960:	2000      	movs	r0, #0
 8007962:	f7f8 fca9 	bl	80002b8 <__aeabi_dsub>
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800796e:	f7f9 f8cd 	bl	8000b0c <__aeabi_dcmplt>
 8007972:	2800      	cmp	r0, #0
 8007974:	f43f aef5 	beq.w	8007762 <_dtoa_r+0x43a>
 8007978:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800797a:	1e73      	subs	r3, r6, #1
 800797c:	9315      	str	r3, [sp, #84]	@ 0x54
 800797e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007982:	2b30      	cmp	r3, #48	@ 0x30
 8007984:	d0f8      	beq.n	8007978 <_dtoa_r+0x650>
 8007986:	9f04      	ldr	r7, [sp, #16]
 8007988:	e73e      	b.n	8007808 <_dtoa_r+0x4e0>
 800798a:	4b9b      	ldr	r3, [pc, #620]	@ (8007bf8 <_dtoa_r+0x8d0>)
 800798c:	f7f8 fe4c 	bl	8000628 <__aeabi_dmul>
 8007990:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007994:	e7bc      	b.n	8007910 <_dtoa_r+0x5e8>
 8007996:	d10c      	bne.n	80079b2 <_dtoa_r+0x68a>
 8007998:	4b98      	ldr	r3, [pc, #608]	@ (8007bfc <_dtoa_r+0x8d4>)
 800799a:	2200      	movs	r2, #0
 800799c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079a0:	f7f8 fe42 	bl	8000628 <__aeabi_dmul>
 80079a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079a8:	f7f9 f8c4 	bl	8000b34 <__aeabi_dcmpge>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	f000 8157 	beq.w	8007c60 <_dtoa_r+0x938>
 80079b2:	2400      	movs	r4, #0
 80079b4:	4625      	mov	r5, r4
 80079b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079b8:	43db      	mvns	r3, r3
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	4656      	mov	r6, sl
 80079be:	2700      	movs	r7, #0
 80079c0:	4621      	mov	r1, r4
 80079c2:	4658      	mov	r0, fp
 80079c4:	f000 fbb4 	bl	8008130 <_Bfree>
 80079c8:	2d00      	cmp	r5, #0
 80079ca:	d0dc      	beq.n	8007986 <_dtoa_r+0x65e>
 80079cc:	b12f      	cbz	r7, 80079da <_dtoa_r+0x6b2>
 80079ce:	42af      	cmp	r7, r5
 80079d0:	d003      	beq.n	80079da <_dtoa_r+0x6b2>
 80079d2:	4639      	mov	r1, r7
 80079d4:	4658      	mov	r0, fp
 80079d6:	f000 fbab 	bl	8008130 <_Bfree>
 80079da:	4629      	mov	r1, r5
 80079dc:	4658      	mov	r0, fp
 80079de:	f000 fba7 	bl	8008130 <_Bfree>
 80079e2:	e7d0      	b.n	8007986 <_dtoa_r+0x65e>
 80079e4:	9704      	str	r7, [sp, #16]
 80079e6:	4633      	mov	r3, r6
 80079e8:	461e      	mov	r6, r3
 80079ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079ee:	2a39      	cmp	r2, #57	@ 0x39
 80079f0:	d107      	bne.n	8007a02 <_dtoa_r+0x6da>
 80079f2:	459a      	cmp	sl, r3
 80079f4:	d1f8      	bne.n	80079e8 <_dtoa_r+0x6c0>
 80079f6:	9a04      	ldr	r2, [sp, #16]
 80079f8:	3201      	adds	r2, #1
 80079fa:	9204      	str	r2, [sp, #16]
 80079fc:	2230      	movs	r2, #48	@ 0x30
 80079fe:	f88a 2000 	strb.w	r2, [sl]
 8007a02:	781a      	ldrb	r2, [r3, #0]
 8007a04:	3201      	adds	r2, #1
 8007a06:	701a      	strb	r2, [r3, #0]
 8007a08:	e7bd      	b.n	8007986 <_dtoa_r+0x65e>
 8007a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8007bf8 <_dtoa_r+0x8d0>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f7f8 fe0b 	bl	8000628 <__aeabi_dmul>
 8007a12:	2200      	movs	r2, #0
 8007a14:	2300      	movs	r3, #0
 8007a16:	4604      	mov	r4, r0
 8007a18:	460d      	mov	r5, r1
 8007a1a:	f7f9 f86d 	bl	8000af8 <__aeabi_dcmpeq>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f43f aebb 	beq.w	800779a <_dtoa_r+0x472>
 8007a24:	e6f0      	b.n	8007808 <_dtoa_r+0x4e0>
 8007a26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007a28:	2a00      	cmp	r2, #0
 8007a2a:	f000 80db 	beq.w	8007be4 <_dtoa_r+0x8bc>
 8007a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a30:	2a01      	cmp	r2, #1
 8007a32:	f300 80bf 	bgt.w	8007bb4 <_dtoa_r+0x88c>
 8007a36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007a38:	2a00      	cmp	r2, #0
 8007a3a:	f000 80b7 	beq.w	8007bac <_dtoa_r+0x884>
 8007a3e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007a42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a44:	4646      	mov	r6, r8
 8007a46:	9a08      	ldr	r2, [sp, #32]
 8007a48:	2101      	movs	r1, #1
 8007a4a:	441a      	add	r2, r3
 8007a4c:	4658      	mov	r0, fp
 8007a4e:	4498      	add	r8, r3
 8007a50:	9208      	str	r2, [sp, #32]
 8007a52:	f000 fc6b 	bl	800832c <__i2b>
 8007a56:	4605      	mov	r5, r0
 8007a58:	b15e      	cbz	r6, 8007a72 <_dtoa_r+0x74a>
 8007a5a:	9b08      	ldr	r3, [sp, #32]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dd08      	ble.n	8007a72 <_dtoa_r+0x74a>
 8007a60:	42b3      	cmp	r3, r6
 8007a62:	9a08      	ldr	r2, [sp, #32]
 8007a64:	bfa8      	it	ge
 8007a66:	4633      	movge	r3, r6
 8007a68:	eba8 0803 	sub.w	r8, r8, r3
 8007a6c:	1af6      	subs	r6, r6, r3
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	9308      	str	r3, [sp, #32]
 8007a72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a74:	b1f3      	cbz	r3, 8007ab4 <_dtoa_r+0x78c>
 8007a76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 80b7 	beq.w	8007bec <_dtoa_r+0x8c4>
 8007a7e:	b18c      	cbz	r4, 8007aa4 <_dtoa_r+0x77c>
 8007a80:	4629      	mov	r1, r5
 8007a82:	4622      	mov	r2, r4
 8007a84:	4658      	mov	r0, fp
 8007a86:	f000 fd11 	bl	80084ac <__pow5mult>
 8007a8a:	464a      	mov	r2, r9
 8007a8c:	4601      	mov	r1, r0
 8007a8e:	4605      	mov	r5, r0
 8007a90:	4658      	mov	r0, fp
 8007a92:	f000 fc61 	bl	8008358 <__multiply>
 8007a96:	4649      	mov	r1, r9
 8007a98:	9004      	str	r0, [sp, #16]
 8007a9a:	4658      	mov	r0, fp
 8007a9c:	f000 fb48 	bl	8008130 <_Bfree>
 8007aa0:	9b04      	ldr	r3, [sp, #16]
 8007aa2:	4699      	mov	r9, r3
 8007aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aa6:	1b1a      	subs	r2, r3, r4
 8007aa8:	d004      	beq.n	8007ab4 <_dtoa_r+0x78c>
 8007aaa:	4649      	mov	r1, r9
 8007aac:	4658      	mov	r0, fp
 8007aae:	f000 fcfd 	bl	80084ac <__pow5mult>
 8007ab2:	4681      	mov	r9, r0
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	4658      	mov	r0, fp
 8007ab8:	f000 fc38 	bl	800832c <__i2b>
 8007abc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007abe:	4604      	mov	r4, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 81cf 	beq.w	8007e64 <_dtoa_r+0xb3c>
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	4601      	mov	r1, r0
 8007aca:	4658      	mov	r0, fp
 8007acc:	f000 fcee 	bl	80084ac <__pow5mult>
 8007ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	f300 8095 	bgt.w	8007c04 <_dtoa_r+0x8dc>
 8007ada:	9b02      	ldr	r3, [sp, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f040 8087 	bne.w	8007bf0 <_dtoa_r+0x8c8>
 8007ae2:	9b03      	ldr	r3, [sp, #12]
 8007ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f040 8089 	bne.w	8007c00 <_dtoa_r+0x8d8>
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007af4:	0d1b      	lsrs	r3, r3, #20
 8007af6:	051b      	lsls	r3, r3, #20
 8007af8:	b12b      	cbz	r3, 8007b06 <_dtoa_r+0x7de>
 8007afa:	9b08      	ldr	r3, [sp, #32]
 8007afc:	3301      	adds	r3, #1
 8007afe:	9308      	str	r3, [sp, #32]
 8007b00:	f108 0801 	add.w	r8, r8, #1
 8007b04:	2301      	movs	r3, #1
 8007b06:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 81b0 	beq.w	8007e70 <_dtoa_r+0xb48>
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b16:	6918      	ldr	r0, [r3, #16]
 8007b18:	f000 fbbc 	bl	8008294 <__hi0bits>
 8007b1c:	f1c0 0020 	rsb	r0, r0, #32
 8007b20:	9b08      	ldr	r3, [sp, #32]
 8007b22:	4418      	add	r0, r3
 8007b24:	f010 001f 	ands.w	r0, r0, #31
 8007b28:	d077      	beq.n	8007c1a <_dtoa_r+0x8f2>
 8007b2a:	f1c0 0320 	rsb	r3, r0, #32
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	dd6b      	ble.n	8007c0a <_dtoa_r+0x8e2>
 8007b32:	9b08      	ldr	r3, [sp, #32]
 8007b34:	f1c0 001c 	rsb	r0, r0, #28
 8007b38:	4403      	add	r3, r0
 8007b3a:	4480      	add	r8, r0
 8007b3c:	4406      	add	r6, r0
 8007b3e:	9308      	str	r3, [sp, #32]
 8007b40:	f1b8 0f00 	cmp.w	r8, #0
 8007b44:	dd05      	ble.n	8007b52 <_dtoa_r+0x82a>
 8007b46:	4649      	mov	r1, r9
 8007b48:	4642      	mov	r2, r8
 8007b4a:	4658      	mov	r0, fp
 8007b4c:	f000 fd08 	bl	8008560 <__lshift>
 8007b50:	4681      	mov	r9, r0
 8007b52:	9b08      	ldr	r3, [sp, #32]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dd05      	ble.n	8007b64 <_dtoa_r+0x83c>
 8007b58:	4621      	mov	r1, r4
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	4658      	mov	r0, fp
 8007b5e:	f000 fcff 	bl	8008560 <__lshift>
 8007b62:	4604      	mov	r4, r0
 8007b64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d059      	beq.n	8007c1e <_dtoa_r+0x8f6>
 8007b6a:	4621      	mov	r1, r4
 8007b6c:	4648      	mov	r0, r9
 8007b6e:	f000 fd63 	bl	8008638 <__mcmp>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	da53      	bge.n	8007c1e <_dtoa_r+0x8f6>
 8007b76:	1e7b      	subs	r3, r7, #1
 8007b78:	9304      	str	r3, [sp, #16]
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	220a      	movs	r2, #10
 8007b80:	4658      	mov	r0, fp
 8007b82:	f000 faf7 	bl	8008174 <__multadd>
 8007b86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b88:	4681      	mov	r9, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 8172 	beq.w	8007e74 <_dtoa_r+0xb4c>
 8007b90:	2300      	movs	r3, #0
 8007b92:	4629      	mov	r1, r5
 8007b94:	220a      	movs	r2, #10
 8007b96:	4658      	mov	r0, fp
 8007b98:	f000 faec 	bl	8008174 <__multadd>
 8007b9c:	9b00      	ldr	r3, [sp, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	dc67      	bgt.n	8007c74 <_dtoa_r+0x94c>
 8007ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	dc41      	bgt.n	8007c2e <_dtoa_r+0x906>
 8007baa:	e063      	b.n	8007c74 <_dtoa_r+0x94c>
 8007bac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007bae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007bb2:	e746      	b.n	8007a42 <_dtoa_r+0x71a>
 8007bb4:	9b07      	ldr	r3, [sp, #28]
 8007bb6:	1e5c      	subs	r4, r3, #1
 8007bb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bba:	42a3      	cmp	r3, r4
 8007bbc:	bfbf      	itttt	lt
 8007bbe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007bc0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007bc2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007bc4:	1ae3      	sublt	r3, r4, r3
 8007bc6:	bfb4      	ite	lt
 8007bc8:	18d2      	addlt	r2, r2, r3
 8007bca:	1b1c      	subge	r4, r3, r4
 8007bcc:	9b07      	ldr	r3, [sp, #28]
 8007bce:	bfbc      	itt	lt
 8007bd0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007bd2:	2400      	movlt	r4, #0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bfb5      	itete	lt
 8007bd8:	eba8 0603 	sublt.w	r6, r8, r3
 8007bdc:	9b07      	ldrge	r3, [sp, #28]
 8007bde:	2300      	movlt	r3, #0
 8007be0:	4646      	movge	r6, r8
 8007be2:	e730      	b.n	8007a46 <_dtoa_r+0x71e>
 8007be4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007be6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007be8:	4646      	mov	r6, r8
 8007bea:	e735      	b.n	8007a58 <_dtoa_r+0x730>
 8007bec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bee:	e75c      	b.n	8007aaa <_dtoa_r+0x782>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e788      	b.n	8007b06 <_dtoa_r+0x7de>
 8007bf4:	3fe00000 	.word	0x3fe00000
 8007bf8:	40240000 	.word	0x40240000
 8007bfc:	40140000 	.word	0x40140000
 8007c00:	9b02      	ldr	r3, [sp, #8]
 8007c02:	e780      	b.n	8007b06 <_dtoa_r+0x7de>
 8007c04:	2300      	movs	r3, #0
 8007c06:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c08:	e782      	b.n	8007b10 <_dtoa_r+0x7e8>
 8007c0a:	d099      	beq.n	8007b40 <_dtoa_r+0x818>
 8007c0c:	9a08      	ldr	r2, [sp, #32]
 8007c0e:	331c      	adds	r3, #28
 8007c10:	441a      	add	r2, r3
 8007c12:	4498      	add	r8, r3
 8007c14:	441e      	add	r6, r3
 8007c16:	9208      	str	r2, [sp, #32]
 8007c18:	e792      	b.n	8007b40 <_dtoa_r+0x818>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	e7f6      	b.n	8007c0c <_dtoa_r+0x8e4>
 8007c1e:	9b07      	ldr	r3, [sp, #28]
 8007c20:	9704      	str	r7, [sp, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	dc20      	bgt.n	8007c68 <_dtoa_r+0x940>
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	dd1e      	ble.n	8007c6c <_dtoa_r+0x944>
 8007c2e:	9b00      	ldr	r3, [sp, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f47f aec0 	bne.w	80079b6 <_dtoa_r+0x68e>
 8007c36:	4621      	mov	r1, r4
 8007c38:	2205      	movs	r2, #5
 8007c3a:	4658      	mov	r0, fp
 8007c3c:	f000 fa9a 	bl	8008174 <__multadd>
 8007c40:	4601      	mov	r1, r0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4648      	mov	r0, r9
 8007c46:	f000 fcf7 	bl	8008638 <__mcmp>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	f77f aeb3 	ble.w	80079b6 <_dtoa_r+0x68e>
 8007c50:	4656      	mov	r6, sl
 8007c52:	2331      	movs	r3, #49	@ 0x31
 8007c54:	f806 3b01 	strb.w	r3, [r6], #1
 8007c58:	9b04      	ldr	r3, [sp, #16]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	9304      	str	r3, [sp, #16]
 8007c5e:	e6ae      	b.n	80079be <_dtoa_r+0x696>
 8007c60:	9c07      	ldr	r4, [sp, #28]
 8007c62:	9704      	str	r7, [sp, #16]
 8007c64:	4625      	mov	r5, r4
 8007c66:	e7f3      	b.n	8007c50 <_dtoa_r+0x928>
 8007c68:	9b07      	ldr	r3, [sp, #28]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 8104 	beq.w	8007e7c <_dtoa_r+0xb54>
 8007c74:	2e00      	cmp	r6, #0
 8007c76:	dd05      	ble.n	8007c84 <_dtoa_r+0x95c>
 8007c78:	4629      	mov	r1, r5
 8007c7a:	4632      	mov	r2, r6
 8007c7c:	4658      	mov	r0, fp
 8007c7e:	f000 fc6f 	bl	8008560 <__lshift>
 8007c82:	4605      	mov	r5, r0
 8007c84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d05a      	beq.n	8007d40 <_dtoa_r+0xa18>
 8007c8a:	6869      	ldr	r1, [r5, #4]
 8007c8c:	4658      	mov	r0, fp
 8007c8e:	f000 fa0f 	bl	80080b0 <_Balloc>
 8007c92:	4606      	mov	r6, r0
 8007c94:	b928      	cbnz	r0, 8007ca2 <_dtoa_r+0x97a>
 8007c96:	4b84      	ldr	r3, [pc, #528]	@ (8007ea8 <_dtoa_r+0xb80>)
 8007c98:	4602      	mov	r2, r0
 8007c9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c9e:	f7ff bb5a 	b.w	8007356 <_dtoa_r+0x2e>
 8007ca2:	692a      	ldr	r2, [r5, #16]
 8007ca4:	3202      	adds	r2, #2
 8007ca6:	0092      	lsls	r2, r2, #2
 8007ca8:	f105 010c 	add.w	r1, r5, #12
 8007cac:	300c      	adds	r0, #12
 8007cae:	f7ff fa80 	bl	80071b2 <memcpy>
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4658      	mov	r0, fp
 8007cb8:	f000 fc52 	bl	8008560 <__lshift>
 8007cbc:	f10a 0301 	add.w	r3, sl, #1
 8007cc0:	9307      	str	r3, [sp, #28]
 8007cc2:	9b00      	ldr	r3, [sp, #0]
 8007cc4:	4453      	add	r3, sl
 8007cc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cc8:	9b02      	ldr	r3, [sp, #8]
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	462f      	mov	r7, r5
 8007cd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	9b07      	ldr	r3, [sp, #28]
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	4648      	mov	r0, r9
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	f7ff fa9b 	bl	8007218 <quorem>
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	9002      	str	r0, [sp, #8]
 8007ce6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007cea:	4648      	mov	r0, r9
 8007cec:	f000 fca4 	bl	8008638 <__mcmp>
 8007cf0:	462a      	mov	r2, r5
 8007cf2:	9008      	str	r0, [sp, #32]
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	4658      	mov	r0, fp
 8007cf8:	f000 fcba 	bl	8008670 <__mdiff>
 8007cfc:	68c2      	ldr	r2, [r0, #12]
 8007cfe:	4606      	mov	r6, r0
 8007d00:	bb02      	cbnz	r2, 8007d44 <_dtoa_r+0xa1c>
 8007d02:	4601      	mov	r1, r0
 8007d04:	4648      	mov	r0, r9
 8007d06:	f000 fc97 	bl	8008638 <__mcmp>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	4631      	mov	r1, r6
 8007d0e:	4658      	mov	r0, fp
 8007d10:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d12:	f000 fa0d 	bl	8008130 <_Bfree>
 8007d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d1a:	9e07      	ldr	r6, [sp, #28]
 8007d1c:	ea43 0102 	orr.w	r1, r3, r2
 8007d20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d22:	4319      	orrs	r1, r3
 8007d24:	d110      	bne.n	8007d48 <_dtoa_r+0xa20>
 8007d26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d2a:	d029      	beq.n	8007d80 <_dtoa_r+0xa58>
 8007d2c:	9b08      	ldr	r3, [sp, #32]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	dd02      	ble.n	8007d38 <_dtoa_r+0xa10>
 8007d32:	9b02      	ldr	r3, [sp, #8]
 8007d34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007d38:	9b00      	ldr	r3, [sp, #0]
 8007d3a:	f883 8000 	strb.w	r8, [r3]
 8007d3e:	e63f      	b.n	80079c0 <_dtoa_r+0x698>
 8007d40:	4628      	mov	r0, r5
 8007d42:	e7bb      	b.n	8007cbc <_dtoa_r+0x994>
 8007d44:	2201      	movs	r2, #1
 8007d46:	e7e1      	b.n	8007d0c <_dtoa_r+0x9e4>
 8007d48:	9b08      	ldr	r3, [sp, #32]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	db04      	blt.n	8007d58 <_dtoa_r+0xa30>
 8007d4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d50:	430b      	orrs	r3, r1
 8007d52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d54:	430b      	orrs	r3, r1
 8007d56:	d120      	bne.n	8007d9a <_dtoa_r+0xa72>
 8007d58:	2a00      	cmp	r2, #0
 8007d5a:	dded      	ble.n	8007d38 <_dtoa_r+0xa10>
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	2201      	movs	r2, #1
 8007d60:	4658      	mov	r0, fp
 8007d62:	f000 fbfd 	bl	8008560 <__lshift>
 8007d66:	4621      	mov	r1, r4
 8007d68:	4681      	mov	r9, r0
 8007d6a:	f000 fc65 	bl	8008638 <__mcmp>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	dc03      	bgt.n	8007d7a <_dtoa_r+0xa52>
 8007d72:	d1e1      	bne.n	8007d38 <_dtoa_r+0xa10>
 8007d74:	f018 0f01 	tst.w	r8, #1
 8007d78:	d0de      	beq.n	8007d38 <_dtoa_r+0xa10>
 8007d7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d7e:	d1d8      	bne.n	8007d32 <_dtoa_r+0xa0a>
 8007d80:	9a00      	ldr	r2, [sp, #0]
 8007d82:	2339      	movs	r3, #57	@ 0x39
 8007d84:	7013      	strb	r3, [r2, #0]
 8007d86:	4633      	mov	r3, r6
 8007d88:	461e      	mov	r6, r3
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d90:	2a39      	cmp	r2, #57	@ 0x39
 8007d92:	d052      	beq.n	8007e3a <_dtoa_r+0xb12>
 8007d94:	3201      	adds	r2, #1
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	e612      	b.n	80079c0 <_dtoa_r+0x698>
 8007d9a:	2a00      	cmp	r2, #0
 8007d9c:	dd07      	ble.n	8007dae <_dtoa_r+0xa86>
 8007d9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007da2:	d0ed      	beq.n	8007d80 <_dtoa_r+0xa58>
 8007da4:	9a00      	ldr	r2, [sp, #0]
 8007da6:	f108 0301 	add.w	r3, r8, #1
 8007daa:	7013      	strb	r3, [r2, #0]
 8007dac:	e608      	b.n	80079c0 <_dtoa_r+0x698>
 8007dae:	9b07      	ldr	r3, [sp, #28]
 8007db0:	9a07      	ldr	r2, [sp, #28]
 8007db2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d028      	beq.n	8007e0e <_dtoa_r+0xae6>
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	220a      	movs	r2, #10
 8007dc2:	4658      	mov	r0, fp
 8007dc4:	f000 f9d6 	bl	8008174 <__multadd>
 8007dc8:	42af      	cmp	r7, r5
 8007dca:	4681      	mov	r9, r0
 8007dcc:	f04f 0300 	mov.w	r3, #0
 8007dd0:	f04f 020a 	mov.w	r2, #10
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	4658      	mov	r0, fp
 8007dd8:	d107      	bne.n	8007dea <_dtoa_r+0xac2>
 8007dda:	f000 f9cb 	bl	8008174 <__multadd>
 8007dde:	4607      	mov	r7, r0
 8007de0:	4605      	mov	r5, r0
 8007de2:	9b07      	ldr	r3, [sp, #28]
 8007de4:	3301      	adds	r3, #1
 8007de6:	9307      	str	r3, [sp, #28]
 8007de8:	e774      	b.n	8007cd4 <_dtoa_r+0x9ac>
 8007dea:	f000 f9c3 	bl	8008174 <__multadd>
 8007dee:	4629      	mov	r1, r5
 8007df0:	4607      	mov	r7, r0
 8007df2:	2300      	movs	r3, #0
 8007df4:	220a      	movs	r2, #10
 8007df6:	4658      	mov	r0, fp
 8007df8:	f000 f9bc 	bl	8008174 <__multadd>
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	e7f0      	b.n	8007de2 <_dtoa_r+0xaba>
 8007e00:	9b00      	ldr	r3, [sp, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bfcc      	ite	gt
 8007e06:	461e      	movgt	r6, r3
 8007e08:	2601      	movle	r6, #1
 8007e0a:	4456      	add	r6, sl
 8007e0c:	2700      	movs	r7, #0
 8007e0e:	4649      	mov	r1, r9
 8007e10:	2201      	movs	r2, #1
 8007e12:	4658      	mov	r0, fp
 8007e14:	f000 fba4 	bl	8008560 <__lshift>
 8007e18:	4621      	mov	r1, r4
 8007e1a:	4681      	mov	r9, r0
 8007e1c:	f000 fc0c 	bl	8008638 <__mcmp>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	dcb0      	bgt.n	8007d86 <_dtoa_r+0xa5e>
 8007e24:	d102      	bne.n	8007e2c <_dtoa_r+0xb04>
 8007e26:	f018 0f01 	tst.w	r8, #1
 8007e2a:	d1ac      	bne.n	8007d86 <_dtoa_r+0xa5e>
 8007e2c:	4633      	mov	r3, r6
 8007e2e:	461e      	mov	r6, r3
 8007e30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e34:	2a30      	cmp	r2, #48	@ 0x30
 8007e36:	d0fa      	beq.n	8007e2e <_dtoa_r+0xb06>
 8007e38:	e5c2      	b.n	80079c0 <_dtoa_r+0x698>
 8007e3a:	459a      	cmp	sl, r3
 8007e3c:	d1a4      	bne.n	8007d88 <_dtoa_r+0xa60>
 8007e3e:	9b04      	ldr	r3, [sp, #16]
 8007e40:	3301      	adds	r3, #1
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	2331      	movs	r3, #49	@ 0x31
 8007e46:	f88a 3000 	strb.w	r3, [sl]
 8007e4a:	e5b9      	b.n	80079c0 <_dtoa_r+0x698>
 8007e4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007eac <_dtoa_r+0xb84>
 8007e52:	b11b      	cbz	r3, 8007e5c <_dtoa_r+0xb34>
 8007e54:	f10a 0308 	add.w	r3, sl, #8
 8007e58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	4650      	mov	r0, sl
 8007e5e:	b019      	add	sp, #100	@ 0x64
 8007e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	f77f ae37 	ble.w	8007ada <_dtoa_r+0x7b2>
 8007e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e70:	2001      	movs	r0, #1
 8007e72:	e655      	b.n	8007b20 <_dtoa_r+0x7f8>
 8007e74:	9b00      	ldr	r3, [sp, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f77f aed6 	ble.w	8007c28 <_dtoa_r+0x900>
 8007e7c:	4656      	mov	r6, sl
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4648      	mov	r0, r9
 8007e82:	f7ff f9c9 	bl	8007218 <quorem>
 8007e86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e8a:	f806 8b01 	strb.w	r8, [r6], #1
 8007e8e:	9b00      	ldr	r3, [sp, #0]
 8007e90:	eba6 020a 	sub.w	r2, r6, sl
 8007e94:	4293      	cmp	r3, r2
 8007e96:	ddb3      	ble.n	8007e00 <_dtoa_r+0xad8>
 8007e98:	4649      	mov	r1, r9
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	220a      	movs	r2, #10
 8007e9e:	4658      	mov	r0, fp
 8007ea0:	f000 f968 	bl	8008174 <__multadd>
 8007ea4:	4681      	mov	r9, r0
 8007ea6:	e7ea      	b.n	8007e7e <_dtoa_r+0xb56>
 8007ea8:	0800c8a7 	.word	0x0800c8a7
 8007eac:	0800c842 	.word	0x0800c842

08007eb0 <_free_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	2900      	cmp	r1, #0
 8007eb6:	d041      	beq.n	8007f3c <_free_r+0x8c>
 8007eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ebc:	1f0c      	subs	r4, r1, #4
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	bfb8      	it	lt
 8007ec2:	18e4      	addlt	r4, r4, r3
 8007ec4:	f000 f8e8 	bl	8008098 <__malloc_lock>
 8007ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f40 <_free_r+0x90>)
 8007eca:	6813      	ldr	r3, [r2, #0]
 8007ecc:	b933      	cbnz	r3, 8007edc <_free_r+0x2c>
 8007ece:	6063      	str	r3, [r4, #4]
 8007ed0:	6014      	str	r4, [r2, #0]
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ed8:	f000 b8e4 	b.w	80080a4 <__malloc_unlock>
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	d908      	bls.n	8007ef2 <_free_r+0x42>
 8007ee0:	6820      	ldr	r0, [r4, #0]
 8007ee2:	1821      	adds	r1, r4, r0
 8007ee4:	428b      	cmp	r3, r1
 8007ee6:	bf01      	itttt	eq
 8007ee8:	6819      	ldreq	r1, [r3, #0]
 8007eea:	685b      	ldreq	r3, [r3, #4]
 8007eec:	1809      	addeq	r1, r1, r0
 8007eee:	6021      	streq	r1, [r4, #0]
 8007ef0:	e7ed      	b.n	8007ece <_free_r+0x1e>
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	b10b      	cbz	r3, 8007efc <_free_r+0x4c>
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	d9fa      	bls.n	8007ef2 <_free_r+0x42>
 8007efc:	6811      	ldr	r1, [r2, #0]
 8007efe:	1850      	adds	r0, r2, r1
 8007f00:	42a0      	cmp	r0, r4
 8007f02:	d10b      	bne.n	8007f1c <_free_r+0x6c>
 8007f04:	6820      	ldr	r0, [r4, #0]
 8007f06:	4401      	add	r1, r0
 8007f08:	1850      	adds	r0, r2, r1
 8007f0a:	4283      	cmp	r3, r0
 8007f0c:	6011      	str	r1, [r2, #0]
 8007f0e:	d1e0      	bne.n	8007ed2 <_free_r+0x22>
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	6053      	str	r3, [r2, #4]
 8007f16:	4408      	add	r0, r1
 8007f18:	6010      	str	r0, [r2, #0]
 8007f1a:	e7da      	b.n	8007ed2 <_free_r+0x22>
 8007f1c:	d902      	bls.n	8007f24 <_free_r+0x74>
 8007f1e:	230c      	movs	r3, #12
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	e7d6      	b.n	8007ed2 <_free_r+0x22>
 8007f24:	6820      	ldr	r0, [r4, #0]
 8007f26:	1821      	adds	r1, r4, r0
 8007f28:	428b      	cmp	r3, r1
 8007f2a:	bf04      	itt	eq
 8007f2c:	6819      	ldreq	r1, [r3, #0]
 8007f2e:	685b      	ldreq	r3, [r3, #4]
 8007f30:	6063      	str	r3, [r4, #4]
 8007f32:	bf04      	itt	eq
 8007f34:	1809      	addeq	r1, r1, r0
 8007f36:	6021      	streq	r1, [r4, #0]
 8007f38:	6054      	str	r4, [r2, #4]
 8007f3a:	e7ca      	b.n	8007ed2 <_free_r+0x22>
 8007f3c:	bd38      	pop	{r3, r4, r5, pc}
 8007f3e:	bf00      	nop
 8007f40:	20000d50 	.word	0x20000d50

08007f44 <malloc>:
 8007f44:	4b02      	ldr	r3, [pc, #8]	@ (8007f50 <malloc+0xc>)
 8007f46:	4601      	mov	r1, r0
 8007f48:	6818      	ldr	r0, [r3, #0]
 8007f4a:	f000 b825 	b.w	8007f98 <_malloc_r>
 8007f4e:	bf00      	nop
 8007f50:	20000048 	.word	0x20000048

08007f54 <sbrk_aligned>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	4e0f      	ldr	r6, [pc, #60]	@ (8007f94 <sbrk_aligned+0x40>)
 8007f58:	460c      	mov	r4, r1
 8007f5a:	6831      	ldr	r1, [r6, #0]
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	b911      	cbnz	r1, 8007f66 <sbrk_aligned+0x12>
 8007f60:	f002 f806 	bl	8009f70 <_sbrk_r>
 8007f64:	6030      	str	r0, [r6, #0]
 8007f66:	4621      	mov	r1, r4
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f002 f801 	bl	8009f70 <_sbrk_r>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	d103      	bne.n	8007f7a <sbrk_aligned+0x26>
 8007f72:	f04f 34ff 	mov.w	r4, #4294967295
 8007f76:	4620      	mov	r0, r4
 8007f78:	bd70      	pop	{r4, r5, r6, pc}
 8007f7a:	1cc4      	adds	r4, r0, #3
 8007f7c:	f024 0403 	bic.w	r4, r4, #3
 8007f80:	42a0      	cmp	r0, r4
 8007f82:	d0f8      	beq.n	8007f76 <sbrk_aligned+0x22>
 8007f84:	1a21      	subs	r1, r4, r0
 8007f86:	4628      	mov	r0, r5
 8007f88:	f001 fff2 	bl	8009f70 <_sbrk_r>
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	d1f2      	bne.n	8007f76 <sbrk_aligned+0x22>
 8007f90:	e7ef      	b.n	8007f72 <sbrk_aligned+0x1e>
 8007f92:	bf00      	nop
 8007f94:	20000d4c 	.word	0x20000d4c

08007f98 <_malloc_r>:
 8007f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f9c:	1ccd      	adds	r5, r1, #3
 8007f9e:	f025 0503 	bic.w	r5, r5, #3
 8007fa2:	3508      	adds	r5, #8
 8007fa4:	2d0c      	cmp	r5, #12
 8007fa6:	bf38      	it	cc
 8007fa8:	250c      	movcc	r5, #12
 8007faa:	2d00      	cmp	r5, #0
 8007fac:	4606      	mov	r6, r0
 8007fae:	db01      	blt.n	8007fb4 <_malloc_r+0x1c>
 8007fb0:	42a9      	cmp	r1, r5
 8007fb2:	d904      	bls.n	8007fbe <_malloc_r+0x26>
 8007fb4:	230c      	movs	r3, #12
 8007fb6:	6033      	str	r3, [r6, #0]
 8007fb8:	2000      	movs	r0, #0
 8007fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008094 <_malloc_r+0xfc>
 8007fc2:	f000 f869 	bl	8008098 <__malloc_lock>
 8007fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8007fca:	461c      	mov	r4, r3
 8007fcc:	bb44      	cbnz	r4, 8008020 <_malloc_r+0x88>
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f7ff ffbf 	bl	8007f54 <sbrk_aligned>
 8007fd6:	1c43      	adds	r3, r0, #1
 8007fd8:	4604      	mov	r4, r0
 8007fda:	d158      	bne.n	800808e <_malloc_r+0xf6>
 8007fdc:	f8d8 4000 	ldr.w	r4, [r8]
 8007fe0:	4627      	mov	r7, r4
 8007fe2:	2f00      	cmp	r7, #0
 8007fe4:	d143      	bne.n	800806e <_malloc_r+0xd6>
 8007fe6:	2c00      	cmp	r4, #0
 8007fe8:	d04b      	beq.n	8008082 <_malloc_r+0xea>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	4639      	mov	r1, r7
 8007fee:	4630      	mov	r0, r6
 8007ff0:	eb04 0903 	add.w	r9, r4, r3
 8007ff4:	f001 ffbc 	bl	8009f70 <_sbrk_r>
 8007ff8:	4581      	cmp	r9, r0
 8007ffa:	d142      	bne.n	8008082 <_malloc_r+0xea>
 8007ffc:	6821      	ldr	r1, [r4, #0]
 8007ffe:	1a6d      	subs	r5, r5, r1
 8008000:	4629      	mov	r1, r5
 8008002:	4630      	mov	r0, r6
 8008004:	f7ff ffa6 	bl	8007f54 <sbrk_aligned>
 8008008:	3001      	adds	r0, #1
 800800a:	d03a      	beq.n	8008082 <_malloc_r+0xea>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	442b      	add	r3, r5
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	f8d8 3000 	ldr.w	r3, [r8]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	bb62      	cbnz	r2, 8008074 <_malloc_r+0xdc>
 800801a:	f8c8 7000 	str.w	r7, [r8]
 800801e:	e00f      	b.n	8008040 <_malloc_r+0xa8>
 8008020:	6822      	ldr	r2, [r4, #0]
 8008022:	1b52      	subs	r2, r2, r5
 8008024:	d420      	bmi.n	8008068 <_malloc_r+0xd0>
 8008026:	2a0b      	cmp	r2, #11
 8008028:	d917      	bls.n	800805a <_malloc_r+0xc2>
 800802a:	1961      	adds	r1, r4, r5
 800802c:	42a3      	cmp	r3, r4
 800802e:	6025      	str	r5, [r4, #0]
 8008030:	bf18      	it	ne
 8008032:	6059      	strne	r1, [r3, #4]
 8008034:	6863      	ldr	r3, [r4, #4]
 8008036:	bf08      	it	eq
 8008038:	f8c8 1000 	streq.w	r1, [r8]
 800803c:	5162      	str	r2, [r4, r5]
 800803e:	604b      	str	r3, [r1, #4]
 8008040:	4630      	mov	r0, r6
 8008042:	f000 f82f 	bl	80080a4 <__malloc_unlock>
 8008046:	f104 000b 	add.w	r0, r4, #11
 800804a:	1d23      	adds	r3, r4, #4
 800804c:	f020 0007 	bic.w	r0, r0, #7
 8008050:	1ac2      	subs	r2, r0, r3
 8008052:	bf1c      	itt	ne
 8008054:	1a1b      	subne	r3, r3, r0
 8008056:	50a3      	strne	r3, [r4, r2]
 8008058:	e7af      	b.n	8007fba <_malloc_r+0x22>
 800805a:	6862      	ldr	r2, [r4, #4]
 800805c:	42a3      	cmp	r3, r4
 800805e:	bf0c      	ite	eq
 8008060:	f8c8 2000 	streq.w	r2, [r8]
 8008064:	605a      	strne	r2, [r3, #4]
 8008066:	e7eb      	b.n	8008040 <_malloc_r+0xa8>
 8008068:	4623      	mov	r3, r4
 800806a:	6864      	ldr	r4, [r4, #4]
 800806c:	e7ae      	b.n	8007fcc <_malloc_r+0x34>
 800806e:	463c      	mov	r4, r7
 8008070:	687f      	ldr	r7, [r7, #4]
 8008072:	e7b6      	b.n	8007fe2 <_malloc_r+0x4a>
 8008074:	461a      	mov	r2, r3
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	42a3      	cmp	r3, r4
 800807a:	d1fb      	bne.n	8008074 <_malloc_r+0xdc>
 800807c:	2300      	movs	r3, #0
 800807e:	6053      	str	r3, [r2, #4]
 8008080:	e7de      	b.n	8008040 <_malloc_r+0xa8>
 8008082:	230c      	movs	r3, #12
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	4630      	mov	r0, r6
 8008088:	f000 f80c 	bl	80080a4 <__malloc_unlock>
 800808c:	e794      	b.n	8007fb8 <_malloc_r+0x20>
 800808e:	6005      	str	r5, [r0, #0]
 8008090:	e7d6      	b.n	8008040 <_malloc_r+0xa8>
 8008092:	bf00      	nop
 8008094:	20000d50 	.word	0x20000d50

08008098 <__malloc_lock>:
 8008098:	4801      	ldr	r0, [pc, #4]	@ (80080a0 <__malloc_lock+0x8>)
 800809a:	f7ff b880 	b.w	800719e <__retarget_lock_acquire_recursive>
 800809e:	bf00      	nop
 80080a0:	20000d48 	.word	0x20000d48

080080a4 <__malloc_unlock>:
 80080a4:	4801      	ldr	r0, [pc, #4]	@ (80080ac <__malloc_unlock+0x8>)
 80080a6:	f7ff b87b 	b.w	80071a0 <__retarget_lock_release_recursive>
 80080aa:	bf00      	nop
 80080ac:	20000d48 	.word	0x20000d48

080080b0 <_Balloc>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	69c6      	ldr	r6, [r0, #28]
 80080b4:	4604      	mov	r4, r0
 80080b6:	460d      	mov	r5, r1
 80080b8:	b976      	cbnz	r6, 80080d8 <_Balloc+0x28>
 80080ba:	2010      	movs	r0, #16
 80080bc:	f7ff ff42 	bl	8007f44 <malloc>
 80080c0:	4602      	mov	r2, r0
 80080c2:	61e0      	str	r0, [r4, #28]
 80080c4:	b920      	cbnz	r0, 80080d0 <_Balloc+0x20>
 80080c6:	4b18      	ldr	r3, [pc, #96]	@ (8008128 <_Balloc+0x78>)
 80080c8:	4818      	ldr	r0, [pc, #96]	@ (800812c <_Balloc+0x7c>)
 80080ca:	216b      	movs	r1, #107	@ 0x6b
 80080cc:	f7ff f886 	bl	80071dc <__assert_func>
 80080d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080d4:	6006      	str	r6, [r0, #0]
 80080d6:	60c6      	str	r6, [r0, #12]
 80080d8:	69e6      	ldr	r6, [r4, #28]
 80080da:	68f3      	ldr	r3, [r6, #12]
 80080dc:	b183      	cbz	r3, 8008100 <_Balloc+0x50>
 80080de:	69e3      	ldr	r3, [r4, #28]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080e6:	b9b8      	cbnz	r0, 8008118 <_Balloc+0x68>
 80080e8:	2101      	movs	r1, #1
 80080ea:	fa01 f605 	lsl.w	r6, r1, r5
 80080ee:	1d72      	adds	r2, r6, #5
 80080f0:	0092      	lsls	r2, r2, #2
 80080f2:	4620      	mov	r0, r4
 80080f4:	f001 ff5b 	bl	8009fae <_calloc_r>
 80080f8:	b160      	cbz	r0, 8008114 <_Balloc+0x64>
 80080fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080fe:	e00e      	b.n	800811e <_Balloc+0x6e>
 8008100:	2221      	movs	r2, #33	@ 0x21
 8008102:	2104      	movs	r1, #4
 8008104:	4620      	mov	r0, r4
 8008106:	f001 ff52 	bl	8009fae <_calloc_r>
 800810a:	69e3      	ldr	r3, [r4, #28]
 800810c:	60f0      	str	r0, [r6, #12]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1e4      	bne.n	80080de <_Balloc+0x2e>
 8008114:	2000      	movs	r0, #0
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	6802      	ldr	r2, [r0, #0]
 800811a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800811e:	2300      	movs	r3, #0
 8008120:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008124:	e7f7      	b.n	8008116 <_Balloc+0x66>
 8008126:	bf00      	nop
 8008128:	0800c795 	.word	0x0800c795
 800812c:	0800c8b8 	.word	0x0800c8b8

08008130 <_Bfree>:
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	69c6      	ldr	r6, [r0, #28]
 8008134:	4605      	mov	r5, r0
 8008136:	460c      	mov	r4, r1
 8008138:	b976      	cbnz	r6, 8008158 <_Bfree+0x28>
 800813a:	2010      	movs	r0, #16
 800813c:	f7ff ff02 	bl	8007f44 <malloc>
 8008140:	4602      	mov	r2, r0
 8008142:	61e8      	str	r0, [r5, #28]
 8008144:	b920      	cbnz	r0, 8008150 <_Bfree+0x20>
 8008146:	4b09      	ldr	r3, [pc, #36]	@ (800816c <_Bfree+0x3c>)
 8008148:	4809      	ldr	r0, [pc, #36]	@ (8008170 <_Bfree+0x40>)
 800814a:	218f      	movs	r1, #143	@ 0x8f
 800814c:	f7ff f846 	bl	80071dc <__assert_func>
 8008150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008154:	6006      	str	r6, [r0, #0]
 8008156:	60c6      	str	r6, [r0, #12]
 8008158:	b13c      	cbz	r4, 800816a <_Bfree+0x3a>
 800815a:	69eb      	ldr	r3, [r5, #28]
 800815c:	6862      	ldr	r2, [r4, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008164:	6021      	str	r1, [r4, #0]
 8008166:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800816a:	bd70      	pop	{r4, r5, r6, pc}
 800816c:	0800c795 	.word	0x0800c795
 8008170:	0800c8b8 	.word	0x0800c8b8

08008174 <__multadd>:
 8008174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008178:	690d      	ldr	r5, [r1, #16]
 800817a:	4607      	mov	r7, r0
 800817c:	460c      	mov	r4, r1
 800817e:	461e      	mov	r6, r3
 8008180:	f101 0c14 	add.w	ip, r1, #20
 8008184:	2000      	movs	r0, #0
 8008186:	f8dc 3000 	ldr.w	r3, [ip]
 800818a:	b299      	uxth	r1, r3
 800818c:	fb02 6101 	mla	r1, r2, r1, r6
 8008190:	0c1e      	lsrs	r6, r3, #16
 8008192:	0c0b      	lsrs	r3, r1, #16
 8008194:	fb02 3306 	mla	r3, r2, r6, r3
 8008198:	b289      	uxth	r1, r1
 800819a:	3001      	adds	r0, #1
 800819c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081a0:	4285      	cmp	r5, r0
 80081a2:	f84c 1b04 	str.w	r1, [ip], #4
 80081a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081aa:	dcec      	bgt.n	8008186 <__multadd+0x12>
 80081ac:	b30e      	cbz	r6, 80081f2 <__multadd+0x7e>
 80081ae:	68a3      	ldr	r3, [r4, #8]
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	dc19      	bgt.n	80081e8 <__multadd+0x74>
 80081b4:	6861      	ldr	r1, [r4, #4]
 80081b6:	4638      	mov	r0, r7
 80081b8:	3101      	adds	r1, #1
 80081ba:	f7ff ff79 	bl	80080b0 <_Balloc>
 80081be:	4680      	mov	r8, r0
 80081c0:	b928      	cbnz	r0, 80081ce <__multadd+0x5a>
 80081c2:	4602      	mov	r2, r0
 80081c4:	4b0c      	ldr	r3, [pc, #48]	@ (80081f8 <__multadd+0x84>)
 80081c6:	480d      	ldr	r0, [pc, #52]	@ (80081fc <__multadd+0x88>)
 80081c8:	21ba      	movs	r1, #186	@ 0xba
 80081ca:	f7ff f807 	bl	80071dc <__assert_func>
 80081ce:	6922      	ldr	r2, [r4, #16]
 80081d0:	3202      	adds	r2, #2
 80081d2:	f104 010c 	add.w	r1, r4, #12
 80081d6:	0092      	lsls	r2, r2, #2
 80081d8:	300c      	adds	r0, #12
 80081da:	f7fe ffea 	bl	80071b2 <memcpy>
 80081de:	4621      	mov	r1, r4
 80081e0:	4638      	mov	r0, r7
 80081e2:	f7ff ffa5 	bl	8008130 <_Bfree>
 80081e6:	4644      	mov	r4, r8
 80081e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081ec:	3501      	adds	r5, #1
 80081ee:	615e      	str	r6, [r3, #20]
 80081f0:	6125      	str	r5, [r4, #16]
 80081f2:	4620      	mov	r0, r4
 80081f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f8:	0800c8a7 	.word	0x0800c8a7
 80081fc:	0800c8b8 	.word	0x0800c8b8

08008200 <__s2b>:
 8008200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008204:	460c      	mov	r4, r1
 8008206:	4615      	mov	r5, r2
 8008208:	461f      	mov	r7, r3
 800820a:	2209      	movs	r2, #9
 800820c:	3308      	adds	r3, #8
 800820e:	4606      	mov	r6, r0
 8008210:	fb93 f3f2 	sdiv	r3, r3, r2
 8008214:	2100      	movs	r1, #0
 8008216:	2201      	movs	r2, #1
 8008218:	429a      	cmp	r2, r3
 800821a:	db09      	blt.n	8008230 <__s2b+0x30>
 800821c:	4630      	mov	r0, r6
 800821e:	f7ff ff47 	bl	80080b0 <_Balloc>
 8008222:	b940      	cbnz	r0, 8008236 <__s2b+0x36>
 8008224:	4602      	mov	r2, r0
 8008226:	4b19      	ldr	r3, [pc, #100]	@ (800828c <__s2b+0x8c>)
 8008228:	4819      	ldr	r0, [pc, #100]	@ (8008290 <__s2b+0x90>)
 800822a:	21d3      	movs	r1, #211	@ 0xd3
 800822c:	f7fe ffd6 	bl	80071dc <__assert_func>
 8008230:	0052      	lsls	r2, r2, #1
 8008232:	3101      	adds	r1, #1
 8008234:	e7f0      	b.n	8008218 <__s2b+0x18>
 8008236:	9b08      	ldr	r3, [sp, #32]
 8008238:	6143      	str	r3, [r0, #20]
 800823a:	2d09      	cmp	r5, #9
 800823c:	f04f 0301 	mov.w	r3, #1
 8008240:	6103      	str	r3, [r0, #16]
 8008242:	dd16      	ble.n	8008272 <__s2b+0x72>
 8008244:	f104 0909 	add.w	r9, r4, #9
 8008248:	46c8      	mov	r8, r9
 800824a:	442c      	add	r4, r5
 800824c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008250:	4601      	mov	r1, r0
 8008252:	3b30      	subs	r3, #48	@ 0x30
 8008254:	220a      	movs	r2, #10
 8008256:	4630      	mov	r0, r6
 8008258:	f7ff ff8c 	bl	8008174 <__multadd>
 800825c:	45a0      	cmp	r8, r4
 800825e:	d1f5      	bne.n	800824c <__s2b+0x4c>
 8008260:	f1a5 0408 	sub.w	r4, r5, #8
 8008264:	444c      	add	r4, r9
 8008266:	1b2d      	subs	r5, r5, r4
 8008268:	1963      	adds	r3, r4, r5
 800826a:	42bb      	cmp	r3, r7
 800826c:	db04      	blt.n	8008278 <__s2b+0x78>
 800826e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008272:	340a      	adds	r4, #10
 8008274:	2509      	movs	r5, #9
 8008276:	e7f6      	b.n	8008266 <__s2b+0x66>
 8008278:	f814 3b01 	ldrb.w	r3, [r4], #1
 800827c:	4601      	mov	r1, r0
 800827e:	3b30      	subs	r3, #48	@ 0x30
 8008280:	220a      	movs	r2, #10
 8008282:	4630      	mov	r0, r6
 8008284:	f7ff ff76 	bl	8008174 <__multadd>
 8008288:	e7ee      	b.n	8008268 <__s2b+0x68>
 800828a:	bf00      	nop
 800828c:	0800c8a7 	.word	0x0800c8a7
 8008290:	0800c8b8 	.word	0x0800c8b8

08008294 <__hi0bits>:
 8008294:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008298:	4603      	mov	r3, r0
 800829a:	bf36      	itet	cc
 800829c:	0403      	lslcc	r3, r0, #16
 800829e:	2000      	movcs	r0, #0
 80082a0:	2010      	movcc	r0, #16
 80082a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082a6:	bf3c      	itt	cc
 80082a8:	021b      	lslcc	r3, r3, #8
 80082aa:	3008      	addcc	r0, #8
 80082ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082b0:	bf3c      	itt	cc
 80082b2:	011b      	lslcc	r3, r3, #4
 80082b4:	3004      	addcc	r0, #4
 80082b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ba:	bf3c      	itt	cc
 80082bc:	009b      	lslcc	r3, r3, #2
 80082be:	3002      	addcc	r0, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	db05      	blt.n	80082d0 <__hi0bits+0x3c>
 80082c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082c8:	f100 0001 	add.w	r0, r0, #1
 80082cc:	bf08      	it	eq
 80082ce:	2020      	moveq	r0, #32
 80082d0:	4770      	bx	lr

080082d2 <__lo0bits>:
 80082d2:	6803      	ldr	r3, [r0, #0]
 80082d4:	4602      	mov	r2, r0
 80082d6:	f013 0007 	ands.w	r0, r3, #7
 80082da:	d00b      	beq.n	80082f4 <__lo0bits+0x22>
 80082dc:	07d9      	lsls	r1, r3, #31
 80082de:	d421      	bmi.n	8008324 <__lo0bits+0x52>
 80082e0:	0798      	lsls	r0, r3, #30
 80082e2:	bf49      	itett	mi
 80082e4:	085b      	lsrmi	r3, r3, #1
 80082e6:	089b      	lsrpl	r3, r3, #2
 80082e8:	2001      	movmi	r0, #1
 80082ea:	6013      	strmi	r3, [r2, #0]
 80082ec:	bf5c      	itt	pl
 80082ee:	6013      	strpl	r3, [r2, #0]
 80082f0:	2002      	movpl	r0, #2
 80082f2:	4770      	bx	lr
 80082f4:	b299      	uxth	r1, r3
 80082f6:	b909      	cbnz	r1, 80082fc <__lo0bits+0x2a>
 80082f8:	0c1b      	lsrs	r3, r3, #16
 80082fa:	2010      	movs	r0, #16
 80082fc:	b2d9      	uxtb	r1, r3
 80082fe:	b909      	cbnz	r1, 8008304 <__lo0bits+0x32>
 8008300:	3008      	adds	r0, #8
 8008302:	0a1b      	lsrs	r3, r3, #8
 8008304:	0719      	lsls	r1, r3, #28
 8008306:	bf04      	itt	eq
 8008308:	091b      	lsreq	r3, r3, #4
 800830a:	3004      	addeq	r0, #4
 800830c:	0799      	lsls	r1, r3, #30
 800830e:	bf04      	itt	eq
 8008310:	089b      	lsreq	r3, r3, #2
 8008312:	3002      	addeq	r0, #2
 8008314:	07d9      	lsls	r1, r3, #31
 8008316:	d403      	bmi.n	8008320 <__lo0bits+0x4e>
 8008318:	085b      	lsrs	r3, r3, #1
 800831a:	f100 0001 	add.w	r0, r0, #1
 800831e:	d003      	beq.n	8008328 <__lo0bits+0x56>
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	4770      	bx	lr
 8008324:	2000      	movs	r0, #0
 8008326:	4770      	bx	lr
 8008328:	2020      	movs	r0, #32
 800832a:	4770      	bx	lr

0800832c <__i2b>:
 800832c:	b510      	push	{r4, lr}
 800832e:	460c      	mov	r4, r1
 8008330:	2101      	movs	r1, #1
 8008332:	f7ff febd 	bl	80080b0 <_Balloc>
 8008336:	4602      	mov	r2, r0
 8008338:	b928      	cbnz	r0, 8008346 <__i2b+0x1a>
 800833a:	4b05      	ldr	r3, [pc, #20]	@ (8008350 <__i2b+0x24>)
 800833c:	4805      	ldr	r0, [pc, #20]	@ (8008354 <__i2b+0x28>)
 800833e:	f240 1145 	movw	r1, #325	@ 0x145
 8008342:	f7fe ff4b 	bl	80071dc <__assert_func>
 8008346:	2301      	movs	r3, #1
 8008348:	6144      	str	r4, [r0, #20]
 800834a:	6103      	str	r3, [r0, #16]
 800834c:	bd10      	pop	{r4, pc}
 800834e:	bf00      	nop
 8008350:	0800c8a7 	.word	0x0800c8a7
 8008354:	0800c8b8 	.word	0x0800c8b8

08008358 <__multiply>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	4614      	mov	r4, r2
 800835e:	690a      	ldr	r2, [r1, #16]
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	429a      	cmp	r2, r3
 8008364:	bfa8      	it	ge
 8008366:	4623      	movge	r3, r4
 8008368:	460f      	mov	r7, r1
 800836a:	bfa4      	itt	ge
 800836c:	460c      	movge	r4, r1
 800836e:	461f      	movge	r7, r3
 8008370:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008374:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008378:	68a3      	ldr	r3, [r4, #8]
 800837a:	6861      	ldr	r1, [r4, #4]
 800837c:	eb0a 0609 	add.w	r6, sl, r9
 8008380:	42b3      	cmp	r3, r6
 8008382:	b085      	sub	sp, #20
 8008384:	bfb8      	it	lt
 8008386:	3101      	addlt	r1, #1
 8008388:	f7ff fe92 	bl	80080b0 <_Balloc>
 800838c:	b930      	cbnz	r0, 800839c <__multiply+0x44>
 800838e:	4602      	mov	r2, r0
 8008390:	4b44      	ldr	r3, [pc, #272]	@ (80084a4 <__multiply+0x14c>)
 8008392:	4845      	ldr	r0, [pc, #276]	@ (80084a8 <__multiply+0x150>)
 8008394:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008398:	f7fe ff20 	bl	80071dc <__assert_func>
 800839c:	f100 0514 	add.w	r5, r0, #20
 80083a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083a4:	462b      	mov	r3, r5
 80083a6:	2200      	movs	r2, #0
 80083a8:	4543      	cmp	r3, r8
 80083aa:	d321      	bcc.n	80083f0 <__multiply+0x98>
 80083ac:	f107 0114 	add.w	r1, r7, #20
 80083b0:	f104 0214 	add.w	r2, r4, #20
 80083b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80083b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80083bc:	9302      	str	r3, [sp, #8]
 80083be:	1b13      	subs	r3, r2, r4
 80083c0:	3b15      	subs	r3, #21
 80083c2:	f023 0303 	bic.w	r3, r3, #3
 80083c6:	3304      	adds	r3, #4
 80083c8:	f104 0715 	add.w	r7, r4, #21
 80083cc:	42ba      	cmp	r2, r7
 80083ce:	bf38      	it	cc
 80083d0:	2304      	movcc	r3, #4
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	9b02      	ldr	r3, [sp, #8]
 80083d6:	9103      	str	r1, [sp, #12]
 80083d8:	428b      	cmp	r3, r1
 80083da:	d80c      	bhi.n	80083f6 <__multiply+0x9e>
 80083dc:	2e00      	cmp	r6, #0
 80083de:	dd03      	ble.n	80083e8 <__multiply+0x90>
 80083e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d05b      	beq.n	80084a0 <__multiply+0x148>
 80083e8:	6106      	str	r6, [r0, #16]
 80083ea:	b005      	add	sp, #20
 80083ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f0:	f843 2b04 	str.w	r2, [r3], #4
 80083f4:	e7d8      	b.n	80083a8 <__multiply+0x50>
 80083f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80083fa:	f1ba 0f00 	cmp.w	sl, #0
 80083fe:	d024      	beq.n	800844a <__multiply+0xf2>
 8008400:	f104 0e14 	add.w	lr, r4, #20
 8008404:	46a9      	mov	r9, r5
 8008406:	f04f 0c00 	mov.w	ip, #0
 800840a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800840e:	f8d9 3000 	ldr.w	r3, [r9]
 8008412:	fa1f fb87 	uxth.w	fp, r7
 8008416:	b29b      	uxth	r3, r3
 8008418:	fb0a 330b 	mla	r3, sl, fp, r3
 800841c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008420:	f8d9 7000 	ldr.w	r7, [r9]
 8008424:	4463      	add	r3, ip
 8008426:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800842a:	fb0a c70b 	mla	r7, sl, fp, ip
 800842e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008432:	b29b      	uxth	r3, r3
 8008434:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008438:	4572      	cmp	r2, lr
 800843a:	f849 3b04 	str.w	r3, [r9], #4
 800843e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008442:	d8e2      	bhi.n	800840a <__multiply+0xb2>
 8008444:	9b01      	ldr	r3, [sp, #4]
 8008446:	f845 c003 	str.w	ip, [r5, r3]
 800844a:	9b03      	ldr	r3, [sp, #12]
 800844c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008450:	3104      	adds	r1, #4
 8008452:	f1b9 0f00 	cmp.w	r9, #0
 8008456:	d021      	beq.n	800849c <__multiply+0x144>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	f104 0c14 	add.w	ip, r4, #20
 800845e:	46ae      	mov	lr, r5
 8008460:	f04f 0a00 	mov.w	sl, #0
 8008464:	f8bc b000 	ldrh.w	fp, [ip]
 8008468:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800846c:	fb09 770b 	mla	r7, r9, fp, r7
 8008470:	4457      	add	r7, sl
 8008472:	b29b      	uxth	r3, r3
 8008474:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008478:	f84e 3b04 	str.w	r3, [lr], #4
 800847c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008480:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008484:	f8be 3000 	ldrh.w	r3, [lr]
 8008488:	fb09 330a 	mla	r3, r9, sl, r3
 800848c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008490:	4562      	cmp	r2, ip
 8008492:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008496:	d8e5      	bhi.n	8008464 <__multiply+0x10c>
 8008498:	9f01      	ldr	r7, [sp, #4]
 800849a:	51eb      	str	r3, [r5, r7]
 800849c:	3504      	adds	r5, #4
 800849e:	e799      	b.n	80083d4 <__multiply+0x7c>
 80084a0:	3e01      	subs	r6, #1
 80084a2:	e79b      	b.n	80083dc <__multiply+0x84>
 80084a4:	0800c8a7 	.word	0x0800c8a7
 80084a8:	0800c8b8 	.word	0x0800c8b8

080084ac <__pow5mult>:
 80084ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084b0:	4615      	mov	r5, r2
 80084b2:	f012 0203 	ands.w	r2, r2, #3
 80084b6:	4607      	mov	r7, r0
 80084b8:	460e      	mov	r6, r1
 80084ba:	d007      	beq.n	80084cc <__pow5mult+0x20>
 80084bc:	4c25      	ldr	r4, [pc, #148]	@ (8008554 <__pow5mult+0xa8>)
 80084be:	3a01      	subs	r2, #1
 80084c0:	2300      	movs	r3, #0
 80084c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084c6:	f7ff fe55 	bl	8008174 <__multadd>
 80084ca:	4606      	mov	r6, r0
 80084cc:	10ad      	asrs	r5, r5, #2
 80084ce:	d03d      	beq.n	800854c <__pow5mult+0xa0>
 80084d0:	69fc      	ldr	r4, [r7, #28]
 80084d2:	b97c      	cbnz	r4, 80084f4 <__pow5mult+0x48>
 80084d4:	2010      	movs	r0, #16
 80084d6:	f7ff fd35 	bl	8007f44 <malloc>
 80084da:	4602      	mov	r2, r0
 80084dc:	61f8      	str	r0, [r7, #28]
 80084de:	b928      	cbnz	r0, 80084ec <__pow5mult+0x40>
 80084e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008558 <__pow5mult+0xac>)
 80084e2:	481e      	ldr	r0, [pc, #120]	@ (800855c <__pow5mult+0xb0>)
 80084e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084e8:	f7fe fe78 	bl	80071dc <__assert_func>
 80084ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084f0:	6004      	str	r4, [r0, #0]
 80084f2:	60c4      	str	r4, [r0, #12]
 80084f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80084f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084fc:	b94c      	cbnz	r4, 8008512 <__pow5mult+0x66>
 80084fe:	f240 2171 	movw	r1, #625	@ 0x271
 8008502:	4638      	mov	r0, r7
 8008504:	f7ff ff12 	bl	800832c <__i2b>
 8008508:	2300      	movs	r3, #0
 800850a:	f8c8 0008 	str.w	r0, [r8, #8]
 800850e:	4604      	mov	r4, r0
 8008510:	6003      	str	r3, [r0, #0]
 8008512:	f04f 0900 	mov.w	r9, #0
 8008516:	07eb      	lsls	r3, r5, #31
 8008518:	d50a      	bpl.n	8008530 <__pow5mult+0x84>
 800851a:	4631      	mov	r1, r6
 800851c:	4622      	mov	r2, r4
 800851e:	4638      	mov	r0, r7
 8008520:	f7ff ff1a 	bl	8008358 <__multiply>
 8008524:	4631      	mov	r1, r6
 8008526:	4680      	mov	r8, r0
 8008528:	4638      	mov	r0, r7
 800852a:	f7ff fe01 	bl	8008130 <_Bfree>
 800852e:	4646      	mov	r6, r8
 8008530:	106d      	asrs	r5, r5, #1
 8008532:	d00b      	beq.n	800854c <__pow5mult+0xa0>
 8008534:	6820      	ldr	r0, [r4, #0]
 8008536:	b938      	cbnz	r0, 8008548 <__pow5mult+0x9c>
 8008538:	4622      	mov	r2, r4
 800853a:	4621      	mov	r1, r4
 800853c:	4638      	mov	r0, r7
 800853e:	f7ff ff0b 	bl	8008358 <__multiply>
 8008542:	6020      	str	r0, [r4, #0]
 8008544:	f8c0 9000 	str.w	r9, [r0]
 8008548:	4604      	mov	r4, r0
 800854a:	e7e4      	b.n	8008516 <__pow5mult+0x6a>
 800854c:	4630      	mov	r0, r6
 800854e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008552:	bf00      	nop
 8008554:	0800c914 	.word	0x0800c914
 8008558:	0800c795 	.word	0x0800c795
 800855c:	0800c8b8 	.word	0x0800c8b8

08008560 <__lshift>:
 8008560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008564:	460c      	mov	r4, r1
 8008566:	6849      	ldr	r1, [r1, #4]
 8008568:	6923      	ldr	r3, [r4, #16]
 800856a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800856e:	68a3      	ldr	r3, [r4, #8]
 8008570:	4607      	mov	r7, r0
 8008572:	4691      	mov	r9, r2
 8008574:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008578:	f108 0601 	add.w	r6, r8, #1
 800857c:	42b3      	cmp	r3, r6
 800857e:	db0b      	blt.n	8008598 <__lshift+0x38>
 8008580:	4638      	mov	r0, r7
 8008582:	f7ff fd95 	bl	80080b0 <_Balloc>
 8008586:	4605      	mov	r5, r0
 8008588:	b948      	cbnz	r0, 800859e <__lshift+0x3e>
 800858a:	4602      	mov	r2, r0
 800858c:	4b28      	ldr	r3, [pc, #160]	@ (8008630 <__lshift+0xd0>)
 800858e:	4829      	ldr	r0, [pc, #164]	@ (8008634 <__lshift+0xd4>)
 8008590:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008594:	f7fe fe22 	bl	80071dc <__assert_func>
 8008598:	3101      	adds	r1, #1
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	e7ee      	b.n	800857c <__lshift+0x1c>
 800859e:	2300      	movs	r3, #0
 80085a0:	f100 0114 	add.w	r1, r0, #20
 80085a4:	f100 0210 	add.w	r2, r0, #16
 80085a8:	4618      	mov	r0, r3
 80085aa:	4553      	cmp	r3, sl
 80085ac:	db33      	blt.n	8008616 <__lshift+0xb6>
 80085ae:	6920      	ldr	r0, [r4, #16]
 80085b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085b4:	f104 0314 	add.w	r3, r4, #20
 80085b8:	f019 091f 	ands.w	r9, r9, #31
 80085bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085c4:	d02b      	beq.n	800861e <__lshift+0xbe>
 80085c6:	f1c9 0e20 	rsb	lr, r9, #32
 80085ca:	468a      	mov	sl, r1
 80085cc:	2200      	movs	r2, #0
 80085ce:	6818      	ldr	r0, [r3, #0]
 80085d0:	fa00 f009 	lsl.w	r0, r0, r9
 80085d4:	4310      	orrs	r0, r2
 80085d6:	f84a 0b04 	str.w	r0, [sl], #4
 80085da:	f853 2b04 	ldr.w	r2, [r3], #4
 80085de:	459c      	cmp	ip, r3
 80085e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80085e4:	d8f3      	bhi.n	80085ce <__lshift+0x6e>
 80085e6:	ebac 0304 	sub.w	r3, ip, r4
 80085ea:	3b15      	subs	r3, #21
 80085ec:	f023 0303 	bic.w	r3, r3, #3
 80085f0:	3304      	adds	r3, #4
 80085f2:	f104 0015 	add.w	r0, r4, #21
 80085f6:	4584      	cmp	ip, r0
 80085f8:	bf38      	it	cc
 80085fa:	2304      	movcc	r3, #4
 80085fc:	50ca      	str	r2, [r1, r3]
 80085fe:	b10a      	cbz	r2, 8008604 <__lshift+0xa4>
 8008600:	f108 0602 	add.w	r6, r8, #2
 8008604:	3e01      	subs	r6, #1
 8008606:	4638      	mov	r0, r7
 8008608:	612e      	str	r6, [r5, #16]
 800860a:	4621      	mov	r1, r4
 800860c:	f7ff fd90 	bl	8008130 <_Bfree>
 8008610:	4628      	mov	r0, r5
 8008612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008616:	f842 0f04 	str.w	r0, [r2, #4]!
 800861a:	3301      	adds	r3, #1
 800861c:	e7c5      	b.n	80085aa <__lshift+0x4a>
 800861e:	3904      	subs	r1, #4
 8008620:	f853 2b04 	ldr.w	r2, [r3], #4
 8008624:	f841 2f04 	str.w	r2, [r1, #4]!
 8008628:	459c      	cmp	ip, r3
 800862a:	d8f9      	bhi.n	8008620 <__lshift+0xc0>
 800862c:	e7ea      	b.n	8008604 <__lshift+0xa4>
 800862e:	bf00      	nop
 8008630:	0800c8a7 	.word	0x0800c8a7
 8008634:	0800c8b8 	.word	0x0800c8b8

08008638 <__mcmp>:
 8008638:	690a      	ldr	r2, [r1, #16]
 800863a:	4603      	mov	r3, r0
 800863c:	6900      	ldr	r0, [r0, #16]
 800863e:	1a80      	subs	r0, r0, r2
 8008640:	b530      	push	{r4, r5, lr}
 8008642:	d10e      	bne.n	8008662 <__mcmp+0x2a>
 8008644:	3314      	adds	r3, #20
 8008646:	3114      	adds	r1, #20
 8008648:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800864c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008650:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008654:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008658:	4295      	cmp	r5, r2
 800865a:	d003      	beq.n	8008664 <__mcmp+0x2c>
 800865c:	d205      	bcs.n	800866a <__mcmp+0x32>
 800865e:	f04f 30ff 	mov.w	r0, #4294967295
 8008662:	bd30      	pop	{r4, r5, pc}
 8008664:	42a3      	cmp	r3, r4
 8008666:	d3f3      	bcc.n	8008650 <__mcmp+0x18>
 8008668:	e7fb      	b.n	8008662 <__mcmp+0x2a>
 800866a:	2001      	movs	r0, #1
 800866c:	e7f9      	b.n	8008662 <__mcmp+0x2a>
	...

08008670 <__mdiff>:
 8008670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008674:	4689      	mov	r9, r1
 8008676:	4606      	mov	r6, r0
 8008678:	4611      	mov	r1, r2
 800867a:	4648      	mov	r0, r9
 800867c:	4614      	mov	r4, r2
 800867e:	f7ff ffdb 	bl	8008638 <__mcmp>
 8008682:	1e05      	subs	r5, r0, #0
 8008684:	d112      	bne.n	80086ac <__mdiff+0x3c>
 8008686:	4629      	mov	r1, r5
 8008688:	4630      	mov	r0, r6
 800868a:	f7ff fd11 	bl	80080b0 <_Balloc>
 800868e:	4602      	mov	r2, r0
 8008690:	b928      	cbnz	r0, 800869e <__mdiff+0x2e>
 8008692:	4b3f      	ldr	r3, [pc, #252]	@ (8008790 <__mdiff+0x120>)
 8008694:	f240 2137 	movw	r1, #567	@ 0x237
 8008698:	483e      	ldr	r0, [pc, #248]	@ (8008794 <__mdiff+0x124>)
 800869a:	f7fe fd9f 	bl	80071dc <__assert_func>
 800869e:	2301      	movs	r3, #1
 80086a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086a4:	4610      	mov	r0, r2
 80086a6:	b003      	add	sp, #12
 80086a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ac:	bfbc      	itt	lt
 80086ae:	464b      	movlt	r3, r9
 80086b0:	46a1      	movlt	r9, r4
 80086b2:	4630      	mov	r0, r6
 80086b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086b8:	bfba      	itte	lt
 80086ba:	461c      	movlt	r4, r3
 80086bc:	2501      	movlt	r5, #1
 80086be:	2500      	movge	r5, #0
 80086c0:	f7ff fcf6 	bl	80080b0 <_Balloc>
 80086c4:	4602      	mov	r2, r0
 80086c6:	b918      	cbnz	r0, 80086d0 <__mdiff+0x60>
 80086c8:	4b31      	ldr	r3, [pc, #196]	@ (8008790 <__mdiff+0x120>)
 80086ca:	f240 2145 	movw	r1, #581	@ 0x245
 80086ce:	e7e3      	b.n	8008698 <__mdiff+0x28>
 80086d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80086d4:	6926      	ldr	r6, [r4, #16]
 80086d6:	60c5      	str	r5, [r0, #12]
 80086d8:	f109 0310 	add.w	r3, r9, #16
 80086dc:	f109 0514 	add.w	r5, r9, #20
 80086e0:	f104 0e14 	add.w	lr, r4, #20
 80086e4:	f100 0b14 	add.w	fp, r0, #20
 80086e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086f0:	9301      	str	r3, [sp, #4]
 80086f2:	46d9      	mov	r9, fp
 80086f4:	f04f 0c00 	mov.w	ip, #0
 80086f8:	9b01      	ldr	r3, [sp, #4]
 80086fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80086fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008702:	9301      	str	r3, [sp, #4]
 8008704:	fa1f f38a 	uxth.w	r3, sl
 8008708:	4619      	mov	r1, r3
 800870a:	b283      	uxth	r3, r0
 800870c:	1acb      	subs	r3, r1, r3
 800870e:	0c00      	lsrs	r0, r0, #16
 8008710:	4463      	add	r3, ip
 8008712:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008716:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800871a:	b29b      	uxth	r3, r3
 800871c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008720:	4576      	cmp	r6, lr
 8008722:	f849 3b04 	str.w	r3, [r9], #4
 8008726:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800872a:	d8e5      	bhi.n	80086f8 <__mdiff+0x88>
 800872c:	1b33      	subs	r3, r6, r4
 800872e:	3b15      	subs	r3, #21
 8008730:	f023 0303 	bic.w	r3, r3, #3
 8008734:	3415      	adds	r4, #21
 8008736:	3304      	adds	r3, #4
 8008738:	42a6      	cmp	r6, r4
 800873a:	bf38      	it	cc
 800873c:	2304      	movcc	r3, #4
 800873e:	441d      	add	r5, r3
 8008740:	445b      	add	r3, fp
 8008742:	461e      	mov	r6, r3
 8008744:	462c      	mov	r4, r5
 8008746:	4544      	cmp	r4, r8
 8008748:	d30e      	bcc.n	8008768 <__mdiff+0xf8>
 800874a:	f108 0103 	add.w	r1, r8, #3
 800874e:	1b49      	subs	r1, r1, r5
 8008750:	f021 0103 	bic.w	r1, r1, #3
 8008754:	3d03      	subs	r5, #3
 8008756:	45a8      	cmp	r8, r5
 8008758:	bf38      	it	cc
 800875a:	2100      	movcc	r1, #0
 800875c:	440b      	add	r3, r1
 800875e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008762:	b191      	cbz	r1, 800878a <__mdiff+0x11a>
 8008764:	6117      	str	r7, [r2, #16]
 8008766:	e79d      	b.n	80086a4 <__mdiff+0x34>
 8008768:	f854 1b04 	ldr.w	r1, [r4], #4
 800876c:	46e6      	mov	lr, ip
 800876e:	0c08      	lsrs	r0, r1, #16
 8008770:	fa1c fc81 	uxtah	ip, ip, r1
 8008774:	4471      	add	r1, lr
 8008776:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800877a:	b289      	uxth	r1, r1
 800877c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008780:	f846 1b04 	str.w	r1, [r6], #4
 8008784:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008788:	e7dd      	b.n	8008746 <__mdiff+0xd6>
 800878a:	3f01      	subs	r7, #1
 800878c:	e7e7      	b.n	800875e <__mdiff+0xee>
 800878e:	bf00      	nop
 8008790:	0800c8a7 	.word	0x0800c8a7
 8008794:	0800c8b8 	.word	0x0800c8b8

08008798 <__ulp>:
 8008798:	b082      	sub	sp, #8
 800879a:	ed8d 0b00 	vstr	d0, [sp]
 800879e:	9a01      	ldr	r2, [sp, #4]
 80087a0:	4b0f      	ldr	r3, [pc, #60]	@ (80087e0 <__ulp+0x48>)
 80087a2:	4013      	ands	r3, r2
 80087a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dc08      	bgt.n	80087be <__ulp+0x26>
 80087ac:	425b      	negs	r3, r3
 80087ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80087b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80087b6:	da04      	bge.n	80087c2 <__ulp+0x2a>
 80087b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80087bc:	4113      	asrs	r3, r2
 80087be:	2200      	movs	r2, #0
 80087c0:	e008      	b.n	80087d4 <__ulp+0x3c>
 80087c2:	f1a2 0314 	sub.w	r3, r2, #20
 80087c6:	2b1e      	cmp	r3, #30
 80087c8:	bfda      	itte	le
 80087ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80087ce:	40da      	lsrle	r2, r3
 80087d0:	2201      	movgt	r2, #1
 80087d2:	2300      	movs	r3, #0
 80087d4:	4619      	mov	r1, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	ec41 0b10 	vmov	d0, r0, r1
 80087dc:	b002      	add	sp, #8
 80087de:	4770      	bx	lr
 80087e0:	7ff00000 	.word	0x7ff00000

080087e4 <__b2d>:
 80087e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e8:	6906      	ldr	r6, [r0, #16]
 80087ea:	f100 0814 	add.w	r8, r0, #20
 80087ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80087f2:	1f37      	subs	r7, r6, #4
 80087f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80087f8:	4610      	mov	r0, r2
 80087fa:	f7ff fd4b 	bl	8008294 <__hi0bits>
 80087fe:	f1c0 0320 	rsb	r3, r0, #32
 8008802:	280a      	cmp	r0, #10
 8008804:	600b      	str	r3, [r1, #0]
 8008806:	491b      	ldr	r1, [pc, #108]	@ (8008874 <__b2d+0x90>)
 8008808:	dc15      	bgt.n	8008836 <__b2d+0x52>
 800880a:	f1c0 0c0b 	rsb	ip, r0, #11
 800880e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008812:	45b8      	cmp	r8, r7
 8008814:	ea43 0501 	orr.w	r5, r3, r1
 8008818:	bf34      	ite	cc
 800881a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800881e:	2300      	movcs	r3, #0
 8008820:	3015      	adds	r0, #21
 8008822:	fa02 f000 	lsl.w	r0, r2, r0
 8008826:	fa23 f30c 	lsr.w	r3, r3, ip
 800882a:	4303      	orrs	r3, r0
 800882c:	461c      	mov	r4, r3
 800882e:	ec45 4b10 	vmov	d0, r4, r5
 8008832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008836:	45b8      	cmp	r8, r7
 8008838:	bf3a      	itte	cc
 800883a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800883e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008842:	2300      	movcs	r3, #0
 8008844:	380b      	subs	r0, #11
 8008846:	d012      	beq.n	800886e <__b2d+0x8a>
 8008848:	f1c0 0120 	rsb	r1, r0, #32
 800884c:	fa23 f401 	lsr.w	r4, r3, r1
 8008850:	4082      	lsls	r2, r0
 8008852:	4322      	orrs	r2, r4
 8008854:	4547      	cmp	r7, r8
 8008856:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800885a:	bf8c      	ite	hi
 800885c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008860:	2200      	movls	r2, #0
 8008862:	4083      	lsls	r3, r0
 8008864:	40ca      	lsrs	r2, r1
 8008866:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800886a:	4313      	orrs	r3, r2
 800886c:	e7de      	b.n	800882c <__b2d+0x48>
 800886e:	ea42 0501 	orr.w	r5, r2, r1
 8008872:	e7db      	b.n	800882c <__b2d+0x48>
 8008874:	3ff00000 	.word	0x3ff00000

08008878 <__d2b>:
 8008878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800887c:	460f      	mov	r7, r1
 800887e:	2101      	movs	r1, #1
 8008880:	ec59 8b10 	vmov	r8, r9, d0
 8008884:	4616      	mov	r6, r2
 8008886:	f7ff fc13 	bl	80080b0 <_Balloc>
 800888a:	4604      	mov	r4, r0
 800888c:	b930      	cbnz	r0, 800889c <__d2b+0x24>
 800888e:	4602      	mov	r2, r0
 8008890:	4b23      	ldr	r3, [pc, #140]	@ (8008920 <__d2b+0xa8>)
 8008892:	4824      	ldr	r0, [pc, #144]	@ (8008924 <__d2b+0xac>)
 8008894:	f240 310f 	movw	r1, #783	@ 0x30f
 8008898:	f7fe fca0 	bl	80071dc <__assert_func>
 800889c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80088a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088a4:	b10d      	cbz	r5, 80088aa <__d2b+0x32>
 80088a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088aa:	9301      	str	r3, [sp, #4]
 80088ac:	f1b8 0300 	subs.w	r3, r8, #0
 80088b0:	d023      	beq.n	80088fa <__d2b+0x82>
 80088b2:	4668      	mov	r0, sp
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	f7ff fd0c 	bl	80082d2 <__lo0bits>
 80088ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80088be:	b1d0      	cbz	r0, 80088f6 <__d2b+0x7e>
 80088c0:	f1c0 0320 	rsb	r3, r0, #32
 80088c4:	fa02 f303 	lsl.w	r3, r2, r3
 80088c8:	430b      	orrs	r3, r1
 80088ca:	40c2      	lsrs	r2, r0
 80088cc:	6163      	str	r3, [r4, #20]
 80088ce:	9201      	str	r2, [sp, #4]
 80088d0:	9b01      	ldr	r3, [sp, #4]
 80088d2:	61a3      	str	r3, [r4, #24]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	bf0c      	ite	eq
 80088d8:	2201      	moveq	r2, #1
 80088da:	2202      	movne	r2, #2
 80088dc:	6122      	str	r2, [r4, #16]
 80088de:	b1a5      	cbz	r5, 800890a <__d2b+0x92>
 80088e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80088e4:	4405      	add	r5, r0
 80088e6:	603d      	str	r5, [r7, #0]
 80088e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80088ec:	6030      	str	r0, [r6, #0]
 80088ee:	4620      	mov	r0, r4
 80088f0:	b003      	add	sp, #12
 80088f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088f6:	6161      	str	r1, [r4, #20]
 80088f8:	e7ea      	b.n	80088d0 <__d2b+0x58>
 80088fa:	a801      	add	r0, sp, #4
 80088fc:	f7ff fce9 	bl	80082d2 <__lo0bits>
 8008900:	9b01      	ldr	r3, [sp, #4]
 8008902:	6163      	str	r3, [r4, #20]
 8008904:	3020      	adds	r0, #32
 8008906:	2201      	movs	r2, #1
 8008908:	e7e8      	b.n	80088dc <__d2b+0x64>
 800890a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800890e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008912:	6038      	str	r0, [r7, #0]
 8008914:	6918      	ldr	r0, [r3, #16]
 8008916:	f7ff fcbd 	bl	8008294 <__hi0bits>
 800891a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800891e:	e7e5      	b.n	80088ec <__d2b+0x74>
 8008920:	0800c8a7 	.word	0x0800c8a7
 8008924:	0800c8b8 	.word	0x0800c8b8

08008928 <__ratio>:
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	b085      	sub	sp, #20
 800892e:	e9cd 1000 	strd	r1, r0, [sp]
 8008932:	a902      	add	r1, sp, #8
 8008934:	f7ff ff56 	bl	80087e4 <__b2d>
 8008938:	9800      	ldr	r0, [sp, #0]
 800893a:	a903      	add	r1, sp, #12
 800893c:	ec55 4b10 	vmov	r4, r5, d0
 8008940:	f7ff ff50 	bl	80087e4 <__b2d>
 8008944:	9b01      	ldr	r3, [sp, #4]
 8008946:	6919      	ldr	r1, [r3, #16]
 8008948:	9b00      	ldr	r3, [sp, #0]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	1ac9      	subs	r1, r1, r3
 800894e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	ec5b ab10 	vmov	sl, fp, d0
 8008958:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800895c:	2b00      	cmp	r3, #0
 800895e:	bfce      	itee	gt
 8008960:	462a      	movgt	r2, r5
 8008962:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008966:	465a      	movle	r2, fp
 8008968:	462f      	mov	r7, r5
 800896a:	46d9      	mov	r9, fp
 800896c:	bfcc      	ite	gt
 800896e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008972:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008976:	464b      	mov	r3, r9
 8008978:	4652      	mov	r2, sl
 800897a:	4620      	mov	r0, r4
 800897c:	4639      	mov	r1, r7
 800897e:	f7f7 ff7d 	bl	800087c <__aeabi_ddiv>
 8008982:	ec41 0b10 	vmov	d0, r0, r1
 8008986:	b005      	add	sp, #20
 8008988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800898c <__copybits>:
 800898c:	3901      	subs	r1, #1
 800898e:	b570      	push	{r4, r5, r6, lr}
 8008990:	1149      	asrs	r1, r1, #5
 8008992:	6914      	ldr	r4, [r2, #16]
 8008994:	3101      	adds	r1, #1
 8008996:	f102 0314 	add.w	r3, r2, #20
 800899a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800899e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80089a2:	1f05      	subs	r5, r0, #4
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	d30c      	bcc.n	80089c2 <__copybits+0x36>
 80089a8:	1aa3      	subs	r3, r4, r2
 80089aa:	3b11      	subs	r3, #17
 80089ac:	f023 0303 	bic.w	r3, r3, #3
 80089b0:	3211      	adds	r2, #17
 80089b2:	42a2      	cmp	r2, r4
 80089b4:	bf88      	it	hi
 80089b6:	2300      	movhi	r3, #0
 80089b8:	4418      	add	r0, r3
 80089ba:	2300      	movs	r3, #0
 80089bc:	4288      	cmp	r0, r1
 80089be:	d305      	bcc.n	80089cc <__copybits+0x40>
 80089c0:	bd70      	pop	{r4, r5, r6, pc}
 80089c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80089c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80089ca:	e7eb      	b.n	80089a4 <__copybits+0x18>
 80089cc:	f840 3b04 	str.w	r3, [r0], #4
 80089d0:	e7f4      	b.n	80089bc <__copybits+0x30>

080089d2 <__any_on>:
 80089d2:	f100 0214 	add.w	r2, r0, #20
 80089d6:	6900      	ldr	r0, [r0, #16]
 80089d8:	114b      	asrs	r3, r1, #5
 80089da:	4298      	cmp	r0, r3
 80089dc:	b510      	push	{r4, lr}
 80089de:	db11      	blt.n	8008a04 <__any_on+0x32>
 80089e0:	dd0a      	ble.n	80089f8 <__any_on+0x26>
 80089e2:	f011 011f 	ands.w	r1, r1, #31
 80089e6:	d007      	beq.n	80089f8 <__any_on+0x26>
 80089e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80089ec:	fa24 f001 	lsr.w	r0, r4, r1
 80089f0:	fa00 f101 	lsl.w	r1, r0, r1
 80089f4:	428c      	cmp	r4, r1
 80089f6:	d10b      	bne.n	8008a10 <__any_on+0x3e>
 80089f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d803      	bhi.n	8008a08 <__any_on+0x36>
 8008a00:	2000      	movs	r0, #0
 8008a02:	bd10      	pop	{r4, pc}
 8008a04:	4603      	mov	r3, r0
 8008a06:	e7f7      	b.n	80089f8 <__any_on+0x26>
 8008a08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a0c:	2900      	cmp	r1, #0
 8008a0e:	d0f5      	beq.n	80089fc <__any_on+0x2a>
 8008a10:	2001      	movs	r0, #1
 8008a12:	e7f6      	b.n	8008a02 <__any_on+0x30>

08008a14 <sulp>:
 8008a14:	b570      	push	{r4, r5, r6, lr}
 8008a16:	4604      	mov	r4, r0
 8008a18:	460d      	mov	r5, r1
 8008a1a:	ec45 4b10 	vmov	d0, r4, r5
 8008a1e:	4616      	mov	r6, r2
 8008a20:	f7ff feba 	bl	8008798 <__ulp>
 8008a24:	ec51 0b10 	vmov	r0, r1, d0
 8008a28:	b17e      	cbz	r6, 8008a4a <sulp+0x36>
 8008a2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a2e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	dd09      	ble.n	8008a4a <sulp+0x36>
 8008a36:	051b      	lsls	r3, r3, #20
 8008a38:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008a3c:	2400      	movs	r4, #0
 8008a3e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008a42:	4622      	mov	r2, r4
 8008a44:	462b      	mov	r3, r5
 8008a46:	f7f7 fdef 	bl	8000628 <__aeabi_dmul>
 8008a4a:	ec41 0b10 	vmov	d0, r0, r1
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}

08008a50 <_strtod_l>:
 8008a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	b09f      	sub	sp, #124	@ 0x7c
 8008a56:	460c      	mov	r4, r1
 8008a58:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008a5e:	9005      	str	r0, [sp, #20]
 8008a60:	f04f 0a00 	mov.w	sl, #0
 8008a64:	f04f 0b00 	mov.w	fp, #0
 8008a68:	460a      	mov	r2, r1
 8008a6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a6c:	7811      	ldrb	r1, [r2, #0]
 8008a6e:	292b      	cmp	r1, #43	@ 0x2b
 8008a70:	d04a      	beq.n	8008b08 <_strtod_l+0xb8>
 8008a72:	d838      	bhi.n	8008ae6 <_strtod_l+0x96>
 8008a74:	290d      	cmp	r1, #13
 8008a76:	d832      	bhi.n	8008ade <_strtod_l+0x8e>
 8008a78:	2908      	cmp	r1, #8
 8008a7a:	d832      	bhi.n	8008ae2 <_strtod_l+0x92>
 8008a7c:	2900      	cmp	r1, #0
 8008a7e:	d03b      	beq.n	8008af8 <_strtod_l+0xa8>
 8008a80:	2200      	movs	r2, #0
 8008a82:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008a84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008a86:	782a      	ldrb	r2, [r5, #0]
 8008a88:	2a30      	cmp	r2, #48	@ 0x30
 8008a8a:	f040 80b3 	bne.w	8008bf4 <_strtod_l+0x1a4>
 8008a8e:	786a      	ldrb	r2, [r5, #1]
 8008a90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a94:	2a58      	cmp	r2, #88	@ 0x58
 8008a96:	d16e      	bne.n	8008b76 <_strtod_l+0x126>
 8008a98:	9302      	str	r3, [sp, #8]
 8008a9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	4a8e      	ldr	r2, [pc, #568]	@ (8008cdc <_strtod_l+0x28c>)
 8008aa4:	9805      	ldr	r0, [sp, #20]
 8008aa6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008aa8:	a919      	add	r1, sp, #100	@ 0x64
 8008aaa:	f001 fafb 	bl	800a0a4 <__gethex>
 8008aae:	f010 060f 	ands.w	r6, r0, #15
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	d005      	beq.n	8008ac2 <_strtod_l+0x72>
 8008ab6:	2e06      	cmp	r6, #6
 8008ab8:	d128      	bne.n	8008b0c <_strtod_l+0xbc>
 8008aba:	3501      	adds	r5, #1
 8008abc:	2300      	movs	r3, #0
 8008abe:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ac0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ac2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f040 858e 	bne.w	80095e6 <_strtod_l+0xb96>
 8008aca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008acc:	b1cb      	cbz	r3, 8008b02 <_strtod_l+0xb2>
 8008ace:	4652      	mov	r2, sl
 8008ad0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008ad4:	ec43 2b10 	vmov	d0, r2, r3
 8008ad8:	b01f      	add	sp, #124	@ 0x7c
 8008ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ade:	2920      	cmp	r1, #32
 8008ae0:	d1ce      	bne.n	8008a80 <_strtod_l+0x30>
 8008ae2:	3201      	adds	r2, #1
 8008ae4:	e7c1      	b.n	8008a6a <_strtod_l+0x1a>
 8008ae6:	292d      	cmp	r1, #45	@ 0x2d
 8008ae8:	d1ca      	bne.n	8008a80 <_strtod_l+0x30>
 8008aea:	2101      	movs	r1, #1
 8008aec:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008aee:	1c51      	adds	r1, r2, #1
 8008af0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008af2:	7852      	ldrb	r2, [r2, #1]
 8008af4:	2a00      	cmp	r2, #0
 8008af6:	d1c5      	bne.n	8008a84 <_strtod_l+0x34>
 8008af8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008afa:	9419      	str	r4, [sp, #100]	@ 0x64
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f040 8570 	bne.w	80095e2 <_strtod_l+0xb92>
 8008b02:	4652      	mov	r2, sl
 8008b04:	465b      	mov	r3, fp
 8008b06:	e7e5      	b.n	8008ad4 <_strtod_l+0x84>
 8008b08:	2100      	movs	r1, #0
 8008b0a:	e7ef      	b.n	8008aec <_strtod_l+0x9c>
 8008b0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b0e:	b13a      	cbz	r2, 8008b20 <_strtod_l+0xd0>
 8008b10:	2135      	movs	r1, #53	@ 0x35
 8008b12:	a81c      	add	r0, sp, #112	@ 0x70
 8008b14:	f7ff ff3a 	bl	800898c <__copybits>
 8008b18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b1a:	9805      	ldr	r0, [sp, #20]
 8008b1c:	f7ff fb08 	bl	8008130 <_Bfree>
 8008b20:	3e01      	subs	r6, #1
 8008b22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008b24:	2e04      	cmp	r6, #4
 8008b26:	d806      	bhi.n	8008b36 <_strtod_l+0xe6>
 8008b28:	e8df f006 	tbb	[pc, r6]
 8008b2c:	201d0314 	.word	0x201d0314
 8008b30:	14          	.byte	0x14
 8008b31:	00          	.byte	0x00
 8008b32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008b36:	05e1      	lsls	r1, r4, #23
 8008b38:	bf48      	it	mi
 8008b3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008b3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b42:	0d1b      	lsrs	r3, r3, #20
 8008b44:	051b      	lsls	r3, r3, #20
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1bb      	bne.n	8008ac2 <_strtod_l+0x72>
 8008b4a:	f7fe fafd 	bl	8007148 <__errno>
 8008b4e:	2322      	movs	r3, #34	@ 0x22
 8008b50:	6003      	str	r3, [r0, #0]
 8008b52:	e7b6      	b.n	8008ac2 <_strtod_l+0x72>
 8008b54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008b58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008b5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008b60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b64:	e7e7      	b.n	8008b36 <_strtod_l+0xe6>
 8008b66:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008ce4 <_strtod_l+0x294>
 8008b6a:	e7e4      	b.n	8008b36 <_strtod_l+0xe6>
 8008b6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008b70:	f04f 3aff 	mov.w	sl, #4294967295
 8008b74:	e7df      	b.n	8008b36 <_strtod_l+0xe6>
 8008b76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b78:	1c5a      	adds	r2, r3, #1
 8008b7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b7c:	785b      	ldrb	r3, [r3, #1]
 8008b7e:	2b30      	cmp	r3, #48	@ 0x30
 8008b80:	d0f9      	beq.n	8008b76 <_strtod_l+0x126>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d09d      	beq.n	8008ac2 <_strtod_l+0x72>
 8008b86:	2301      	movs	r3, #1
 8008b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b8e:	2300      	movs	r3, #0
 8008b90:	9308      	str	r3, [sp, #32]
 8008b92:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b94:	461f      	mov	r7, r3
 8008b96:	220a      	movs	r2, #10
 8008b98:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008b9a:	7805      	ldrb	r5, [r0, #0]
 8008b9c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008ba0:	b2d9      	uxtb	r1, r3
 8008ba2:	2909      	cmp	r1, #9
 8008ba4:	d928      	bls.n	8008bf8 <_strtod_l+0x1a8>
 8008ba6:	494e      	ldr	r1, [pc, #312]	@ (8008ce0 <_strtod_l+0x290>)
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f7fe f9fe 	bl	8006faa <strncmp>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d032      	beq.n	8008c18 <_strtod_l+0x1c8>
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	462a      	mov	r2, r5
 8008bb6:	4681      	mov	r9, r0
 8008bb8:	463d      	mov	r5, r7
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2a65      	cmp	r2, #101	@ 0x65
 8008bbe:	d001      	beq.n	8008bc4 <_strtod_l+0x174>
 8008bc0:	2a45      	cmp	r2, #69	@ 0x45
 8008bc2:	d114      	bne.n	8008bee <_strtod_l+0x19e>
 8008bc4:	b91d      	cbnz	r5, 8008bce <_strtod_l+0x17e>
 8008bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bc8:	4302      	orrs	r2, r0
 8008bca:	d095      	beq.n	8008af8 <_strtod_l+0xa8>
 8008bcc:	2500      	movs	r5, #0
 8008bce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008bd0:	1c62      	adds	r2, r4, #1
 8008bd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bd4:	7862      	ldrb	r2, [r4, #1]
 8008bd6:	2a2b      	cmp	r2, #43	@ 0x2b
 8008bd8:	d077      	beq.n	8008cca <_strtod_l+0x27a>
 8008bda:	2a2d      	cmp	r2, #45	@ 0x2d
 8008bdc:	d07b      	beq.n	8008cd6 <_strtod_l+0x286>
 8008bde:	f04f 0c00 	mov.w	ip, #0
 8008be2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008be6:	2909      	cmp	r1, #9
 8008be8:	f240 8082 	bls.w	8008cf0 <_strtod_l+0x2a0>
 8008bec:	9419      	str	r4, [sp, #100]	@ 0x64
 8008bee:	f04f 0800 	mov.w	r8, #0
 8008bf2:	e0a2      	b.n	8008d3a <_strtod_l+0x2ea>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	e7c7      	b.n	8008b88 <_strtod_l+0x138>
 8008bf8:	2f08      	cmp	r7, #8
 8008bfa:	bfd5      	itete	le
 8008bfc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008bfe:	9908      	ldrgt	r1, [sp, #32]
 8008c00:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c04:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008c08:	f100 0001 	add.w	r0, r0, #1
 8008c0c:	bfd4      	ite	le
 8008c0e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008c10:	9308      	strgt	r3, [sp, #32]
 8008c12:	3701      	adds	r7, #1
 8008c14:	9019      	str	r0, [sp, #100]	@ 0x64
 8008c16:	e7bf      	b.n	8008b98 <_strtod_l+0x148>
 8008c18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c1e:	785a      	ldrb	r2, [r3, #1]
 8008c20:	b37f      	cbz	r7, 8008c82 <_strtod_l+0x232>
 8008c22:	4681      	mov	r9, r0
 8008c24:	463d      	mov	r5, r7
 8008c26:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008c2a:	2b09      	cmp	r3, #9
 8008c2c:	d912      	bls.n	8008c54 <_strtod_l+0x204>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e7c4      	b.n	8008bbc <_strtod_l+0x16c>
 8008c32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c34:	1c5a      	adds	r2, r3, #1
 8008c36:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c38:	785a      	ldrb	r2, [r3, #1]
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	2a30      	cmp	r2, #48	@ 0x30
 8008c3e:	d0f8      	beq.n	8008c32 <_strtod_l+0x1e2>
 8008c40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008c44:	2b08      	cmp	r3, #8
 8008c46:	f200 84d3 	bhi.w	80095f0 <_strtod_l+0xba0>
 8008c4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c4e:	4681      	mov	r9, r0
 8008c50:	2000      	movs	r0, #0
 8008c52:	4605      	mov	r5, r0
 8008c54:	3a30      	subs	r2, #48	@ 0x30
 8008c56:	f100 0301 	add.w	r3, r0, #1
 8008c5a:	d02a      	beq.n	8008cb2 <_strtod_l+0x262>
 8008c5c:	4499      	add	r9, r3
 8008c5e:	eb00 0c05 	add.w	ip, r0, r5
 8008c62:	462b      	mov	r3, r5
 8008c64:	210a      	movs	r1, #10
 8008c66:	4563      	cmp	r3, ip
 8008c68:	d10d      	bne.n	8008c86 <_strtod_l+0x236>
 8008c6a:	1c69      	adds	r1, r5, #1
 8008c6c:	4401      	add	r1, r0
 8008c6e:	4428      	add	r0, r5
 8008c70:	2808      	cmp	r0, #8
 8008c72:	dc16      	bgt.n	8008ca2 <_strtod_l+0x252>
 8008c74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c76:	230a      	movs	r3, #10
 8008c78:	fb03 2300 	mla	r3, r3, r0, r2
 8008c7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c7e:	2300      	movs	r3, #0
 8008c80:	e018      	b.n	8008cb4 <_strtod_l+0x264>
 8008c82:	4638      	mov	r0, r7
 8008c84:	e7da      	b.n	8008c3c <_strtod_l+0x1ec>
 8008c86:	2b08      	cmp	r3, #8
 8008c88:	f103 0301 	add.w	r3, r3, #1
 8008c8c:	dc03      	bgt.n	8008c96 <_strtod_l+0x246>
 8008c8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008c90:	434e      	muls	r6, r1
 8008c92:	960a      	str	r6, [sp, #40]	@ 0x28
 8008c94:	e7e7      	b.n	8008c66 <_strtod_l+0x216>
 8008c96:	2b10      	cmp	r3, #16
 8008c98:	bfde      	ittt	le
 8008c9a:	9e08      	ldrle	r6, [sp, #32]
 8008c9c:	434e      	mulle	r6, r1
 8008c9e:	9608      	strle	r6, [sp, #32]
 8008ca0:	e7e1      	b.n	8008c66 <_strtod_l+0x216>
 8008ca2:	280f      	cmp	r0, #15
 8008ca4:	dceb      	bgt.n	8008c7e <_strtod_l+0x22e>
 8008ca6:	9808      	ldr	r0, [sp, #32]
 8008ca8:	230a      	movs	r3, #10
 8008caa:	fb03 2300 	mla	r3, r3, r0, r2
 8008cae:	9308      	str	r3, [sp, #32]
 8008cb0:	e7e5      	b.n	8008c7e <_strtod_l+0x22e>
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cb6:	1c50      	adds	r0, r2, #1
 8008cb8:	9019      	str	r0, [sp, #100]	@ 0x64
 8008cba:	7852      	ldrb	r2, [r2, #1]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	460d      	mov	r5, r1
 8008cc0:	e7b1      	b.n	8008c26 <_strtod_l+0x1d6>
 8008cc2:	f04f 0900 	mov.w	r9, #0
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e77d      	b.n	8008bc6 <_strtod_l+0x176>
 8008cca:	f04f 0c00 	mov.w	ip, #0
 8008cce:	1ca2      	adds	r2, r4, #2
 8008cd0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cd2:	78a2      	ldrb	r2, [r4, #2]
 8008cd4:	e785      	b.n	8008be2 <_strtod_l+0x192>
 8008cd6:	f04f 0c01 	mov.w	ip, #1
 8008cda:	e7f8      	b.n	8008cce <_strtod_l+0x27e>
 8008cdc:	0800ca28 	.word	0x0800ca28
 8008ce0:	0800ca10 	.word	0x0800ca10
 8008ce4:	7ff00000 	.word	0x7ff00000
 8008ce8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cea:	1c51      	adds	r1, r2, #1
 8008cec:	9119      	str	r1, [sp, #100]	@ 0x64
 8008cee:	7852      	ldrb	r2, [r2, #1]
 8008cf0:	2a30      	cmp	r2, #48	@ 0x30
 8008cf2:	d0f9      	beq.n	8008ce8 <_strtod_l+0x298>
 8008cf4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008cf8:	2908      	cmp	r1, #8
 8008cfa:	f63f af78 	bhi.w	8008bee <_strtod_l+0x19e>
 8008cfe:	3a30      	subs	r2, #48	@ 0x30
 8008d00:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d04:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008d06:	f04f 080a 	mov.w	r8, #10
 8008d0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d0c:	1c56      	adds	r6, r2, #1
 8008d0e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008d10:	7852      	ldrb	r2, [r2, #1]
 8008d12:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008d16:	f1be 0f09 	cmp.w	lr, #9
 8008d1a:	d939      	bls.n	8008d90 <_strtod_l+0x340>
 8008d1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008d1e:	1a76      	subs	r6, r6, r1
 8008d20:	2e08      	cmp	r6, #8
 8008d22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008d26:	dc03      	bgt.n	8008d30 <_strtod_l+0x2e0>
 8008d28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008d2a:	4588      	cmp	r8, r1
 8008d2c:	bfa8      	it	ge
 8008d2e:	4688      	movge	r8, r1
 8008d30:	f1bc 0f00 	cmp.w	ip, #0
 8008d34:	d001      	beq.n	8008d3a <_strtod_l+0x2ea>
 8008d36:	f1c8 0800 	rsb	r8, r8, #0
 8008d3a:	2d00      	cmp	r5, #0
 8008d3c:	d14e      	bne.n	8008ddc <_strtod_l+0x38c>
 8008d3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d40:	4308      	orrs	r0, r1
 8008d42:	f47f aebe 	bne.w	8008ac2 <_strtod_l+0x72>
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f47f aed6 	bne.w	8008af8 <_strtod_l+0xa8>
 8008d4c:	2a69      	cmp	r2, #105	@ 0x69
 8008d4e:	d028      	beq.n	8008da2 <_strtod_l+0x352>
 8008d50:	dc25      	bgt.n	8008d9e <_strtod_l+0x34e>
 8008d52:	2a49      	cmp	r2, #73	@ 0x49
 8008d54:	d025      	beq.n	8008da2 <_strtod_l+0x352>
 8008d56:	2a4e      	cmp	r2, #78	@ 0x4e
 8008d58:	f47f aece 	bne.w	8008af8 <_strtod_l+0xa8>
 8008d5c:	499b      	ldr	r1, [pc, #620]	@ (8008fcc <_strtod_l+0x57c>)
 8008d5e:	a819      	add	r0, sp, #100	@ 0x64
 8008d60:	f001 fbc2 	bl	800a4e8 <__match>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f43f aec7 	beq.w	8008af8 <_strtod_l+0xa8>
 8008d6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b28      	cmp	r3, #40	@ 0x28
 8008d70:	d12e      	bne.n	8008dd0 <_strtod_l+0x380>
 8008d72:	4997      	ldr	r1, [pc, #604]	@ (8008fd0 <_strtod_l+0x580>)
 8008d74:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d76:	a819      	add	r0, sp, #100	@ 0x64
 8008d78:	f001 fbca 	bl	800a510 <__hexnan>
 8008d7c:	2805      	cmp	r0, #5
 8008d7e:	d127      	bne.n	8008dd0 <_strtod_l+0x380>
 8008d80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d82:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008d86:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008d8a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008d8e:	e698      	b.n	8008ac2 <_strtod_l+0x72>
 8008d90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008d92:	fb08 2101 	mla	r1, r8, r1, r2
 8008d96:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008d9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d9c:	e7b5      	b.n	8008d0a <_strtod_l+0x2ba>
 8008d9e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008da0:	e7da      	b.n	8008d58 <_strtod_l+0x308>
 8008da2:	498c      	ldr	r1, [pc, #560]	@ (8008fd4 <_strtod_l+0x584>)
 8008da4:	a819      	add	r0, sp, #100	@ 0x64
 8008da6:	f001 fb9f 	bl	800a4e8 <__match>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	f43f aea4 	beq.w	8008af8 <_strtod_l+0xa8>
 8008db0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008db2:	4989      	ldr	r1, [pc, #548]	@ (8008fd8 <_strtod_l+0x588>)
 8008db4:	3b01      	subs	r3, #1
 8008db6:	a819      	add	r0, sp, #100	@ 0x64
 8008db8:	9319      	str	r3, [sp, #100]	@ 0x64
 8008dba:	f001 fb95 	bl	800a4e8 <__match>
 8008dbe:	b910      	cbnz	r0, 8008dc6 <_strtod_l+0x376>
 8008dc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	9319      	str	r3, [sp, #100]	@ 0x64
 8008dc6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008fe8 <_strtod_l+0x598>
 8008dca:	f04f 0a00 	mov.w	sl, #0
 8008dce:	e678      	b.n	8008ac2 <_strtod_l+0x72>
 8008dd0:	4882      	ldr	r0, [pc, #520]	@ (8008fdc <_strtod_l+0x58c>)
 8008dd2:	f001 f8dd 	bl	8009f90 <nan>
 8008dd6:	ec5b ab10 	vmov	sl, fp, d0
 8008dda:	e672      	b.n	8008ac2 <_strtod_l+0x72>
 8008ddc:	eba8 0309 	sub.w	r3, r8, r9
 8008de0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008de4:	2f00      	cmp	r7, #0
 8008de6:	bf08      	it	eq
 8008de8:	462f      	moveq	r7, r5
 8008dea:	2d10      	cmp	r5, #16
 8008dec:	462c      	mov	r4, r5
 8008dee:	bfa8      	it	ge
 8008df0:	2410      	movge	r4, #16
 8008df2:	f7f7 fb9f 	bl	8000534 <__aeabi_ui2d>
 8008df6:	2d09      	cmp	r5, #9
 8008df8:	4682      	mov	sl, r0
 8008dfa:	468b      	mov	fp, r1
 8008dfc:	dc13      	bgt.n	8008e26 <_strtod_l+0x3d6>
 8008dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f43f ae5e 	beq.w	8008ac2 <_strtod_l+0x72>
 8008e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e08:	dd78      	ble.n	8008efc <_strtod_l+0x4ac>
 8008e0a:	2b16      	cmp	r3, #22
 8008e0c:	dc5f      	bgt.n	8008ece <_strtod_l+0x47e>
 8008e0e:	4974      	ldr	r1, [pc, #464]	@ (8008fe0 <_strtod_l+0x590>)
 8008e10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e18:	4652      	mov	r2, sl
 8008e1a:	465b      	mov	r3, fp
 8008e1c:	f7f7 fc04 	bl	8000628 <__aeabi_dmul>
 8008e20:	4682      	mov	sl, r0
 8008e22:	468b      	mov	fp, r1
 8008e24:	e64d      	b.n	8008ac2 <_strtod_l+0x72>
 8008e26:	4b6e      	ldr	r3, [pc, #440]	@ (8008fe0 <_strtod_l+0x590>)
 8008e28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008e30:	f7f7 fbfa 	bl	8000628 <__aeabi_dmul>
 8008e34:	4682      	mov	sl, r0
 8008e36:	9808      	ldr	r0, [sp, #32]
 8008e38:	468b      	mov	fp, r1
 8008e3a:	f7f7 fb7b 	bl	8000534 <__aeabi_ui2d>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4650      	mov	r0, sl
 8008e44:	4659      	mov	r1, fp
 8008e46:	f7f7 fa39 	bl	80002bc <__adddf3>
 8008e4a:	2d0f      	cmp	r5, #15
 8008e4c:	4682      	mov	sl, r0
 8008e4e:	468b      	mov	fp, r1
 8008e50:	ddd5      	ble.n	8008dfe <_strtod_l+0x3ae>
 8008e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e54:	1b2c      	subs	r4, r5, r4
 8008e56:	441c      	add	r4, r3
 8008e58:	2c00      	cmp	r4, #0
 8008e5a:	f340 8096 	ble.w	8008f8a <_strtod_l+0x53a>
 8008e5e:	f014 030f 	ands.w	r3, r4, #15
 8008e62:	d00a      	beq.n	8008e7a <_strtod_l+0x42a>
 8008e64:	495e      	ldr	r1, [pc, #376]	@ (8008fe0 <_strtod_l+0x590>)
 8008e66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e6a:	4652      	mov	r2, sl
 8008e6c:	465b      	mov	r3, fp
 8008e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e72:	f7f7 fbd9 	bl	8000628 <__aeabi_dmul>
 8008e76:	4682      	mov	sl, r0
 8008e78:	468b      	mov	fp, r1
 8008e7a:	f034 040f 	bics.w	r4, r4, #15
 8008e7e:	d073      	beq.n	8008f68 <_strtod_l+0x518>
 8008e80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008e84:	dd48      	ble.n	8008f18 <_strtod_l+0x4c8>
 8008e86:	2400      	movs	r4, #0
 8008e88:	46a0      	mov	r8, r4
 8008e8a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008e8c:	46a1      	mov	r9, r4
 8008e8e:	9a05      	ldr	r2, [sp, #20]
 8008e90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008fe8 <_strtod_l+0x598>
 8008e94:	2322      	movs	r3, #34	@ 0x22
 8008e96:	6013      	str	r3, [r2, #0]
 8008e98:	f04f 0a00 	mov.w	sl, #0
 8008e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f43f ae0f 	beq.w	8008ac2 <_strtod_l+0x72>
 8008ea4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ea6:	9805      	ldr	r0, [sp, #20]
 8008ea8:	f7ff f942 	bl	8008130 <_Bfree>
 8008eac:	9805      	ldr	r0, [sp, #20]
 8008eae:	4649      	mov	r1, r9
 8008eb0:	f7ff f93e 	bl	8008130 <_Bfree>
 8008eb4:	9805      	ldr	r0, [sp, #20]
 8008eb6:	4641      	mov	r1, r8
 8008eb8:	f7ff f93a 	bl	8008130 <_Bfree>
 8008ebc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ebe:	9805      	ldr	r0, [sp, #20]
 8008ec0:	f7ff f936 	bl	8008130 <_Bfree>
 8008ec4:	9805      	ldr	r0, [sp, #20]
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	f7ff f932 	bl	8008130 <_Bfree>
 8008ecc:	e5f9      	b.n	8008ac2 <_strtod_l+0x72>
 8008ece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ed0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	dbbc      	blt.n	8008e52 <_strtod_l+0x402>
 8008ed8:	4c41      	ldr	r4, [pc, #260]	@ (8008fe0 <_strtod_l+0x590>)
 8008eda:	f1c5 050f 	rsb	r5, r5, #15
 8008ede:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008ee2:	4652      	mov	r2, sl
 8008ee4:	465b      	mov	r3, fp
 8008ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eea:	f7f7 fb9d 	bl	8000628 <__aeabi_dmul>
 8008eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef0:	1b5d      	subs	r5, r3, r5
 8008ef2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ef6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008efa:	e78f      	b.n	8008e1c <_strtod_l+0x3cc>
 8008efc:	3316      	adds	r3, #22
 8008efe:	dba8      	blt.n	8008e52 <_strtod_l+0x402>
 8008f00:	4b37      	ldr	r3, [pc, #220]	@ (8008fe0 <_strtod_l+0x590>)
 8008f02:	eba9 0808 	sub.w	r8, r9, r8
 8008f06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008f0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008f0e:	4650      	mov	r0, sl
 8008f10:	4659      	mov	r1, fp
 8008f12:	f7f7 fcb3 	bl	800087c <__aeabi_ddiv>
 8008f16:	e783      	b.n	8008e20 <_strtod_l+0x3d0>
 8008f18:	4b32      	ldr	r3, [pc, #200]	@ (8008fe4 <_strtod_l+0x594>)
 8008f1a:	9308      	str	r3, [sp, #32]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	1124      	asrs	r4, r4, #4
 8008f20:	4650      	mov	r0, sl
 8008f22:	4659      	mov	r1, fp
 8008f24:	461e      	mov	r6, r3
 8008f26:	2c01      	cmp	r4, #1
 8008f28:	dc21      	bgt.n	8008f6e <_strtod_l+0x51e>
 8008f2a:	b10b      	cbz	r3, 8008f30 <_strtod_l+0x4e0>
 8008f2c:	4682      	mov	sl, r0
 8008f2e:	468b      	mov	fp, r1
 8008f30:	492c      	ldr	r1, [pc, #176]	@ (8008fe4 <_strtod_l+0x594>)
 8008f32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008f36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008f3a:	4652      	mov	r2, sl
 8008f3c:	465b      	mov	r3, fp
 8008f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f42:	f7f7 fb71 	bl	8000628 <__aeabi_dmul>
 8008f46:	4b28      	ldr	r3, [pc, #160]	@ (8008fe8 <_strtod_l+0x598>)
 8008f48:	460a      	mov	r2, r1
 8008f4a:	400b      	ands	r3, r1
 8008f4c:	4927      	ldr	r1, [pc, #156]	@ (8008fec <_strtod_l+0x59c>)
 8008f4e:	428b      	cmp	r3, r1
 8008f50:	4682      	mov	sl, r0
 8008f52:	d898      	bhi.n	8008e86 <_strtod_l+0x436>
 8008f54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008f58:	428b      	cmp	r3, r1
 8008f5a:	bf86      	itte	hi
 8008f5c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008ff0 <_strtod_l+0x5a0>
 8008f60:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008f68:	2300      	movs	r3, #0
 8008f6a:	9308      	str	r3, [sp, #32]
 8008f6c:	e07a      	b.n	8009064 <_strtod_l+0x614>
 8008f6e:	07e2      	lsls	r2, r4, #31
 8008f70:	d505      	bpl.n	8008f7e <_strtod_l+0x52e>
 8008f72:	9b08      	ldr	r3, [sp, #32]
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7f7 fb56 	bl	8000628 <__aeabi_dmul>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	9a08      	ldr	r2, [sp, #32]
 8008f80:	3208      	adds	r2, #8
 8008f82:	3601      	adds	r6, #1
 8008f84:	1064      	asrs	r4, r4, #1
 8008f86:	9208      	str	r2, [sp, #32]
 8008f88:	e7cd      	b.n	8008f26 <_strtod_l+0x4d6>
 8008f8a:	d0ed      	beq.n	8008f68 <_strtod_l+0x518>
 8008f8c:	4264      	negs	r4, r4
 8008f8e:	f014 020f 	ands.w	r2, r4, #15
 8008f92:	d00a      	beq.n	8008faa <_strtod_l+0x55a>
 8008f94:	4b12      	ldr	r3, [pc, #72]	@ (8008fe0 <_strtod_l+0x590>)
 8008f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f9a:	4650      	mov	r0, sl
 8008f9c:	4659      	mov	r1, fp
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	f7f7 fc6b 	bl	800087c <__aeabi_ddiv>
 8008fa6:	4682      	mov	sl, r0
 8008fa8:	468b      	mov	fp, r1
 8008faa:	1124      	asrs	r4, r4, #4
 8008fac:	d0dc      	beq.n	8008f68 <_strtod_l+0x518>
 8008fae:	2c1f      	cmp	r4, #31
 8008fb0:	dd20      	ble.n	8008ff4 <_strtod_l+0x5a4>
 8008fb2:	2400      	movs	r4, #0
 8008fb4:	46a0      	mov	r8, r4
 8008fb6:	940a      	str	r4, [sp, #40]	@ 0x28
 8008fb8:	46a1      	mov	r9, r4
 8008fba:	9a05      	ldr	r2, [sp, #20]
 8008fbc:	2322      	movs	r3, #34	@ 0x22
 8008fbe:	f04f 0a00 	mov.w	sl, #0
 8008fc2:	f04f 0b00 	mov.w	fp, #0
 8008fc6:	6013      	str	r3, [r2, #0]
 8008fc8:	e768      	b.n	8008e9c <_strtod_l+0x44c>
 8008fca:	bf00      	nop
 8008fcc:	0800c769 	.word	0x0800c769
 8008fd0:	0800ca14 	.word	0x0800ca14
 8008fd4:	0800c761 	.word	0x0800c761
 8008fd8:	0800c845 	.word	0x0800c845
 8008fdc:	0800c841 	.word	0x0800c841
 8008fe0:	0800c948 	.word	0x0800c948
 8008fe4:	0800c920 	.word	0x0800c920
 8008fe8:	7ff00000 	.word	0x7ff00000
 8008fec:	7ca00000 	.word	0x7ca00000
 8008ff0:	7fefffff 	.word	0x7fefffff
 8008ff4:	f014 0310 	ands.w	r3, r4, #16
 8008ff8:	bf18      	it	ne
 8008ffa:	236a      	movne	r3, #106	@ 0x6a
 8008ffc:	4ea9      	ldr	r6, [pc, #676]	@ (80092a4 <_strtod_l+0x854>)
 8008ffe:	9308      	str	r3, [sp, #32]
 8009000:	4650      	mov	r0, sl
 8009002:	4659      	mov	r1, fp
 8009004:	2300      	movs	r3, #0
 8009006:	07e2      	lsls	r2, r4, #31
 8009008:	d504      	bpl.n	8009014 <_strtod_l+0x5c4>
 800900a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800900e:	f7f7 fb0b 	bl	8000628 <__aeabi_dmul>
 8009012:	2301      	movs	r3, #1
 8009014:	1064      	asrs	r4, r4, #1
 8009016:	f106 0608 	add.w	r6, r6, #8
 800901a:	d1f4      	bne.n	8009006 <_strtod_l+0x5b6>
 800901c:	b10b      	cbz	r3, 8009022 <_strtod_l+0x5d2>
 800901e:	4682      	mov	sl, r0
 8009020:	468b      	mov	fp, r1
 8009022:	9b08      	ldr	r3, [sp, #32]
 8009024:	b1b3      	cbz	r3, 8009054 <_strtod_l+0x604>
 8009026:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800902a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800902e:	2b00      	cmp	r3, #0
 8009030:	4659      	mov	r1, fp
 8009032:	dd0f      	ble.n	8009054 <_strtod_l+0x604>
 8009034:	2b1f      	cmp	r3, #31
 8009036:	dd55      	ble.n	80090e4 <_strtod_l+0x694>
 8009038:	2b34      	cmp	r3, #52	@ 0x34
 800903a:	bfde      	ittt	le
 800903c:	f04f 33ff 	movle.w	r3, #4294967295
 8009040:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009044:	4093      	lslle	r3, r2
 8009046:	f04f 0a00 	mov.w	sl, #0
 800904a:	bfcc      	ite	gt
 800904c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009050:	ea03 0b01 	andle.w	fp, r3, r1
 8009054:	2200      	movs	r2, #0
 8009056:	2300      	movs	r3, #0
 8009058:	4650      	mov	r0, sl
 800905a:	4659      	mov	r1, fp
 800905c:	f7f7 fd4c 	bl	8000af8 <__aeabi_dcmpeq>
 8009060:	2800      	cmp	r0, #0
 8009062:	d1a6      	bne.n	8008fb2 <_strtod_l+0x562>
 8009064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800906a:	9805      	ldr	r0, [sp, #20]
 800906c:	462b      	mov	r3, r5
 800906e:	463a      	mov	r2, r7
 8009070:	f7ff f8c6 	bl	8008200 <__s2b>
 8009074:	900a      	str	r0, [sp, #40]	@ 0x28
 8009076:	2800      	cmp	r0, #0
 8009078:	f43f af05 	beq.w	8008e86 <_strtod_l+0x436>
 800907c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800907e:	2a00      	cmp	r2, #0
 8009080:	eba9 0308 	sub.w	r3, r9, r8
 8009084:	bfa8      	it	ge
 8009086:	2300      	movge	r3, #0
 8009088:	9312      	str	r3, [sp, #72]	@ 0x48
 800908a:	2400      	movs	r4, #0
 800908c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009090:	9316      	str	r3, [sp, #88]	@ 0x58
 8009092:	46a0      	mov	r8, r4
 8009094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009096:	9805      	ldr	r0, [sp, #20]
 8009098:	6859      	ldr	r1, [r3, #4]
 800909a:	f7ff f809 	bl	80080b0 <_Balloc>
 800909e:	4681      	mov	r9, r0
 80090a0:	2800      	cmp	r0, #0
 80090a2:	f43f aef4 	beq.w	8008e8e <_strtod_l+0x43e>
 80090a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090a8:	691a      	ldr	r2, [r3, #16]
 80090aa:	3202      	adds	r2, #2
 80090ac:	f103 010c 	add.w	r1, r3, #12
 80090b0:	0092      	lsls	r2, r2, #2
 80090b2:	300c      	adds	r0, #12
 80090b4:	f7fe f87d 	bl	80071b2 <memcpy>
 80090b8:	ec4b ab10 	vmov	d0, sl, fp
 80090bc:	9805      	ldr	r0, [sp, #20]
 80090be:	aa1c      	add	r2, sp, #112	@ 0x70
 80090c0:	a91b      	add	r1, sp, #108	@ 0x6c
 80090c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80090c6:	f7ff fbd7 	bl	8008878 <__d2b>
 80090ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80090cc:	2800      	cmp	r0, #0
 80090ce:	f43f aede 	beq.w	8008e8e <_strtod_l+0x43e>
 80090d2:	9805      	ldr	r0, [sp, #20]
 80090d4:	2101      	movs	r1, #1
 80090d6:	f7ff f929 	bl	800832c <__i2b>
 80090da:	4680      	mov	r8, r0
 80090dc:	b948      	cbnz	r0, 80090f2 <_strtod_l+0x6a2>
 80090de:	f04f 0800 	mov.w	r8, #0
 80090e2:	e6d4      	b.n	8008e8e <_strtod_l+0x43e>
 80090e4:	f04f 32ff 	mov.w	r2, #4294967295
 80090e8:	fa02 f303 	lsl.w	r3, r2, r3
 80090ec:	ea03 0a0a 	and.w	sl, r3, sl
 80090f0:	e7b0      	b.n	8009054 <_strtod_l+0x604>
 80090f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80090f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80090f6:	2d00      	cmp	r5, #0
 80090f8:	bfab      	itete	ge
 80090fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80090fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80090fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009100:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009102:	bfac      	ite	ge
 8009104:	18ef      	addge	r7, r5, r3
 8009106:	1b5e      	sublt	r6, r3, r5
 8009108:	9b08      	ldr	r3, [sp, #32]
 800910a:	1aed      	subs	r5, r5, r3
 800910c:	4415      	add	r5, r2
 800910e:	4b66      	ldr	r3, [pc, #408]	@ (80092a8 <_strtod_l+0x858>)
 8009110:	3d01      	subs	r5, #1
 8009112:	429d      	cmp	r5, r3
 8009114:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009118:	da50      	bge.n	80091bc <_strtod_l+0x76c>
 800911a:	1b5b      	subs	r3, r3, r5
 800911c:	2b1f      	cmp	r3, #31
 800911e:	eba2 0203 	sub.w	r2, r2, r3
 8009122:	f04f 0101 	mov.w	r1, #1
 8009126:	dc3d      	bgt.n	80091a4 <_strtod_l+0x754>
 8009128:	fa01 f303 	lsl.w	r3, r1, r3
 800912c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800912e:	2300      	movs	r3, #0
 8009130:	9310      	str	r3, [sp, #64]	@ 0x40
 8009132:	18bd      	adds	r5, r7, r2
 8009134:	9b08      	ldr	r3, [sp, #32]
 8009136:	42af      	cmp	r7, r5
 8009138:	4416      	add	r6, r2
 800913a:	441e      	add	r6, r3
 800913c:	463b      	mov	r3, r7
 800913e:	bfa8      	it	ge
 8009140:	462b      	movge	r3, r5
 8009142:	42b3      	cmp	r3, r6
 8009144:	bfa8      	it	ge
 8009146:	4633      	movge	r3, r6
 8009148:	2b00      	cmp	r3, #0
 800914a:	bfc2      	ittt	gt
 800914c:	1aed      	subgt	r5, r5, r3
 800914e:	1af6      	subgt	r6, r6, r3
 8009150:	1aff      	subgt	r7, r7, r3
 8009152:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009154:	2b00      	cmp	r3, #0
 8009156:	dd16      	ble.n	8009186 <_strtod_l+0x736>
 8009158:	4641      	mov	r1, r8
 800915a:	9805      	ldr	r0, [sp, #20]
 800915c:	461a      	mov	r2, r3
 800915e:	f7ff f9a5 	bl	80084ac <__pow5mult>
 8009162:	4680      	mov	r8, r0
 8009164:	2800      	cmp	r0, #0
 8009166:	d0ba      	beq.n	80090de <_strtod_l+0x68e>
 8009168:	4601      	mov	r1, r0
 800916a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800916c:	9805      	ldr	r0, [sp, #20]
 800916e:	f7ff f8f3 	bl	8008358 <__multiply>
 8009172:	900e      	str	r0, [sp, #56]	@ 0x38
 8009174:	2800      	cmp	r0, #0
 8009176:	f43f ae8a 	beq.w	8008e8e <_strtod_l+0x43e>
 800917a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800917c:	9805      	ldr	r0, [sp, #20]
 800917e:	f7fe ffd7 	bl	8008130 <_Bfree>
 8009182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009184:	931a      	str	r3, [sp, #104]	@ 0x68
 8009186:	2d00      	cmp	r5, #0
 8009188:	dc1d      	bgt.n	80091c6 <_strtod_l+0x776>
 800918a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800918c:	2b00      	cmp	r3, #0
 800918e:	dd23      	ble.n	80091d8 <_strtod_l+0x788>
 8009190:	4649      	mov	r1, r9
 8009192:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009194:	9805      	ldr	r0, [sp, #20]
 8009196:	f7ff f989 	bl	80084ac <__pow5mult>
 800919a:	4681      	mov	r9, r0
 800919c:	b9e0      	cbnz	r0, 80091d8 <_strtod_l+0x788>
 800919e:	f04f 0900 	mov.w	r9, #0
 80091a2:	e674      	b.n	8008e8e <_strtod_l+0x43e>
 80091a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80091a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80091ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80091b0:	35e2      	adds	r5, #226	@ 0xe2
 80091b2:	fa01 f305 	lsl.w	r3, r1, r5
 80091b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80091b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80091ba:	e7ba      	b.n	8009132 <_strtod_l+0x6e2>
 80091bc:	2300      	movs	r3, #0
 80091be:	9310      	str	r3, [sp, #64]	@ 0x40
 80091c0:	2301      	movs	r3, #1
 80091c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091c4:	e7b5      	b.n	8009132 <_strtod_l+0x6e2>
 80091c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091c8:	9805      	ldr	r0, [sp, #20]
 80091ca:	462a      	mov	r2, r5
 80091cc:	f7ff f9c8 	bl	8008560 <__lshift>
 80091d0:	901a      	str	r0, [sp, #104]	@ 0x68
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d1d9      	bne.n	800918a <_strtod_l+0x73a>
 80091d6:	e65a      	b.n	8008e8e <_strtod_l+0x43e>
 80091d8:	2e00      	cmp	r6, #0
 80091da:	dd07      	ble.n	80091ec <_strtod_l+0x79c>
 80091dc:	4649      	mov	r1, r9
 80091de:	9805      	ldr	r0, [sp, #20]
 80091e0:	4632      	mov	r2, r6
 80091e2:	f7ff f9bd 	bl	8008560 <__lshift>
 80091e6:	4681      	mov	r9, r0
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d0d8      	beq.n	800919e <_strtod_l+0x74e>
 80091ec:	2f00      	cmp	r7, #0
 80091ee:	dd08      	ble.n	8009202 <_strtod_l+0x7b2>
 80091f0:	4641      	mov	r1, r8
 80091f2:	9805      	ldr	r0, [sp, #20]
 80091f4:	463a      	mov	r2, r7
 80091f6:	f7ff f9b3 	bl	8008560 <__lshift>
 80091fa:	4680      	mov	r8, r0
 80091fc:	2800      	cmp	r0, #0
 80091fe:	f43f ae46 	beq.w	8008e8e <_strtod_l+0x43e>
 8009202:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009204:	9805      	ldr	r0, [sp, #20]
 8009206:	464a      	mov	r2, r9
 8009208:	f7ff fa32 	bl	8008670 <__mdiff>
 800920c:	4604      	mov	r4, r0
 800920e:	2800      	cmp	r0, #0
 8009210:	f43f ae3d 	beq.w	8008e8e <_strtod_l+0x43e>
 8009214:	68c3      	ldr	r3, [r0, #12]
 8009216:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009218:	2300      	movs	r3, #0
 800921a:	60c3      	str	r3, [r0, #12]
 800921c:	4641      	mov	r1, r8
 800921e:	f7ff fa0b 	bl	8008638 <__mcmp>
 8009222:	2800      	cmp	r0, #0
 8009224:	da46      	bge.n	80092b4 <_strtod_l+0x864>
 8009226:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009228:	ea53 030a 	orrs.w	r3, r3, sl
 800922c:	d16c      	bne.n	8009308 <_strtod_l+0x8b8>
 800922e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009232:	2b00      	cmp	r3, #0
 8009234:	d168      	bne.n	8009308 <_strtod_l+0x8b8>
 8009236:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800923a:	0d1b      	lsrs	r3, r3, #20
 800923c:	051b      	lsls	r3, r3, #20
 800923e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009242:	d961      	bls.n	8009308 <_strtod_l+0x8b8>
 8009244:	6963      	ldr	r3, [r4, #20]
 8009246:	b913      	cbnz	r3, 800924e <_strtod_l+0x7fe>
 8009248:	6923      	ldr	r3, [r4, #16]
 800924a:	2b01      	cmp	r3, #1
 800924c:	dd5c      	ble.n	8009308 <_strtod_l+0x8b8>
 800924e:	4621      	mov	r1, r4
 8009250:	2201      	movs	r2, #1
 8009252:	9805      	ldr	r0, [sp, #20]
 8009254:	f7ff f984 	bl	8008560 <__lshift>
 8009258:	4641      	mov	r1, r8
 800925a:	4604      	mov	r4, r0
 800925c:	f7ff f9ec 	bl	8008638 <__mcmp>
 8009260:	2800      	cmp	r0, #0
 8009262:	dd51      	ble.n	8009308 <_strtod_l+0x8b8>
 8009264:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009268:	9a08      	ldr	r2, [sp, #32]
 800926a:	0d1b      	lsrs	r3, r3, #20
 800926c:	051b      	lsls	r3, r3, #20
 800926e:	2a00      	cmp	r2, #0
 8009270:	d06b      	beq.n	800934a <_strtod_l+0x8fa>
 8009272:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009276:	d868      	bhi.n	800934a <_strtod_l+0x8fa>
 8009278:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800927c:	f67f ae9d 	bls.w	8008fba <_strtod_l+0x56a>
 8009280:	4b0a      	ldr	r3, [pc, #40]	@ (80092ac <_strtod_l+0x85c>)
 8009282:	4650      	mov	r0, sl
 8009284:	4659      	mov	r1, fp
 8009286:	2200      	movs	r2, #0
 8009288:	f7f7 f9ce 	bl	8000628 <__aeabi_dmul>
 800928c:	4b08      	ldr	r3, [pc, #32]	@ (80092b0 <_strtod_l+0x860>)
 800928e:	400b      	ands	r3, r1
 8009290:	4682      	mov	sl, r0
 8009292:	468b      	mov	fp, r1
 8009294:	2b00      	cmp	r3, #0
 8009296:	f47f ae05 	bne.w	8008ea4 <_strtod_l+0x454>
 800929a:	9a05      	ldr	r2, [sp, #20]
 800929c:	2322      	movs	r3, #34	@ 0x22
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	e600      	b.n	8008ea4 <_strtod_l+0x454>
 80092a2:	bf00      	nop
 80092a4:	0800ca40 	.word	0x0800ca40
 80092a8:	fffffc02 	.word	0xfffffc02
 80092ac:	39500000 	.word	0x39500000
 80092b0:	7ff00000 	.word	0x7ff00000
 80092b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80092b8:	d165      	bne.n	8009386 <_strtod_l+0x936>
 80092ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80092bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092c0:	b35a      	cbz	r2, 800931a <_strtod_l+0x8ca>
 80092c2:	4a9f      	ldr	r2, [pc, #636]	@ (8009540 <_strtod_l+0xaf0>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d12b      	bne.n	8009320 <_strtod_l+0x8d0>
 80092c8:	9b08      	ldr	r3, [sp, #32]
 80092ca:	4651      	mov	r1, sl
 80092cc:	b303      	cbz	r3, 8009310 <_strtod_l+0x8c0>
 80092ce:	4b9d      	ldr	r3, [pc, #628]	@ (8009544 <_strtod_l+0xaf4>)
 80092d0:	465a      	mov	r2, fp
 80092d2:	4013      	ands	r3, r2
 80092d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80092d8:	f04f 32ff 	mov.w	r2, #4294967295
 80092dc:	d81b      	bhi.n	8009316 <_strtod_l+0x8c6>
 80092de:	0d1b      	lsrs	r3, r3, #20
 80092e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80092e4:	fa02 f303 	lsl.w	r3, r2, r3
 80092e8:	4299      	cmp	r1, r3
 80092ea:	d119      	bne.n	8009320 <_strtod_l+0x8d0>
 80092ec:	4b96      	ldr	r3, [pc, #600]	@ (8009548 <_strtod_l+0xaf8>)
 80092ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d102      	bne.n	80092fa <_strtod_l+0x8aa>
 80092f4:	3101      	adds	r1, #1
 80092f6:	f43f adca 	beq.w	8008e8e <_strtod_l+0x43e>
 80092fa:	4b92      	ldr	r3, [pc, #584]	@ (8009544 <_strtod_l+0xaf4>)
 80092fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092fe:	401a      	ands	r2, r3
 8009300:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009304:	f04f 0a00 	mov.w	sl, #0
 8009308:	9b08      	ldr	r3, [sp, #32]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1b8      	bne.n	8009280 <_strtod_l+0x830>
 800930e:	e5c9      	b.n	8008ea4 <_strtod_l+0x454>
 8009310:	f04f 33ff 	mov.w	r3, #4294967295
 8009314:	e7e8      	b.n	80092e8 <_strtod_l+0x898>
 8009316:	4613      	mov	r3, r2
 8009318:	e7e6      	b.n	80092e8 <_strtod_l+0x898>
 800931a:	ea53 030a 	orrs.w	r3, r3, sl
 800931e:	d0a1      	beq.n	8009264 <_strtod_l+0x814>
 8009320:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009322:	b1db      	cbz	r3, 800935c <_strtod_l+0x90c>
 8009324:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009326:	4213      	tst	r3, r2
 8009328:	d0ee      	beq.n	8009308 <_strtod_l+0x8b8>
 800932a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800932c:	9a08      	ldr	r2, [sp, #32]
 800932e:	4650      	mov	r0, sl
 8009330:	4659      	mov	r1, fp
 8009332:	b1bb      	cbz	r3, 8009364 <_strtod_l+0x914>
 8009334:	f7ff fb6e 	bl	8008a14 <sulp>
 8009338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800933c:	ec53 2b10 	vmov	r2, r3, d0
 8009340:	f7f6 ffbc 	bl	80002bc <__adddf3>
 8009344:	4682      	mov	sl, r0
 8009346:	468b      	mov	fp, r1
 8009348:	e7de      	b.n	8009308 <_strtod_l+0x8b8>
 800934a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800934e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009352:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009356:	f04f 3aff 	mov.w	sl, #4294967295
 800935a:	e7d5      	b.n	8009308 <_strtod_l+0x8b8>
 800935c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800935e:	ea13 0f0a 	tst.w	r3, sl
 8009362:	e7e1      	b.n	8009328 <_strtod_l+0x8d8>
 8009364:	f7ff fb56 	bl	8008a14 <sulp>
 8009368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800936c:	ec53 2b10 	vmov	r2, r3, d0
 8009370:	f7f6 ffa2 	bl	80002b8 <__aeabi_dsub>
 8009374:	2200      	movs	r2, #0
 8009376:	2300      	movs	r3, #0
 8009378:	4682      	mov	sl, r0
 800937a:	468b      	mov	fp, r1
 800937c:	f7f7 fbbc 	bl	8000af8 <__aeabi_dcmpeq>
 8009380:	2800      	cmp	r0, #0
 8009382:	d0c1      	beq.n	8009308 <_strtod_l+0x8b8>
 8009384:	e619      	b.n	8008fba <_strtod_l+0x56a>
 8009386:	4641      	mov	r1, r8
 8009388:	4620      	mov	r0, r4
 800938a:	f7ff facd 	bl	8008928 <__ratio>
 800938e:	ec57 6b10 	vmov	r6, r7, d0
 8009392:	2200      	movs	r2, #0
 8009394:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009398:	4630      	mov	r0, r6
 800939a:	4639      	mov	r1, r7
 800939c:	f7f7 fbc0 	bl	8000b20 <__aeabi_dcmple>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d06f      	beq.n	8009484 <_strtod_l+0xa34>
 80093a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d17a      	bne.n	80094a0 <_strtod_l+0xa50>
 80093aa:	f1ba 0f00 	cmp.w	sl, #0
 80093ae:	d158      	bne.n	8009462 <_strtod_l+0xa12>
 80093b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d15a      	bne.n	8009470 <_strtod_l+0xa20>
 80093ba:	4b64      	ldr	r3, [pc, #400]	@ (800954c <_strtod_l+0xafc>)
 80093bc:	2200      	movs	r2, #0
 80093be:	4630      	mov	r0, r6
 80093c0:	4639      	mov	r1, r7
 80093c2:	f7f7 fba3 	bl	8000b0c <__aeabi_dcmplt>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d159      	bne.n	800947e <_strtod_l+0xa2e>
 80093ca:	4630      	mov	r0, r6
 80093cc:	4639      	mov	r1, r7
 80093ce:	4b60      	ldr	r3, [pc, #384]	@ (8009550 <_strtod_l+0xb00>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	f7f7 f929 	bl	8000628 <__aeabi_dmul>
 80093d6:	4606      	mov	r6, r0
 80093d8:	460f      	mov	r7, r1
 80093da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80093de:	9606      	str	r6, [sp, #24]
 80093e0:	9307      	str	r3, [sp, #28]
 80093e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093e6:	4d57      	ldr	r5, [pc, #348]	@ (8009544 <_strtod_l+0xaf4>)
 80093e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80093ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093ee:	401d      	ands	r5, r3
 80093f0:	4b58      	ldr	r3, [pc, #352]	@ (8009554 <_strtod_l+0xb04>)
 80093f2:	429d      	cmp	r5, r3
 80093f4:	f040 80b2 	bne.w	800955c <_strtod_l+0xb0c>
 80093f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80093fe:	ec4b ab10 	vmov	d0, sl, fp
 8009402:	f7ff f9c9 	bl	8008798 <__ulp>
 8009406:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800940a:	ec51 0b10 	vmov	r0, r1, d0
 800940e:	f7f7 f90b 	bl	8000628 <__aeabi_dmul>
 8009412:	4652      	mov	r2, sl
 8009414:	465b      	mov	r3, fp
 8009416:	f7f6 ff51 	bl	80002bc <__adddf3>
 800941a:	460b      	mov	r3, r1
 800941c:	4949      	ldr	r1, [pc, #292]	@ (8009544 <_strtod_l+0xaf4>)
 800941e:	4a4e      	ldr	r2, [pc, #312]	@ (8009558 <_strtod_l+0xb08>)
 8009420:	4019      	ands	r1, r3
 8009422:	4291      	cmp	r1, r2
 8009424:	4682      	mov	sl, r0
 8009426:	d942      	bls.n	80094ae <_strtod_l+0xa5e>
 8009428:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800942a:	4b47      	ldr	r3, [pc, #284]	@ (8009548 <_strtod_l+0xaf8>)
 800942c:	429a      	cmp	r2, r3
 800942e:	d103      	bne.n	8009438 <_strtod_l+0x9e8>
 8009430:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009432:	3301      	adds	r3, #1
 8009434:	f43f ad2b 	beq.w	8008e8e <_strtod_l+0x43e>
 8009438:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009548 <_strtod_l+0xaf8>
 800943c:	f04f 3aff 	mov.w	sl, #4294967295
 8009440:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009442:	9805      	ldr	r0, [sp, #20]
 8009444:	f7fe fe74 	bl	8008130 <_Bfree>
 8009448:	9805      	ldr	r0, [sp, #20]
 800944a:	4649      	mov	r1, r9
 800944c:	f7fe fe70 	bl	8008130 <_Bfree>
 8009450:	9805      	ldr	r0, [sp, #20]
 8009452:	4641      	mov	r1, r8
 8009454:	f7fe fe6c 	bl	8008130 <_Bfree>
 8009458:	9805      	ldr	r0, [sp, #20]
 800945a:	4621      	mov	r1, r4
 800945c:	f7fe fe68 	bl	8008130 <_Bfree>
 8009460:	e618      	b.n	8009094 <_strtod_l+0x644>
 8009462:	f1ba 0f01 	cmp.w	sl, #1
 8009466:	d103      	bne.n	8009470 <_strtod_l+0xa20>
 8009468:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800946a:	2b00      	cmp	r3, #0
 800946c:	f43f ada5 	beq.w	8008fba <_strtod_l+0x56a>
 8009470:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009520 <_strtod_l+0xad0>
 8009474:	4f35      	ldr	r7, [pc, #212]	@ (800954c <_strtod_l+0xafc>)
 8009476:	ed8d 7b06 	vstr	d7, [sp, #24]
 800947a:	2600      	movs	r6, #0
 800947c:	e7b1      	b.n	80093e2 <_strtod_l+0x992>
 800947e:	4f34      	ldr	r7, [pc, #208]	@ (8009550 <_strtod_l+0xb00>)
 8009480:	2600      	movs	r6, #0
 8009482:	e7aa      	b.n	80093da <_strtod_l+0x98a>
 8009484:	4b32      	ldr	r3, [pc, #200]	@ (8009550 <_strtod_l+0xb00>)
 8009486:	4630      	mov	r0, r6
 8009488:	4639      	mov	r1, r7
 800948a:	2200      	movs	r2, #0
 800948c:	f7f7 f8cc 	bl	8000628 <__aeabi_dmul>
 8009490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009492:	4606      	mov	r6, r0
 8009494:	460f      	mov	r7, r1
 8009496:	2b00      	cmp	r3, #0
 8009498:	d09f      	beq.n	80093da <_strtod_l+0x98a>
 800949a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800949e:	e7a0      	b.n	80093e2 <_strtod_l+0x992>
 80094a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009528 <_strtod_l+0xad8>
 80094a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80094a8:	ec57 6b17 	vmov	r6, r7, d7
 80094ac:	e799      	b.n	80093e2 <_strtod_l+0x992>
 80094ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80094b2:	9b08      	ldr	r3, [sp, #32]
 80094b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1c1      	bne.n	8009440 <_strtod_l+0x9f0>
 80094bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094c0:	0d1b      	lsrs	r3, r3, #20
 80094c2:	051b      	lsls	r3, r3, #20
 80094c4:	429d      	cmp	r5, r3
 80094c6:	d1bb      	bne.n	8009440 <_strtod_l+0x9f0>
 80094c8:	4630      	mov	r0, r6
 80094ca:	4639      	mov	r1, r7
 80094cc:	f7f7 fc0c 	bl	8000ce8 <__aeabi_d2lz>
 80094d0:	f7f7 f87c 	bl	80005cc <__aeabi_l2d>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4630      	mov	r0, r6
 80094da:	4639      	mov	r1, r7
 80094dc:	f7f6 feec 	bl	80002b8 <__aeabi_dsub>
 80094e0:	460b      	mov	r3, r1
 80094e2:	4602      	mov	r2, r0
 80094e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80094e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80094ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094ee:	ea46 060a 	orr.w	r6, r6, sl
 80094f2:	431e      	orrs	r6, r3
 80094f4:	d06f      	beq.n	80095d6 <_strtod_l+0xb86>
 80094f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009530 <_strtod_l+0xae0>)
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f7f7 fb06 	bl	8000b0c <__aeabi_dcmplt>
 8009500:	2800      	cmp	r0, #0
 8009502:	f47f accf 	bne.w	8008ea4 <_strtod_l+0x454>
 8009506:	a30c      	add	r3, pc, #48	@ (adr r3, 8009538 <_strtod_l+0xae8>)
 8009508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009510:	f7f7 fb1a 	bl	8000b48 <__aeabi_dcmpgt>
 8009514:	2800      	cmp	r0, #0
 8009516:	d093      	beq.n	8009440 <_strtod_l+0x9f0>
 8009518:	e4c4      	b.n	8008ea4 <_strtod_l+0x454>
 800951a:	bf00      	nop
 800951c:	f3af 8000 	nop.w
 8009520:	00000000 	.word	0x00000000
 8009524:	bff00000 	.word	0xbff00000
 8009528:	00000000 	.word	0x00000000
 800952c:	3ff00000 	.word	0x3ff00000
 8009530:	94a03595 	.word	0x94a03595
 8009534:	3fdfffff 	.word	0x3fdfffff
 8009538:	35afe535 	.word	0x35afe535
 800953c:	3fe00000 	.word	0x3fe00000
 8009540:	000fffff 	.word	0x000fffff
 8009544:	7ff00000 	.word	0x7ff00000
 8009548:	7fefffff 	.word	0x7fefffff
 800954c:	3ff00000 	.word	0x3ff00000
 8009550:	3fe00000 	.word	0x3fe00000
 8009554:	7fe00000 	.word	0x7fe00000
 8009558:	7c9fffff 	.word	0x7c9fffff
 800955c:	9b08      	ldr	r3, [sp, #32]
 800955e:	b323      	cbz	r3, 80095aa <_strtod_l+0xb5a>
 8009560:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009564:	d821      	bhi.n	80095aa <_strtod_l+0xb5a>
 8009566:	a328      	add	r3, pc, #160	@ (adr r3, 8009608 <_strtod_l+0xbb8>)
 8009568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956c:	4630      	mov	r0, r6
 800956e:	4639      	mov	r1, r7
 8009570:	f7f7 fad6 	bl	8000b20 <__aeabi_dcmple>
 8009574:	b1a0      	cbz	r0, 80095a0 <_strtod_l+0xb50>
 8009576:	4639      	mov	r1, r7
 8009578:	4630      	mov	r0, r6
 800957a:	f7f7 fb2d 	bl	8000bd8 <__aeabi_d2uiz>
 800957e:	2801      	cmp	r0, #1
 8009580:	bf38      	it	cc
 8009582:	2001      	movcc	r0, #1
 8009584:	f7f6 ffd6 	bl	8000534 <__aeabi_ui2d>
 8009588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800958a:	4606      	mov	r6, r0
 800958c:	460f      	mov	r7, r1
 800958e:	b9fb      	cbnz	r3, 80095d0 <_strtod_l+0xb80>
 8009590:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009594:	9014      	str	r0, [sp, #80]	@ 0x50
 8009596:	9315      	str	r3, [sp, #84]	@ 0x54
 8009598:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800959c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80095a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80095a6:	1b5b      	subs	r3, r3, r5
 80095a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80095aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80095ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80095b2:	f7ff f8f1 	bl	8008798 <__ulp>
 80095b6:	4650      	mov	r0, sl
 80095b8:	ec53 2b10 	vmov	r2, r3, d0
 80095bc:	4659      	mov	r1, fp
 80095be:	f7f7 f833 	bl	8000628 <__aeabi_dmul>
 80095c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80095c6:	f7f6 fe79 	bl	80002bc <__adddf3>
 80095ca:	4682      	mov	sl, r0
 80095cc:	468b      	mov	fp, r1
 80095ce:	e770      	b.n	80094b2 <_strtod_l+0xa62>
 80095d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80095d4:	e7e0      	b.n	8009598 <_strtod_l+0xb48>
 80095d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009610 <_strtod_l+0xbc0>)
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f7f7 fa96 	bl	8000b0c <__aeabi_dcmplt>
 80095e0:	e798      	b.n	8009514 <_strtod_l+0xac4>
 80095e2:	2300      	movs	r3, #0
 80095e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80095e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	f7ff ba6d 	b.w	8008aca <_strtod_l+0x7a>
 80095f0:	2a65      	cmp	r2, #101	@ 0x65
 80095f2:	f43f ab66 	beq.w	8008cc2 <_strtod_l+0x272>
 80095f6:	2a45      	cmp	r2, #69	@ 0x45
 80095f8:	f43f ab63 	beq.w	8008cc2 <_strtod_l+0x272>
 80095fc:	2301      	movs	r3, #1
 80095fe:	f7ff bb9e 	b.w	8008d3e <_strtod_l+0x2ee>
 8009602:	bf00      	nop
 8009604:	f3af 8000 	nop.w
 8009608:	ffc00000 	.word	0xffc00000
 800960c:	41dfffff 	.word	0x41dfffff
 8009610:	94a03595 	.word	0x94a03595
 8009614:	3fcfffff 	.word	0x3fcfffff

08009618 <_strtod_r>:
 8009618:	4b01      	ldr	r3, [pc, #4]	@ (8009620 <_strtod_r+0x8>)
 800961a:	f7ff ba19 	b.w	8008a50 <_strtod_l>
 800961e:	bf00      	nop
 8009620:	20000098 	.word	0x20000098

08009624 <_strtol_l.constprop.0>:
 8009624:	2b24      	cmp	r3, #36	@ 0x24
 8009626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800962a:	4686      	mov	lr, r0
 800962c:	4690      	mov	r8, r2
 800962e:	d801      	bhi.n	8009634 <_strtol_l.constprop.0+0x10>
 8009630:	2b01      	cmp	r3, #1
 8009632:	d106      	bne.n	8009642 <_strtol_l.constprop.0+0x1e>
 8009634:	f7fd fd88 	bl	8007148 <__errno>
 8009638:	2316      	movs	r3, #22
 800963a:	6003      	str	r3, [r0, #0]
 800963c:	2000      	movs	r0, #0
 800963e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009642:	4834      	ldr	r0, [pc, #208]	@ (8009714 <_strtol_l.constprop.0+0xf0>)
 8009644:	460d      	mov	r5, r1
 8009646:	462a      	mov	r2, r5
 8009648:	f815 4b01 	ldrb.w	r4, [r5], #1
 800964c:	5d06      	ldrb	r6, [r0, r4]
 800964e:	f016 0608 	ands.w	r6, r6, #8
 8009652:	d1f8      	bne.n	8009646 <_strtol_l.constprop.0+0x22>
 8009654:	2c2d      	cmp	r4, #45	@ 0x2d
 8009656:	d12d      	bne.n	80096b4 <_strtol_l.constprop.0+0x90>
 8009658:	782c      	ldrb	r4, [r5, #0]
 800965a:	2601      	movs	r6, #1
 800965c:	1c95      	adds	r5, r2, #2
 800965e:	f033 0210 	bics.w	r2, r3, #16
 8009662:	d109      	bne.n	8009678 <_strtol_l.constprop.0+0x54>
 8009664:	2c30      	cmp	r4, #48	@ 0x30
 8009666:	d12a      	bne.n	80096be <_strtol_l.constprop.0+0x9a>
 8009668:	782a      	ldrb	r2, [r5, #0]
 800966a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800966e:	2a58      	cmp	r2, #88	@ 0x58
 8009670:	d125      	bne.n	80096be <_strtol_l.constprop.0+0x9a>
 8009672:	786c      	ldrb	r4, [r5, #1]
 8009674:	2310      	movs	r3, #16
 8009676:	3502      	adds	r5, #2
 8009678:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800967c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009680:	2200      	movs	r2, #0
 8009682:	fbbc f9f3 	udiv	r9, ip, r3
 8009686:	4610      	mov	r0, r2
 8009688:	fb03 ca19 	mls	sl, r3, r9, ip
 800968c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009690:	2f09      	cmp	r7, #9
 8009692:	d81b      	bhi.n	80096cc <_strtol_l.constprop.0+0xa8>
 8009694:	463c      	mov	r4, r7
 8009696:	42a3      	cmp	r3, r4
 8009698:	dd27      	ble.n	80096ea <_strtol_l.constprop.0+0xc6>
 800969a:	1c57      	adds	r7, r2, #1
 800969c:	d007      	beq.n	80096ae <_strtol_l.constprop.0+0x8a>
 800969e:	4581      	cmp	r9, r0
 80096a0:	d320      	bcc.n	80096e4 <_strtol_l.constprop.0+0xc0>
 80096a2:	d101      	bne.n	80096a8 <_strtol_l.constprop.0+0x84>
 80096a4:	45a2      	cmp	sl, r4
 80096a6:	db1d      	blt.n	80096e4 <_strtol_l.constprop.0+0xc0>
 80096a8:	fb00 4003 	mla	r0, r0, r3, r4
 80096ac:	2201      	movs	r2, #1
 80096ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096b2:	e7eb      	b.n	800968c <_strtol_l.constprop.0+0x68>
 80096b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80096b6:	bf04      	itt	eq
 80096b8:	782c      	ldrbeq	r4, [r5, #0]
 80096ba:	1c95      	addeq	r5, r2, #2
 80096bc:	e7cf      	b.n	800965e <_strtol_l.constprop.0+0x3a>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1da      	bne.n	8009678 <_strtol_l.constprop.0+0x54>
 80096c2:	2c30      	cmp	r4, #48	@ 0x30
 80096c4:	bf0c      	ite	eq
 80096c6:	2308      	moveq	r3, #8
 80096c8:	230a      	movne	r3, #10
 80096ca:	e7d5      	b.n	8009678 <_strtol_l.constprop.0+0x54>
 80096cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80096d0:	2f19      	cmp	r7, #25
 80096d2:	d801      	bhi.n	80096d8 <_strtol_l.constprop.0+0xb4>
 80096d4:	3c37      	subs	r4, #55	@ 0x37
 80096d6:	e7de      	b.n	8009696 <_strtol_l.constprop.0+0x72>
 80096d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80096dc:	2f19      	cmp	r7, #25
 80096de:	d804      	bhi.n	80096ea <_strtol_l.constprop.0+0xc6>
 80096e0:	3c57      	subs	r4, #87	@ 0x57
 80096e2:	e7d8      	b.n	8009696 <_strtol_l.constprop.0+0x72>
 80096e4:	f04f 32ff 	mov.w	r2, #4294967295
 80096e8:	e7e1      	b.n	80096ae <_strtol_l.constprop.0+0x8a>
 80096ea:	1c53      	adds	r3, r2, #1
 80096ec:	d108      	bne.n	8009700 <_strtol_l.constprop.0+0xdc>
 80096ee:	2322      	movs	r3, #34	@ 0x22
 80096f0:	f8ce 3000 	str.w	r3, [lr]
 80096f4:	4660      	mov	r0, ip
 80096f6:	f1b8 0f00 	cmp.w	r8, #0
 80096fa:	d0a0      	beq.n	800963e <_strtol_l.constprop.0+0x1a>
 80096fc:	1e69      	subs	r1, r5, #1
 80096fe:	e006      	b.n	800970e <_strtol_l.constprop.0+0xea>
 8009700:	b106      	cbz	r6, 8009704 <_strtol_l.constprop.0+0xe0>
 8009702:	4240      	negs	r0, r0
 8009704:	f1b8 0f00 	cmp.w	r8, #0
 8009708:	d099      	beq.n	800963e <_strtol_l.constprop.0+0x1a>
 800970a:	2a00      	cmp	r2, #0
 800970c:	d1f6      	bne.n	80096fc <_strtol_l.constprop.0+0xd8>
 800970e:	f8c8 1000 	str.w	r1, [r8]
 8009712:	e794      	b.n	800963e <_strtol_l.constprop.0+0x1a>
 8009714:	0800ca69 	.word	0x0800ca69

08009718 <_strtol_r>:
 8009718:	f7ff bf84 	b.w	8009624 <_strtol_l.constprop.0>

0800971c <__ssputs_r>:
 800971c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009720:	688e      	ldr	r6, [r1, #8]
 8009722:	461f      	mov	r7, r3
 8009724:	42be      	cmp	r6, r7
 8009726:	680b      	ldr	r3, [r1, #0]
 8009728:	4682      	mov	sl, r0
 800972a:	460c      	mov	r4, r1
 800972c:	4690      	mov	r8, r2
 800972e:	d82d      	bhi.n	800978c <__ssputs_r+0x70>
 8009730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009734:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009738:	d026      	beq.n	8009788 <__ssputs_r+0x6c>
 800973a:	6965      	ldr	r5, [r4, #20]
 800973c:	6909      	ldr	r1, [r1, #16]
 800973e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009742:	eba3 0901 	sub.w	r9, r3, r1
 8009746:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800974a:	1c7b      	adds	r3, r7, #1
 800974c:	444b      	add	r3, r9
 800974e:	106d      	asrs	r5, r5, #1
 8009750:	429d      	cmp	r5, r3
 8009752:	bf38      	it	cc
 8009754:	461d      	movcc	r5, r3
 8009756:	0553      	lsls	r3, r2, #21
 8009758:	d527      	bpl.n	80097aa <__ssputs_r+0x8e>
 800975a:	4629      	mov	r1, r5
 800975c:	f7fe fc1c 	bl	8007f98 <_malloc_r>
 8009760:	4606      	mov	r6, r0
 8009762:	b360      	cbz	r0, 80097be <__ssputs_r+0xa2>
 8009764:	6921      	ldr	r1, [r4, #16]
 8009766:	464a      	mov	r2, r9
 8009768:	f7fd fd23 	bl	80071b2 <memcpy>
 800976c:	89a3      	ldrh	r3, [r4, #12]
 800976e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009776:	81a3      	strh	r3, [r4, #12]
 8009778:	6126      	str	r6, [r4, #16]
 800977a:	6165      	str	r5, [r4, #20]
 800977c:	444e      	add	r6, r9
 800977e:	eba5 0509 	sub.w	r5, r5, r9
 8009782:	6026      	str	r6, [r4, #0]
 8009784:	60a5      	str	r5, [r4, #8]
 8009786:	463e      	mov	r6, r7
 8009788:	42be      	cmp	r6, r7
 800978a:	d900      	bls.n	800978e <__ssputs_r+0x72>
 800978c:	463e      	mov	r6, r7
 800978e:	6820      	ldr	r0, [r4, #0]
 8009790:	4632      	mov	r2, r6
 8009792:	4641      	mov	r1, r8
 8009794:	f000 fbb0 	bl	8009ef8 <memmove>
 8009798:	68a3      	ldr	r3, [r4, #8]
 800979a:	1b9b      	subs	r3, r3, r6
 800979c:	60a3      	str	r3, [r4, #8]
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	4433      	add	r3, r6
 80097a2:	6023      	str	r3, [r4, #0]
 80097a4:	2000      	movs	r0, #0
 80097a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097aa:	462a      	mov	r2, r5
 80097ac:	f000 ff5d 	bl	800a66a <_realloc_r>
 80097b0:	4606      	mov	r6, r0
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d1e0      	bne.n	8009778 <__ssputs_r+0x5c>
 80097b6:	6921      	ldr	r1, [r4, #16]
 80097b8:	4650      	mov	r0, sl
 80097ba:	f7fe fb79 	bl	8007eb0 <_free_r>
 80097be:	230c      	movs	r3, #12
 80097c0:	f8ca 3000 	str.w	r3, [sl]
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ca:	81a3      	strh	r3, [r4, #12]
 80097cc:	f04f 30ff 	mov.w	r0, #4294967295
 80097d0:	e7e9      	b.n	80097a6 <__ssputs_r+0x8a>
	...

080097d4 <_svfiprintf_r>:
 80097d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	4698      	mov	r8, r3
 80097da:	898b      	ldrh	r3, [r1, #12]
 80097dc:	061b      	lsls	r3, r3, #24
 80097de:	b09d      	sub	sp, #116	@ 0x74
 80097e0:	4607      	mov	r7, r0
 80097e2:	460d      	mov	r5, r1
 80097e4:	4614      	mov	r4, r2
 80097e6:	d510      	bpl.n	800980a <_svfiprintf_r+0x36>
 80097e8:	690b      	ldr	r3, [r1, #16]
 80097ea:	b973      	cbnz	r3, 800980a <_svfiprintf_r+0x36>
 80097ec:	2140      	movs	r1, #64	@ 0x40
 80097ee:	f7fe fbd3 	bl	8007f98 <_malloc_r>
 80097f2:	6028      	str	r0, [r5, #0]
 80097f4:	6128      	str	r0, [r5, #16]
 80097f6:	b930      	cbnz	r0, 8009806 <_svfiprintf_r+0x32>
 80097f8:	230c      	movs	r3, #12
 80097fa:	603b      	str	r3, [r7, #0]
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009800:	b01d      	add	sp, #116	@ 0x74
 8009802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009806:	2340      	movs	r3, #64	@ 0x40
 8009808:	616b      	str	r3, [r5, #20]
 800980a:	2300      	movs	r3, #0
 800980c:	9309      	str	r3, [sp, #36]	@ 0x24
 800980e:	2320      	movs	r3, #32
 8009810:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009814:	f8cd 800c 	str.w	r8, [sp, #12]
 8009818:	2330      	movs	r3, #48	@ 0x30
 800981a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80099b8 <_svfiprintf_r+0x1e4>
 800981e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009822:	f04f 0901 	mov.w	r9, #1
 8009826:	4623      	mov	r3, r4
 8009828:	469a      	mov	sl, r3
 800982a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800982e:	b10a      	cbz	r2, 8009834 <_svfiprintf_r+0x60>
 8009830:	2a25      	cmp	r2, #37	@ 0x25
 8009832:	d1f9      	bne.n	8009828 <_svfiprintf_r+0x54>
 8009834:	ebba 0b04 	subs.w	fp, sl, r4
 8009838:	d00b      	beq.n	8009852 <_svfiprintf_r+0x7e>
 800983a:	465b      	mov	r3, fp
 800983c:	4622      	mov	r2, r4
 800983e:	4629      	mov	r1, r5
 8009840:	4638      	mov	r0, r7
 8009842:	f7ff ff6b 	bl	800971c <__ssputs_r>
 8009846:	3001      	adds	r0, #1
 8009848:	f000 80a7 	beq.w	800999a <_svfiprintf_r+0x1c6>
 800984c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800984e:	445a      	add	r2, fp
 8009850:	9209      	str	r2, [sp, #36]	@ 0x24
 8009852:	f89a 3000 	ldrb.w	r3, [sl]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 809f 	beq.w	800999a <_svfiprintf_r+0x1c6>
 800985c:	2300      	movs	r3, #0
 800985e:	f04f 32ff 	mov.w	r2, #4294967295
 8009862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009866:	f10a 0a01 	add.w	sl, sl, #1
 800986a:	9304      	str	r3, [sp, #16]
 800986c:	9307      	str	r3, [sp, #28]
 800986e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009872:	931a      	str	r3, [sp, #104]	@ 0x68
 8009874:	4654      	mov	r4, sl
 8009876:	2205      	movs	r2, #5
 8009878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800987c:	484e      	ldr	r0, [pc, #312]	@ (80099b8 <_svfiprintf_r+0x1e4>)
 800987e:	f7f6 fcbf 	bl	8000200 <memchr>
 8009882:	9a04      	ldr	r2, [sp, #16]
 8009884:	b9d8      	cbnz	r0, 80098be <_svfiprintf_r+0xea>
 8009886:	06d0      	lsls	r0, r2, #27
 8009888:	bf44      	itt	mi
 800988a:	2320      	movmi	r3, #32
 800988c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009890:	0711      	lsls	r1, r2, #28
 8009892:	bf44      	itt	mi
 8009894:	232b      	movmi	r3, #43	@ 0x2b
 8009896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800989a:	f89a 3000 	ldrb.w	r3, [sl]
 800989e:	2b2a      	cmp	r3, #42	@ 0x2a
 80098a0:	d015      	beq.n	80098ce <_svfiprintf_r+0xfa>
 80098a2:	9a07      	ldr	r2, [sp, #28]
 80098a4:	4654      	mov	r4, sl
 80098a6:	2000      	movs	r0, #0
 80098a8:	f04f 0c0a 	mov.w	ip, #10
 80098ac:	4621      	mov	r1, r4
 80098ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098b2:	3b30      	subs	r3, #48	@ 0x30
 80098b4:	2b09      	cmp	r3, #9
 80098b6:	d94b      	bls.n	8009950 <_svfiprintf_r+0x17c>
 80098b8:	b1b0      	cbz	r0, 80098e8 <_svfiprintf_r+0x114>
 80098ba:	9207      	str	r2, [sp, #28]
 80098bc:	e014      	b.n	80098e8 <_svfiprintf_r+0x114>
 80098be:	eba0 0308 	sub.w	r3, r0, r8
 80098c2:	fa09 f303 	lsl.w	r3, r9, r3
 80098c6:	4313      	orrs	r3, r2
 80098c8:	9304      	str	r3, [sp, #16]
 80098ca:	46a2      	mov	sl, r4
 80098cc:	e7d2      	b.n	8009874 <_svfiprintf_r+0xa0>
 80098ce:	9b03      	ldr	r3, [sp, #12]
 80098d0:	1d19      	adds	r1, r3, #4
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	9103      	str	r1, [sp, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	bfbb      	ittet	lt
 80098da:	425b      	neglt	r3, r3
 80098dc:	f042 0202 	orrlt.w	r2, r2, #2
 80098e0:	9307      	strge	r3, [sp, #28]
 80098e2:	9307      	strlt	r3, [sp, #28]
 80098e4:	bfb8      	it	lt
 80098e6:	9204      	strlt	r2, [sp, #16]
 80098e8:	7823      	ldrb	r3, [r4, #0]
 80098ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80098ec:	d10a      	bne.n	8009904 <_svfiprintf_r+0x130>
 80098ee:	7863      	ldrb	r3, [r4, #1]
 80098f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80098f2:	d132      	bne.n	800995a <_svfiprintf_r+0x186>
 80098f4:	9b03      	ldr	r3, [sp, #12]
 80098f6:	1d1a      	adds	r2, r3, #4
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	9203      	str	r2, [sp, #12]
 80098fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009900:	3402      	adds	r4, #2
 8009902:	9305      	str	r3, [sp, #20]
 8009904:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80099c8 <_svfiprintf_r+0x1f4>
 8009908:	7821      	ldrb	r1, [r4, #0]
 800990a:	2203      	movs	r2, #3
 800990c:	4650      	mov	r0, sl
 800990e:	f7f6 fc77 	bl	8000200 <memchr>
 8009912:	b138      	cbz	r0, 8009924 <_svfiprintf_r+0x150>
 8009914:	9b04      	ldr	r3, [sp, #16]
 8009916:	eba0 000a 	sub.w	r0, r0, sl
 800991a:	2240      	movs	r2, #64	@ 0x40
 800991c:	4082      	lsls	r2, r0
 800991e:	4313      	orrs	r3, r2
 8009920:	3401      	adds	r4, #1
 8009922:	9304      	str	r3, [sp, #16]
 8009924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009928:	4824      	ldr	r0, [pc, #144]	@ (80099bc <_svfiprintf_r+0x1e8>)
 800992a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800992e:	2206      	movs	r2, #6
 8009930:	f7f6 fc66 	bl	8000200 <memchr>
 8009934:	2800      	cmp	r0, #0
 8009936:	d036      	beq.n	80099a6 <_svfiprintf_r+0x1d2>
 8009938:	4b21      	ldr	r3, [pc, #132]	@ (80099c0 <_svfiprintf_r+0x1ec>)
 800993a:	bb1b      	cbnz	r3, 8009984 <_svfiprintf_r+0x1b0>
 800993c:	9b03      	ldr	r3, [sp, #12]
 800993e:	3307      	adds	r3, #7
 8009940:	f023 0307 	bic.w	r3, r3, #7
 8009944:	3308      	adds	r3, #8
 8009946:	9303      	str	r3, [sp, #12]
 8009948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800994a:	4433      	add	r3, r6
 800994c:	9309      	str	r3, [sp, #36]	@ 0x24
 800994e:	e76a      	b.n	8009826 <_svfiprintf_r+0x52>
 8009950:	fb0c 3202 	mla	r2, ip, r2, r3
 8009954:	460c      	mov	r4, r1
 8009956:	2001      	movs	r0, #1
 8009958:	e7a8      	b.n	80098ac <_svfiprintf_r+0xd8>
 800995a:	2300      	movs	r3, #0
 800995c:	3401      	adds	r4, #1
 800995e:	9305      	str	r3, [sp, #20]
 8009960:	4619      	mov	r1, r3
 8009962:	f04f 0c0a 	mov.w	ip, #10
 8009966:	4620      	mov	r0, r4
 8009968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800996c:	3a30      	subs	r2, #48	@ 0x30
 800996e:	2a09      	cmp	r2, #9
 8009970:	d903      	bls.n	800997a <_svfiprintf_r+0x1a6>
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0c6      	beq.n	8009904 <_svfiprintf_r+0x130>
 8009976:	9105      	str	r1, [sp, #20]
 8009978:	e7c4      	b.n	8009904 <_svfiprintf_r+0x130>
 800997a:	fb0c 2101 	mla	r1, ip, r1, r2
 800997e:	4604      	mov	r4, r0
 8009980:	2301      	movs	r3, #1
 8009982:	e7f0      	b.n	8009966 <_svfiprintf_r+0x192>
 8009984:	ab03      	add	r3, sp, #12
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	462a      	mov	r2, r5
 800998a:	4b0e      	ldr	r3, [pc, #56]	@ (80099c4 <_svfiprintf_r+0x1f0>)
 800998c:	a904      	add	r1, sp, #16
 800998e:	4638      	mov	r0, r7
 8009990:	f7fc fa44 	bl	8005e1c <_printf_float>
 8009994:	1c42      	adds	r2, r0, #1
 8009996:	4606      	mov	r6, r0
 8009998:	d1d6      	bne.n	8009948 <_svfiprintf_r+0x174>
 800999a:	89ab      	ldrh	r3, [r5, #12]
 800999c:	065b      	lsls	r3, r3, #25
 800999e:	f53f af2d 	bmi.w	80097fc <_svfiprintf_r+0x28>
 80099a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099a4:	e72c      	b.n	8009800 <_svfiprintf_r+0x2c>
 80099a6:	ab03      	add	r3, sp, #12
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	462a      	mov	r2, r5
 80099ac:	4b05      	ldr	r3, [pc, #20]	@ (80099c4 <_svfiprintf_r+0x1f0>)
 80099ae:	a904      	add	r1, sp, #16
 80099b0:	4638      	mov	r0, r7
 80099b2:	f7fc fccb 	bl	800634c <_printf_i>
 80099b6:	e7ed      	b.n	8009994 <_svfiprintf_r+0x1c0>
 80099b8:	0800cb69 	.word	0x0800cb69
 80099bc:	0800cb73 	.word	0x0800cb73
 80099c0:	08005e1d 	.word	0x08005e1d
 80099c4:	0800971d 	.word	0x0800971d
 80099c8:	0800cb6f 	.word	0x0800cb6f

080099cc <__sfputc_r>:
 80099cc:	6893      	ldr	r3, [r2, #8]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	b410      	push	{r4}
 80099d4:	6093      	str	r3, [r2, #8]
 80099d6:	da08      	bge.n	80099ea <__sfputc_r+0x1e>
 80099d8:	6994      	ldr	r4, [r2, #24]
 80099da:	42a3      	cmp	r3, r4
 80099dc:	db01      	blt.n	80099e2 <__sfputc_r+0x16>
 80099de:	290a      	cmp	r1, #10
 80099e0:	d103      	bne.n	80099ea <__sfputc_r+0x1e>
 80099e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099e6:	f7fd ba36 	b.w	8006e56 <__swbuf_r>
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	1c58      	adds	r0, r3, #1
 80099ee:	6010      	str	r0, [r2, #0]
 80099f0:	7019      	strb	r1, [r3, #0]
 80099f2:	4608      	mov	r0, r1
 80099f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <__sfputs_r>:
 80099fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fc:	4606      	mov	r6, r0
 80099fe:	460f      	mov	r7, r1
 8009a00:	4614      	mov	r4, r2
 8009a02:	18d5      	adds	r5, r2, r3
 8009a04:	42ac      	cmp	r4, r5
 8009a06:	d101      	bne.n	8009a0c <__sfputs_r+0x12>
 8009a08:	2000      	movs	r0, #0
 8009a0a:	e007      	b.n	8009a1c <__sfputs_r+0x22>
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	463a      	mov	r2, r7
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7ff ffda 	bl	80099cc <__sfputc_r>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	d1f3      	bne.n	8009a04 <__sfputs_r+0xa>
 8009a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a20 <_vfiprintf_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	460d      	mov	r5, r1
 8009a26:	b09d      	sub	sp, #116	@ 0x74
 8009a28:	4614      	mov	r4, r2
 8009a2a:	4698      	mov	r8, r3
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	b118      	cbz	r0, 8009a38 <_vfiprintf_r+0x18>
 8009a30:	6a03      	ldr	r3, [r0, #32]
 8009a32:	b90b      	cbnz	r3, 8009a38 <_vfiprintf_r+0x18>
 8009a34:	f7fd f84a 	bl	8006acc <__sinit>
 8009a38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a3a:	07d9      	lsls	r1, r3, #31
 8009a3c:	d405      	bmi.n	8009a4a <_vfiprintf_r+0x2a>
 8009a3e:	89ab      	ldrh	r3, [r5, #12]
 8009a40:	059a      	lsls	r2, r3, #22
 8009a42:	d402      	bmi.n	8009a4a <_vfiprintf_r+0x2a>
 8009a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a46:	f7fd fbaa 	bl	800719e <__retarget_lock_acquire_recursive>
 8009a4a:	89ab      	ldrh	r3, [r5, #12]
 8009a4c:	071b      	lsls	r3, r3, #28
 8009a4e:	d501      	bpl.n	8009a54 <_vfiprintf_r+0x34>
 8009a50:	692b      	ldr	r3, [r5, #16]
 8009a52:	b99b      	cbnz	r3, 8009a7c <_vfiprintf_r+0x5c>
 8009a54:	4629      	mov	r1, r5
 8009a56:	4630      	mov	r0, r6
 8009a58:	f7fd fa3c 	bl	8006ed4 <__swsetup_r>
 8009a5c:	b170      	cbz	r0, 8009a7c <_vfiprintf_r+0x5c>
 8009a5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a60:	07dc      	lsls	r4, r3, #31
 8009a62:	d504      	bpl.n	8009a6e <_vfiprintf_r+0x4e>
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	b01d      	add	sp, #116	@ 0x74
 8009a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6e:	89ab      	ldrh	r3, [r5, #12]
 8009a70:	0598      	lsls	r0, r3, #22
 8009a72:	d4f7      	bmi.n	8009a64 <_vfiprintf_r+0x44>
 8009a74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a76:	f7fd fb93 	bl	80071a0 <__retarget_lock_release_recursive>
 8009a7a:	e7f3      	b.n	8009a64 <_vfiprintf_r+0x44>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a80:	2320      	movs	r3, #32
 8009a82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a86:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a8a:	2330      	movs	r3, #48	@ 0x30
 8009a8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c3c <_vfiprintf_r+0x21c>
 8009a90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a94:	f04f 0901 	mov.w	r9, #1
 8009a98:	4623      	mov	r3, r4
 8009a9a:	469a      	mov	sl, r3
 8009a9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aa0:	b10a      	cbz	r2, 8009aa6 <_vfiprintf_r+0x86>
 8009aa2:	2a25      	cmp	r2, #37	@ 0x25
 8009aa4:	d1f9      	bne.n	8009a9a <_vfiprintf_r+0x7a>
 8009aa6:	ebba 0b04 	subs.w	fp, sl, r4
 8009aaa:	d00b      	beq.n	8009ac4 <_vfiprintf_r+0xa4>
 8009aac:	465b      	mov	r3, fp
 8009aae:	4622      	mov	r2, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7ff ffa1 	bl	80099fa <__sfputs_r>
 8009ab8:	3001      	adds	r0, #1
 8009aba:	f000 80a7 	beq.w	8009c0c <_vfiprintf_r+0x1ec>
 8009abe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ac0:	445a      	add	r2, fp
 8009ac2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 809f 	beq.w	8009c0c <_vfiprintf_r+0x1ec>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad8:	f10a 0a01 	add.w	sl, sl, #1
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	9307      	str	r3, [sp, #28]
 8009ae0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ae4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ae6:	4654      	mov	r4, sl
 8009ae8:	2205      	movs	r2, #5
 8009aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aee:	4853      	ldr	r0, [pc, #332]	@ (8009c3c <_vfiprintf_r+0x21c>)
 8009af0:	f7f6 fb86 	bl	8000200 <memchr>
 8009af4:	9a04      	ldr	r2, [sp, #16]
 8009af6:	b9d8      	cbnz	r0, 8009b30 <_vfiprintf_r+0x110>
 8009af8:	06d1      	lsls	r1, r2, #27
 8009afa:	bf44      	itt	mi
 8009afc:	2320      	movmi	r3, #32
 8009afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b02:	0713      	lsls	r3, r2, #28
 8009b04:	bf44      	itt	mi
 8009b06:	232b      	movmi	r3, #43	@ 0x2b
 8009b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b12:	d015      	beq.n	8009b40 <_vfiprintf_r+0x120>
 8009b14:	9a07      	ldr	r2, [sp, #28]
 8009b16:	4654      	mov	r4, sl
 8009b18:	2000      	movs	r0, #0
 8009b1a:	f04f 0c0a 	mov.w	ip, #10
 8009b1e:	4621      	mov	r1, r4
 8009b20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b24:	3b30      	subs	r3, #48	@ 0x30
 8009b26:	2b09      	cmp	r3, #9
 8009b28:	d94b      	bls.n	8009bc2 <_vfiprintf_r+0x1a2>
 8009b2a:	b1b0      	cbz	r0, 8009b5a <_vfiprintf_r+0x13a>
 8009b2c:	9207      	str	r2, [sp, #28]
 8009b2e:	e014      	b.n	8009b5a <_vfiprintf_r+0x13a>
 8009b30:	eba0 0308 	sub.w	r3, r0, r8
 8009b34:	fa09 f303 	lsl.w	r3, r9, r3
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	9304      	str	r3, [sp, #16]
 8009b3c:	46a2      	mov	sl, r4
 8009b3e:	e7d2      	b.n	8009ae6 <_vfiprintf_r+0xc6>
 8009b40:	9b03      	ldr	r3, [sp, #12]
 8009b42:	1d19      	adds	r1, r3, #4
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	9103      	str	r1, [sp, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	bfbb      	ittet	lt
 8009b4c:	425b      	neglt	r3, r3
 8009b4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009b52:	9307      	strge	r3, [sp, #28]
 8009b54:	9307      	strlt	r3, [sp, #28]
 8009b56:	bfb8      	it	lt
 8009b58:	9204      	strlt	r2, [sp, #16]
 8009b5a:	7823      	ldrb	r3, [r4, #0]
 8009b5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b5e:	d10a      	bne.n	8009b76 <_vfiprintf_r+0x156>
 8009b60:	7863      	ldrb	r3, [r4, #1]
 8009b62:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b64:	d132      	bne.n	8009bcc <_vfiprintf_r+0x1ac>
 8009b66:	9b03      	ldr	r3, [sp, #12]
 8009b68:	1d1a      	adds	r2, r3, #4
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	9203      	str	r2, [sp, #12]
 8009b6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b72:	3402      	adds	r4, #2
 8009b74:	9305      	str	r3, [sp, #20]
 8009b76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c4c <_vfiprintf_r+0x22c>
 8009b7a:	7821      	ldrb	r1, [r4, #0]
 8009b7c:	2203      	movs	r2, #3
 8009b7e:	4650      	mov	r0, sl
 8009b80:	f7f6 fb3e 	bl	8000200 <memchr>
 8009b84:	b138      	cbz	r0, 8009b96 <_vfiprintf_r+0x176>
 8009b86:	9b04      	ldr	r3, [sp, #16]
 8009b88:	eba0 000a 	sub.w	r0, r0, sl
 8009b8c:	2240      	movs	r2, #64	@ 0x40
 8009b8e:	4082      	lsls	r2, r0
 8009b90:	4313      	orrs	r3, r2
 8009b92:	3401      	adds	r4, #1
 8009b94:	9304      	str	r3, [sp, #16]
 8009b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9a:	4829      	ldr	r0, [pc, #164]	@ (8009c40 <_vfiprintf_r+0x220>)
 8009b9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ba0:	2206      	movs	r2, #6
 8009ba2:	f7f6 fb2d 	bl	8000200 <memchr>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d03f      	beq.n	8009c2a <_vfiprintf_r+0x20a>
 8009baa:	4b26      	ldr	r3, [pc, #152]	@ (8009c44 <_vfiprintf_r+0x224>)
 8009bac:	bb1b      	cbnz	r3, 8009bf6 <_vfiprintf_r+0x1d6>
 8009bae:	9b03      	ldr	r3, [sp, #12]
 8009bb0:	3307      	adds	r3, #7
 8009bb2:	f023 0307 	bic.w	r3, r3, #7
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	9303      	str	r3, [sp, #12]
 8009bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bbc:	443b      	add	r3, r7
 8009bbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bc0:	e76a      	b.n	8009a98 <_vfiprintf_r+0x78>
 8009bc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	2001      	movs	r0, #1
 8009bca:	e7a8      	b.n	8009b1e <_vfiprintf_r+0xfe>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	3401      	adds	r4, #1
 8009bd0:	9305      	str	r3, [sp, #20]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	f04f 0c0a 	mov.w	ip, #10
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bde:	3a30      	subs	r2, #48	@ 0x30
 8009be0:	2a09      	cmp	r2, #9
 8009be2:	d903      	bls.n	8009bec <_vfiprintf_r+0x1cc>
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0c6      	beq.n	8009b76 <_vfiprintf_r+0x156>
 8009be8:	9105      	str	r1, [sp, #20]
 8009bea:	e7c4      	b.n	8009b76 <_vfiprintf_r+0x156>
 8009bec:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e7f0      	b.n	8009bd8 <_vfiprintf_r+0x1b8>
 8009bf6:	ab03      	add	r3, sp, #12
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	462a      	mov	r2, r5
 8009bfc:	4b12      	ldr	r3, [pc, #72]	@ (8009c48 <_vfiprintf_r+0x228>)
 8009bfe:	a904      	add	r1, sp, #16
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7fc f90b 	bl	8005e1c <_printf_float>
 8009c06:	4607      	mov	r7, r0
 8009c08:	1c78      	adds	r0, r7, #1
 8009c0a:	d1d6      	bne.n	8009bba <_vfiprintf_r+0x19a>
 8009c0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c0e:	07d9      	lsls	r1, r3, #31
 8009c10:	d405      	bmi.n	8009c1e <_vfiprintf_r+0x1fe>
 8009c12:	89ab      	ldrh	r3, [r5, #12]
 8009c14:	059a      	lsls	r2, r3, #22
 8009c16:	d402      	bmi.n	8009c1e <_vfiprintf_r+0x1fe>
 8009c18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c1a:	f7fd fac1 	bl	80071a0 <__retarget_lock_release_recursive>
 8009c1e:	89ab      	ldrh	r3, [r5, #12]
 8009c20:	065b      	lsls	r3, r3, #25
 8009c22:	f53f af1f 	bmi.w	8009a64 <_vfiprintf_r+0x44>
 8009c26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c28:	e71e      	b.n	8009a68 <_vfiprintf_r+0x48>
 8009c2a:	ab03      	add	r3, sp, #12
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	462a      	mov	r2, r5
 8009c30:	4b05      	ldr	r3, [pc, #20]	@ (8009c48 <_vfiprintf_r+0x228>)
 8009c32:	a904      	add	r1, sp, #16
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7fc fb89 	bl	800634c <_printf_i>
 8009c3a:	e7e4      	b.n	8009c06 <_vfiprintf_r+0x1e6>
 8009c3c:	0800cb69 	.word	0x0800cb69
 8009c40:	0800cb73 	.word	0x0800cb73
 8009c44:	08005e1d 	.word	0x08005e1d
 8009c48:	080099fb 	.word	0x080099fb
 8009c4c:	0800cb6f 	.word	0x0800cb6f

08009c50 <__sflush_r>:
 8009c50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c58:	0716      	lsls	r6, r2, #28
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	460c      	mov	r4, r1
 8009c5e:	d454      	bmi.n	8009d0a <__sflush_r+0xba>
 8009c60:	684b      	ldr	r3, [r1, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	dc02      	bgt.n	8009c6c <__sflush_r+0x1c>
 8009c66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	dd48      	ble.n	8009cfe <__sflush_r+0xae>
 8009c6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c6e:	2e00      	cmp	r6, #0
 8009c70:	d045      	beq.n	8009cfe <__sflush_r+0xae>
 8009c72:	2300      	movs	r3, #0
 8009c74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c78:	682f      	ldr	r7, [r5, #0]
 8009c7a:	6a21      	ldr	r1, [r4, #32]
 8009c7c:	602b      	str	r3, [r5, #0]
 8009c7e:	d030      	beq.n	8009ce2 <__sflush_r+0x92>
 8009c80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	0759      	lsls	r1, r3, #29
 8009c86:	d505      	bpl.n	8009c94 <__sflush_r+0x44>
 8009c88:	6863      	ldr	r3, [r4, #4]
 8009c8a:	1ad2      	subs	r2, r2, r3
 8009c8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c8e:	b10b      	cbz	r3, 8009c94 <__sflush_r+0x44>
 8009c90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c92:	1ad2      	subs	r2, r2, r3
 8009c94:	2300      	movs	r3, #0
 8009c96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c98:	6a21      	ldr	r1, [r4, #32]
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	47b0      	blx	r6
 8009c9e:	1c43      	adds	r3, r0, #1
 8009ca0:	89a3      	ldrh	r3, [r4, #12]
 8009ca2:	d106      	bne.n	8009cb2 <__sflush_r+0x62>
 8009ca4:	6829      	ldr	r1, [r5, #0]
 8009ca6:	291d      	cmp	r1, #29
 8009ca8:	d82b      	bhi.n	8009d02 <__sflush_r+0xb2>
 8009caa:	4a2a      	ldr	r2, [pc, #168]	@ (8009d54 <__sflush_r+0x104>)
 8009cac:	410a      	asrs	r2, r1
 8009cae:	07d6      	lsls	r6, r2, #31
 8009cb0:	d427      	bmi.n	8009d02 <__sflush_r+0xb2>
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	6062      	str	r2, [r4, #4]
 8009cb6:	04d9      	lsls	r1, r3, #19
 8009cb8:	6922      	ldr	r2, [r4, #16]
 8009cba:	6022      	str	r2, [r4, #0]
 8009cbc:	d504      	bpl.n	8009cc8 <__sflush_r+0x78>
 8009cbe:	1c42      	adds	r2, r0, #1
 8009cc0:	d101      	bne.n	8009cc6 <__sflush_r+0x76>
 8009cc2:	682b      	ldr	r3, [r5, #0]
 8009cc4:	b903      	cbnz	r3, 8009cc8 <__sflush_r+0x78>
 8009cc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8009cc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cca:	602f      	str	r7, [r5, #0]
 8009ccc:	b1b9      	cbz	r1, 8009cfe <__sflush_r+0xae>
 8009cce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cd2:	4299      	cmp	r1, r3
 8009cd4:	d002      	beq.n	8009cdc <__sflush_r+0x8c>
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f7fe f8ea 	bl	8007eb0 <_free_r>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ce0:	e00d      	b.n	8009cfe <__sflush_r+0xae>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	47b0      	blx	r6
 8009ce8:	4602      	mov	r2, r0
 8009cea:	1c50      	adds	r0, r2, #1
 8009cec:	d1c9      	bne.n	8009c82 <__sflush_r+0x32>
 8009cee:	682b      	ldr	r3, [r5, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d0c6      	beq.n	8009c82 <__sflush_r+0x32>
 8009cf4:	2b1d      	cmp	r3, #29
 8009cf6:	d001      	beq.n	8009cfc <__sflush_r+0xac>
 8009cf8:	2b16      	cmp	r3, #22
 8009cfa:	d11e      	bne.n	8009d3a <__sflush_r+0xea>
 8009cfc:	602f      	str	r7, [r5, #0]
 8009cfe:	2000      	movs	r0, #0
 8009d00:	e022      	b.n	8009d48 <__sflush_r+0xf8>
 8009d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d06:	b21b      	sxth	r3, r3
 8009d08:	e01b      	b.n	8009d42 <__sflush_r+0xf2>
 8009d0a:	690f      	ldr	r7, [r1, #16]
 8009d0c:	2f00      	cmp	r7, #0
 8009d0e:	d0f6      	beq.n	8009cfe <__sflush_r+0xae>
 8009d10:	0793      	lsls	r3, r2, #30
 8009d12:	680e      	ldr	r6, [r1, #0]
 8009d14:	bf08      	it	eq
 8009d16:	694b      	ldreq	r3, [r1, #20]
 8009d18:	600f      	str	r7, [r1, #0]
 8009d1a:	bf18      	it	ne
 8009d1c:	2300      	movne	r3, #0
 8009d1e:	eba6 0807 	sub.w	r8, r6, r7
 8009d22:	608b      	str	r3, [r1, #8]
 8009d24:	f1b8 0f00 	cmp.w	r8, #0
 8009d28:	dde9      	ble.n	8009cfe <__sflush_r+0xae>
 8009d2a:	6a21      	ldr	r1, [r4, #32]
 8009d2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d2e:	4643      	mov	r3, r8
 8009d30:	463a      	mov	r2, r7
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b0      	blx	r6
 8009d36:	2800      	cmp	r0, #0
 8009d38:	dc08      	bgt.n	8009d4c <__sflush_r+0xfc>
 8009d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d42:	81a3      	strh	r3, [r4, #12]
 8009d44:	f04f 30ff 	mov.w	r0, #4294967295
 8009d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d4c:	4407      	add	r7, r0
 8009d4e:	eba8 0800 	sub.w	r8, r8, r0
 8009d52:	e7e7      	b.n	8009d24 <__sflush_r+0xd4>
 8009d54:	dfbffffe 	.word	0xdfbffffe

08009d58 <_fflush_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	690b      	ldr	r3, [r1, #16]
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	b913      	cbnz	r3, 8009d68 <_fflush_r+0x10>
 8009d62:	2500      	movs	r5, #0
 8009d64:	4628      	mov	r0, r5
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	b118      	cbz	r0, 8009d72 <_fflush_r+0x1a>
 8009d6a:	6a03      	ldr	r3, [r0, #32]
 8009d6c:	b90b      	cbnz	r3, 8009d72 <_fflush_r+0x1a>
 8009d6e:	f7fc fead 	bl	8006acc <__sinit>
 8009d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0f3      	beq.n	8009d62 <_fflush_r+0xa>
 8009d7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d7c:	07d0      	lsls	r0, r2, #31
 8009d7e:	d404      	bmi.n	8009d8a <_fflush_r+0x32>
 8009d80:	0599      	lsls	r1, r3, #22
 8009d82:	d402      	bmi.n	8009d8a <_fflush_r+0x32>
 8009d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d86:	f7fd fa0a 	bl	800719e <__retarget_lock_acquire_recursive>
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	f7ff ff5f 	bl	8009c50 <__sflush_r>
 8009d92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d94:	07da      	lsls	r2, r3, #31
 8009d96:	4605      	mov	r5, r0
 8009d98:	d4e4      	bmi.n	8009d64 <_fflush_r+0xc>
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	059b      	lsls	r3, r3, #22
 8009d9e:	d4e1      	bmi.n	8009d64 <_fflush_r+0xc>
 8009da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009da2:	f7fd f9fd 	bl	80071a0 <__retarget_lock_release_recursive>
 8009da6:	e7dd      	b.n	8009d64 <_fflush_r+0xc>

08009da8 <fiprintf>:
 8009da8:	b40e      	push	{r1, r2, r3}
 8009daa:	b503      	push	{r0, r1, lr}
 8009dac:	4601      	mov	r1, r0
 8009dae:	ab03      	add	r3, sp, #12
 8009db0:	4805      	ldr	r0, [pc, #20]	@ (8009dc8 <fiprintf+0x20>)
 8009db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db6:	6800      	ldr	r0, [r0, #0]
 8009db8:	9301      	str	r3, [sp, #4]
 8009dba:	f7ff fe31 	bl	8009a20 <_vfiprintf_r>
 8009dbe:	b002      	add	sp, #8
 8009dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dc4:	b003      	add	sp, #12
 8009dc6:	4770      	bx	lr
 8009dc8:	20000048 	.word	0x20000048

08009dcc <__swhatbuf_r>:
 8009dcc:	b570      	push	{r4, r5, r6, lr}
 8009dce:	460c      	mov	r4, r1
 8009dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd4:	2900      	cmp	r1, #0
 8009dd6:	b096      	sub	sp, #88	@ 0x58
 8009dd8:	4615      	mov	r5, r2
 8009dda:	461e      	mov	r6, r3
 8009ddc:	da0d      	bge.n	8009dfa <__swhatbuf_r+0x2e>
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009de4:	f04f 0100 	mov.w	r1, #0
 8009de8:	bf14      	ite	ne
 8009dea:	2340      	movne	r3, #64	@ 0x40
 8009dec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009df0:	2000      	movs	r0, #0
 8009df2:	6031      	str	r1, [r6, #0]
 8009df4:	602b      	str	r3, [r5, #0]
 8009df6:	b016      	add	sp, #88	@ 0x58
 8009df8:	bd70      	pop	{r4, r5, r6, pc}
 8009dfa:	466a      	mov	r2, sp
 8009dfc:	f000 f896 	bl	8009f2c <_fstat_r>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	dbec      	blt.n	8009dde <__swhatbuf_r+0x12>
 8009e04:	9901      	ldr	r1, [sp, #4]
 8009e06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e0e:	4259      	negs	r1, r3
 8009e10:	4159      	adcs	r1, r3
 8009e12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e16:	e7eb      	b.n	8009df0 <__swhatbuf_r+0x24>

08009e18 <__smakebuf_r>:
 8009e18:	898b      	ldrh	r3, [r1, #12]
 8009e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e1c:	079d      	lsls	r5, r3, #30
 8009e1e:	4606      	mov	r6, r0
 8009e20:	460c      	mov	r4, r1
 8009e22:	d507      	bpl.n	8009e34 <__smakebuf_r+0x1c>
 8009e24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	6123      	str	r3, [r4, #16]
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	6163      	str	r3, [r4, #20]
 8009e30:	b003      	add	sp, #12
 8009e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e34:	ab01      	add	r3, sp, #4
 8009e36:	466a      	mov	r2, sp
 8009e38:	f7ff ffc8 	bl	8009dcc <__swhatbuf_r>
 8009e3c:	9f00      	ldr	r7, [sp, #0]
 8009e3e:	4605      	mov	r5, r0
 8009e40:	4639      	mov	r1, r7
 8009e42:	4630      	mov	r0, r6
 8009e44:	f7fe f8a8 	bl	8007f98 <_malloc_r>
 8009e48:	b948      	cbnz	r0, 8009e5e <__smakebuf_r+0x46>
 8009e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e4e:	059a      	lsls	r2, r3, #22
 8009e50:	d4ee      	bmi.n	8009e30 <__smakebuf_r+0x18>
 8009e52:	f023 0303 	bic.w	r3, r3, #3
 8009e56:	f043 0302 	orr.w	r3, r3, #2
 8009e5a:	81a3      	strh	r3, [r4, #12]
 8009e5c:	e7e2      	b.n	8009e24 <__smakebuf_r+0xc>
 8009e5e:	89a3      	ldrh	r3, [r4, #12]
 8009e60:	6020      	str	r0, [r4, #0]
 8009e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e66:	81a3      	strh	r3, [r4, #12]
 8009e68:	9b01      	ldr	r3, [sp, #4]
 8009e6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e6e:	b15b      	cbz	r3, 8009e88 <__smakebuf_r+0x70>
 8009e70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e74:	4630      	mov	r0, r6
 8009e76:	f000 f86b 	bl	8009f50 <_isatty_r>
 8009e7a:	b128      	cbz	r0, 8009e88 <__smakebuf_r+0x70>
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	f023 0303 	bic.w	r3, r3, #3
 8009e82:	f043 0301 	orr.w	r3, r3, #1
 8009e86:	81a3      	strh	r3, [r4, #12]
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	431d      	orrs	r5, r3
 8009e8c:	81a5      	strh	r5, [r4, #12]
 8009e8e:	e7cf      	b.n	8009e30 <__smakebuf_r+0x18>

08009e90 <_putc_r>:
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	460d      	mov	r5, r1
 8009e94:	4614      	mov	r4, r2
 8009e96:	4606      	mov	r6, r0
 8009e98:	b118      	cbz	r0, 8009ea2 <_putc_r+0x12>
 8009e9a:	6a03      	ldr	r3, [r0, #32]
 8009e9c:	b90b      	cbnz	r3, 8009ea2 <_putc_r+0x12>
 8009e9e:	f7fc fe15 	bl	8006acc <__sinit>
 8009ea2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ea4:	07d8      	lsls	r0, r3, #31
 8009ea6:	d405      	bmi.n	8009eb4 <_putc_r+0x24>
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	0599      	lsls	r1, r3, #22
 8009eac:	d402      	bmi.n	8009eb4 <_putc_r+0x24>
 8009eae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009eb0:	f7fd f975 	bl	800719e <__retarget_lock_acquire_recursive>
 8009eb4:	68a3      	ldr	r3, [r4, #8]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	60a3      	str	r3, [r4, #8]
 8009ebc:	da05      	bge.n	8009eca <_putc_r+0x3a>
 8009ebe:	69a2      	ldr	r2, [r4, #24]
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	db12      	blt.n	8009eea <_putc_r+0x5a>
 8009ec4:	b2eb      	uxtb	r3, r5
 8009ec6:	2b0a      	cmp	r3, #10
 8009ec8:	d00f      	beq.n	8009eea <_putc_r+0x5a>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	6022      	str	r2, [r4, #0]
 8009ed0:	701d      	strb	r5, [r3, #0]
 8009ed2:	b2ed      	uxtb	r5, r5
 8009ed4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ed6:	07da      	lsls	r2, r3, #31
 8009ed8:	d405      	bmi.n	8009ee6 <_putc_r+0x56>
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	059b      	lsls	r3, r3, #22
 8009ede:	d402      	bmi.n	8009ee6 <_putc_r+0x56>
 8009ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ee2:	f7fd f95d 	bl	80071a0 <__retarget_lock_release_recursive>
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	bd70      	pop	{r4, r5, r6, pc}
 8009eea:	4629      	mov	r1, r5
 8009eec:	4622      	mov	r2, r4
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7fc ffb1 	bl	8006e56 <__swbuf_r>
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	e7ed      	b.n	8009ed4 <_putc_r+0x44>

08009ef8 <memmove>:
 8009ef8:	4288      	cmp	r0, r1
 8009efa:	b510      	push	{r4, lr}
 8009efc:	eb01 0402 	add.w	r4, r1, r2
 8009f00:	d902      	bls.n	8009f08 <memmove+0x10>
 8009f02:	4284      	cmp	r4, r0
 8009f04:	4623      	mov	r3, r4
 8009f06:	d807      	bhi.n	8009f18 <memmove+0x20>
 8009f08:	1e43      	subs	r3, r0, #1
 8009f0a:	42a1      	cmp	r1, r4
 8009f0c:	d008      	beq.n	8009f20 <memmove+0x28>
 8009f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f16:	e7f8      	b.n	8009f0a <memmove+0x12>
 8009f18:	4402      	add	r2, r0
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	428a      	cmp	r2, r1
 8009f1e:	d100      	bne.n	8009f22 <memmove+0x2a>
 8009f20:	bd10      	pop	{r4, pc}
 8009f22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f2a:	e7f7      	b.n	8009f1c <memmove+0x24>

08009f2c <_fstat_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	4d07      	ldr	r5, [pc, #28]	@ (8009f4c <_fstat_r+0x20>)
 8009f30:	2300      	movs	r3, #0
 8009f32:	4604      	mov	r4, r0
 8009f34:	4608      	mov	r0, r1
 8009f36:	4611      	mov	r1, r2
 8009f38:	602b      	str	r3, [r5, #0]
 8009f3a:	f7f8 ff2f 	bl	8002d9c <_fstat>
 8009f3e:	1c43      	adds	r3, r0, #1
 8009f40:	d102      	bne.n	8009f48 <_fstat_r+0x1c>
 8009f42:	682b      	ldr	r3, [r5, #0]
 8009f44:	b103      	cbz	r3, 8009f48 <_fstat_r+0x1c>
 8009f46:	6023      	str	r3, [r4, #0]
 8009f48:	bd38      	pop	{r3, r4, r5, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20000d44 	.word	0x20000d44

08009f50 <_isatty_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	4d06      	ldr	r5, [pc, #24]	@ (8009f6c <_isatty_r+0x1c>)
 8009f54:	2300      	movs	r3, #0
 8009f56:	4604      	mov	r4, r0
 8009f58:	4608      	mov	r0, r1
 8009f5a:	602b      	str	r3, [r5, #0]
 8009f5c:	f7f8 ff2e 	bl	8002dbc <_isatty>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_isatty_r+0x1a>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_isatty_r+0x1a>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	20000d44 	.word	0x20000d44

08009f70 <_sbrk_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4d06      	ldr	r5, [pc, #24]	@ (8009f8c <_sbrk_r+0x1c>)
 8009f74:	2300      	movs	r3, #0
 8009f76:	4604      	mov	r4, r0
 8009f78:	4608      	mov	r0, r1
 8009f7a:	602b      	str	r3, [r5, #0]
 8009f7c:	f7f8 ff36 	bl	8002dec <_sbrk>
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	d102      	bne.n	8009f8a <_sbrk_r+0x1a>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	b103      	cbz	r3, 8009f8a <_sbrk_r+0x1a>
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	20000d44 	.word	0x20000d44

08009f90 <nan>:
 8009f90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009f98 <nan+0x8>
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	00000000 	.word	0x00000000
 8009f9c:	7ff80000 	.word	0x7ff80000

08009fa0 <abort>:
 8009fa0:	b508      	push	{r3, lr}
 8009fa2:	2006      	movs	r0, #6
 8009fa4:	f000 fbc4 	bl	800a730 <raise>
 8009fa8:	2001      	movs	r0, #1
 8009faa:	f7f8 fea7 	bl	8002cfc <_exit>

08009fae <_calloc_r>:
 8009fae:	b570      	push	{r4, r5, r6, lr}
 8009fb0:	fba1 5402 	umull	r5, r4, r1, r2
 8009fb4:	b93c      	cbnz	r4, 8009fc6 <_calloc_r+0x18>
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	f7fd ffee 	bl	8007f98 <_malloc_r>
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	b928      	cbnz	r0, 8009fcc <_calloc_r+0x1e>
 8009fc0:	2600      	movs	r6, #0
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	bd70      	pop	{r4, r5, r6, pc}
 8009fc6:	220c      	movs	r2, #12
 8009fc8:	6002      	str	r2, [r0, #0]
 8009fca:	e7f9      	b.n	8009fc0 <_calloc_r+0x12>
 8009fcc:	462a      	mov	r2, r5
 8009fce:	4621      	mov	r1, r4
 8009fd0:	f7fc ffd6 	bl	8006f80 <memset>
 8009fd4:	e7f5      	b.n	8009fc2 <_calloc_r+0x14>

08009fd6 <rshift>:
 8009fd6:	6903      	ldr	r3, [r0, #16]
 8009fd8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fe0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009fe4:	f100 0414 	add.w	r4, r0, #20
 8009fe8:	dd45      	ble.n	800a076 <rshift+0xa0>
 8009fea:	f011 011f 	ands.w	r1, r1, #31
 8009fee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ff2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ff6:	d10c      	bne.n	800a012 <rshift+0x3c>
 8009ff8:	f100 0710 	add.w	r7, r0, #16
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	42b1      	cmp	r1, r6
 800a000:	d334      	bcc.n	800a06c <rshift+0x96>
 800a002:	1a9b      	subs	r3, r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	1eea      	subs	r2, r5, #3
 800a008:	4296      	cmp	r6, r2
 800a00a:	bf38      	it	cc
 800a00c:	2300      	movcc	r3, #0
 800a00e:	4423      	add	r3, r4
 800a010:	e015      	b.n	800a03e <rshift+0x68>
 800a012:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a016:	f1c1 0820 	rsb	r8, r1, #32
 800a01a:	40cf      	lsrs	r7, r1
 800a01c:	f105 0e04 	add.w	lr, r5, #4
 800a020:	46a1      	mov	r9, r4
 800a022:	4576      	cmp	r6, lr
 800a024:	46f4      	mov	ip, lr
 800a026:	d815      	bhi.n	800a054 <rshift+0x7e>
 800a028:	1a9a      	subs	r2, r3, r2
 800a02a:	0092      	lsls	r2, r2, #2
 800a02c:	3a04      	subs	r2, #4
 800a02e:	3501      	adds	r5, #1
 800a030:	42ae      	cmp	r6, r5
 800a032:	bf38      	it	cc
 800a034:	2200      	movcc	r2, #0
 800a036:	18a3      	adds	r3, r4, r2
 800a038:	50a7      	str	r7, [r4, r2]
 800a03a:	b107      	cbz	r7, 800a03e <rshift+0x68>
 800a03c:	3304      	adds	r3, #4
 800a03e:	1b1a      	subs	r2, r3, r4
 800a040:	42a3      	cmp	r3, r4
 800a042:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a046:	bf08      	it	eq
 800a048:	2300      	moveq	r3, #0
 800a04a:	6102      	str	r2, [r0, #16]
 800a04c:	bf08      	it	eq
 800a04e:	6143      	streq	r3, [r0, #20]
 800a050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a054:	f8dc c000 	ldr.w	ip, [ip]
 800a058:	fa0c fc08 	lsl.w	ip, ip, r8
 800a05c:	ea4c 0707 	orr.w	r7, ip, r7
 800a060:	f849 7b04 	str.w	r7, [r9], #4
 800a064:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a068:	40cf      	lsrs	r7, r1
 800a06a:	e7da      	b.n	800a022 <rshift+0x4c>
 800a06c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a070:	f847 cf04 	str.w	ip, [r7, #4]!
 800a074:	e7c3      	b.n	8009ffe <rshift+0x28>
 800a076:	4623      	mov	r3, r4
 800a078:	e7e1      	b.n	800a03e <rshift+0x68>

0800a07a <__hexdig_fun>:
 800a07a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a07e:	2b09      	cmp	r3, #9
 800a080:	d802      	bhi.n	800a088 <__hexdig_fun+0xe>
 800a082:	3820      	subs	r0, #32
 800a084:	b2c0      	uxtb	r0, r0
 800a086:	4770      	bx	lr
 800a088:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a08c:	2b05      	cmp	r3, #5
 800a08e:	d801      	bhi.n	800a094 <__hexdig_fun+0x1a>
 800a090:	3847      	subs	r0, #71	@ 0x47
 800a092:	e7f7      	b.n	800a084 <__hexdig_fun+0xa>
 800a094:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a098:	2b05      	cmp	r3, #5
 800a09a:	d801      	bhi.n	800a0a0 <__hexdig_fun+0x26>
 800a09c:	3827      	subs	r0, #39	@ 0x27
 800a09e:	e7f1      	b.n	800a084 <__hexdig_fun+0xa>
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	4770      	bx	lr

0800a0a4 <__gethex>:
 800a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	b085      	sub	sp, #20
 800a0aa:	468a      	mov	sl, r1
 800a0ac:	9302      	str	r3, [sp, #8]
 800a0ae:	680b      	ldr	r3, [r1, #0]
 800a0b0:	9001      	str	r0, [sp, #4]
 800a0b2:	4690      	mov	r8, r2
 800a0b4:	1c9c      	adds	r4, r3, #2
 800a0b6:	46a1      	mov	r9, r4
 800a0b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a0bc:	2830      	cmp	r0, #48	@ 0x30
 800a0be:	d0fa      	beq.n	800a0b6 <__gethex+0x12>
 800a0c0:	eba9 0303 	sub.w	r3, r9, r3
 800a0c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a0c8:	f7ff ffd7 	bl	800a07a <__hexdig_fun>
 800a0cc:	4605      	mov	r5, r0
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d168      	bne.n	800a1a4 <__gethex+0x100>
 800a0d2:	49a0      	ldr	r1, [pc, #640]	@ (800a354 <__gethex+0x2b0>)
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	4648      	mov	r0, r9
 800a0d8:	f7fc ff67 	bl	8006faa <strncmp>
 800a0dc:	4607      	mov	r7, r0
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d167      	bne.n	800a1b2 <__gethex+0x10e>
 800a0e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a0e6:	4626      	mov	r6, r4
 800a0e8:	f7ff ffc7 	bl	800a07a <__hexdig_fun>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d062      	beq.n	800a1b6 <__gethex+0x112>
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	7818      	ldrb	r0, [r3, #0]
 800a0f4:	2830      	cmp	r0, #48	@ 0x30
 800a0f6:	4699      	mov	r9, r3
 800a0f8:	f103 0301 	add.w	r3, r3, #1
 800a0fc:	d0f9      	beq.n	800a0f2 <__gethex+0x4e>
 800a0fe:	f7ff ffbc 	bl	800a07a <__hexdig_fun>
 800a102:	fab0 f580 	clz	r5, r0
 800a106:	096d      	lsrs	r5, r5, #5
 800a108:	f04f 0b01 	mov.w	fp, #1
 800a10c:	464a      	mov	r2, r9
 800a10e:	4616      	mov	r6, r2
 800a110:	3201      	adds	r2, #1
 800a112:	7830      	ldrb	r0, [r6, #0]
 800a114:	f7ff ffb1 	bl	800a07a <__hexdig_fun>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d1f8      	bne.n	800a10e <__gethex+0x6a>
 800a11c:	498d      	ldr	r1, [pc, #564]	@ (800a354 <__gethex+0x2b0>)
 800a11e:	2201      	movs	r2, #1
 800a120:	4630      	mov	r0, r6
 800a122:	f7fc ff42 	bl	8006faa <strncmp>
 800a126:	2800      	cmp	r0, #0
 800a128:	d13f      	bne.n	800a1aa <__gethex+0x106>
 800a12a:	b944      	cbnz	r4, 800a13e <__gethex+0x9a>
 800a12c:	1c74      	adds	r4, r6, #1
 800a12e:	4622      	mov	r2, r4
 800a130:	4616      	mov	r6, r2
 800a132:	3201      	adds	r2, #1
 800a134:	7830      	ldrb	r0, [r6, #0]
 800a136:	f7ff ffa0 	bl	800a07a <__hexdig_fun>
 800a13a:	2800      	cmp	r0, #0
 800a13c:	d1f8      	bne.n	800a130 <__gethex+0x8c>
 800a13e:	1ba4      	subs	r4, r4, r6
 800a140:	00a7      	lsls	r7, r4, #2
 800a142:	7833      	ldrb	r3, [r6, #0]
 800a144:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a148:	2b50      	cmp	r3, #80	@ 0x50
 800a14a:	d13e      	bne.n	800a1ca <__gethex+0x126>
 800a14c:	7873      	ldrb	r3, [r6, #1]
 800a14e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a150:	d033      	beq.n	800a1ba <__gethex+0x116>
 800a152:	2b2d      	cmp	r3, #45	@ 0x2d
 800a154:	d034      	beq.n	800a1c0 <__gethex+0x11c>
 800a156:	1c71      	adds	r1, r6, #1
 800a158:	2400      	movs	r4, #0
 800a15a:	7808      	ldrb	r0, [r1, #0]
 800a15c:	f7ff ff8d 	bl	800a07a <__hexdig_fun>
 800a160:	1e43      	subs	r3, r0, #1
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b18      	cmp	r3, #24
 800a166:	d830      	bhi.n	800a1ca <__gethex+0x126>
 800a168:	f1a0 0210 	sub.w	r2, r0, #16
 800a16c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a170:	f7ff ff83 	bl	800a07a <__hexdig_fun>
 800a174:	f100 3cff 	add.w	ip, r0, #4294967295
 800a178:	fa5f fc8c 	uxtb.w	ip, ip
 800a17c:	f1bc 0f18 	cmp.w	ip, #24
 800a180:	f04f 030a 	mov.w	r3, #10
 800a184:	d91e      	bls.n	800a1c4 <__gethex+0x120>
 800a186:	b104      	cbz	r4, 800a18a <__gethex+0xe6>
 800a188:	4252      	negs	r2, r2
 800a18a:	4417      	add	r7, r2
 800a18c:	f8ca 1000 	str.w	r1, [sl]
 800a190:	b1ed      	cbz	r5, 800a1ce <__gethex+0x12a>
 800a192:	f1bb 0f00 	cmp.w	fp, #0
 800a196:	bf0c      	ite	eq
 800a198:	2506      	moveq	r5, #6
 800a19a:	2500      	movne	r5, #0
 800a19c:	4628      	mov	r0, r5
 800a19e:	b005      	add	sp, #20
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	2500      	movs	r5, #0
 800a1a6:	462c      	mov	r4, r5
 800a1a8:	e7b0      	b.n	800a10c <__gethex+0x68>
 800a1aa:	2c00      	cmp	r4, #0
 800a1ac:	d1c7      	bne.n	800a13e <__gethex+0x9a>
 800a1ae:	4627      	mov	r7, r4
 800a1b0:	e7c7      	b.n	800a142 <__gethex+0x9e>
 800a1b2:	464e      	mov	r6, r9
 800a1b4:	462f      	mov	r7, r5
 800a1b6:	2501      	movs	r5, #1
 800a1b8:	e7c3      	b.n	800a142 <__gethex+0x9e>
 800a1ba:	2400      	movs	r4, #0
 800a1bc:	1cb1      	adds	r1, r6, #2
 800a1be:	e7cc      	b.n	800a15a <__gethex+0xb6>
 800a1c0:	2401      	movs	r4, #1
 800a1c2:	e7fb      	b.n	800a1bc <__gethex+0x118>
 800a1c4:	fb03 0002 	mla	r0, r3, r2, r0
 800a1c8:	e7ce      	b.n	800a168 <__gethex+0xc4>
 800a1ca:	4631      	mov	r1, r6
 800a1cc:	e7de      	b.n	800a18c <__gethex+0xe8>
 800a1ce:	eba6 0309 	sub.w	r3, r6, r9
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	2b07      	cmp	r3, #7
 800a1d8:	dc0a      	bgt.n	800a1f0 <__gethex+0x14c>
 800a1da:	9801      	ldr	r0, [sp, #4]
 800a1dc:	f7fd ff68 	bl	80080b0 <_Balloc>
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	b940      	cbnz	r0, 800a1f6 <__gethex+0x152>
 800a1e4:	4b5c      	ldr	r3, [pc, #368]	@ (800a358 <__gethex+0x2b4>)
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	21e4      	movs	r1, #228	@ 0xe4
 800a1ea:	485c      	ldr	r0, [pc, #368]	@ (800a35c <__gethex+0x2b8>)
 800a1ec:	f7fc fff6 	bl	80071dc <__assert_func>
 800a1f0:	3101      	adds	r1, #1
 800a1f2:	105b      	asrs	r3, r3, #1
 800a1f4:	e7ef      	b.n	800a1d6 <__gethex+0x132>
 800a1f6:	f100 0a14 	add.w	sl, r0, #20
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	4655      	mov	r5, sl
 800a1fe:	469b      	mov	fp, r3
 800a200:	45b1      	cmp	r9, r6
 800a202:	d337      	bcc.n	800a274 <__gethex+0x1d0>
 800a204:	f845 bb04 	str.w	fp, [r5], #4
 800a208:	eba5 050a 	sub.w	r5, r5, sl
 800a20c:	10ad      	asrs	r5, r5, #2
 800a20e:	6125      	str	r5, [r4, #16]
 800a210:	4658      	mov	r0, fp
 800a212:	f7fe f83f 	bl	8008294 <__hi0bits>
 800a216:	016d      	lsls	r5, r5, #5
 800a218:	f8d8 6000 	ldr.w	r6, [r8]
 800a21c:	1a2d      	subs	r5, r5, r0
 800a21e:	42b5      	cmp	r5, r6
 800a220:	dd54      	ble.n	800a2cc <__gethex+0x228>
 800a222:	1bad      	subs	r5, r5, r6
 800a224:	4629      	mov	r1, r5
 800a226:	4620      	mov	r0, r4
 800a228:	f7fe fbd3 	bl	80089d2 <__any_on>
 800a22c:	4681      	mov	r9, r0
 800a22e:	b178      	cbz	r0, 800a250 <__gethex+0x1ac>
 800a230:	1e6b      	subs	r3, r5, #1
 800a232:	1159      	asrs	r1, r3, #5
 800a234:	f003 021f 	and.w	r2, r3, #31
 800a238:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a23c:	f04f 0901 	mov.w	r9, #1
 800a240:	fa09 f202 	lsl.w	r2, r9, r2
 800a244:	420a      	tst	r2, r1
 800a246:	d003      	beq.n	800a250 <__gethex+0x1ac>
 800a248:	454b      	cmp	r3, r9
 800a24a:	dc36      	bgt.n	800a2ba <__gethex+0x216>
 800a24c:	f04f 0902 	mov.w	r9, #2
 800a250:	4629      	mov	r1, r5
 800a252:	4620      	mov	r0, r4
 800a254:	f7ff febf 	bl	8009fd6 <rshift>
 800a258:	442f      	add	r7, r5
 800a25a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a25e:	42bb      	cmp	r3, r7
 800a260:	da42      	bge.n	800a2e8 <__gethex+0x244>
 800a262:	9801      	ldr	r0, [sp, #4]
 800a264:	4621      	mov	r1, r4
 800a266:	f7fd ff63 	bl	8008130 <_Bfree>
 800a26a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a26c:	2300      	movs	r3, #0
 800a26e:	6013      	str	r3, [r2, #0]
 800a270:	25a3      	movs	r5, #163	@ 0xa3
 800a272:	e793      	b.n	800a19c <__gethex+0xf8>
 800a274:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a278:	2a2e      	cmp	r2, #46	@ 0x2e
 800a27a:	d012      	beq.n	800a2a2 <__gethex+0x1fe>
 800a27c:	2b20      	cmp	r3, #32
 800a27e:	d104      	bne.n	800a28a <__gethex+0x1e6>
 800a280:	f845 bb04 	str.w	fp, [r5], #4
 800a284:	f04f 0b00 	mov.w	fp, #0
 800a288:	465b      	mov	r3, fp
 800a28a:	7830      	ldrb	r0, [r6, #0]
 800a28c:	9303      	str	r3, [sp, #12]
 800a28e:	f7ff fef4 	bl	800a07a <__hexdig_fun>
 800a292:	9b03      	ldr	r3, [sp, #12]
 800a294:	f000 000f 	and.w	r0, r0, #15
 800a298:	4098      	lsls	r0, r3
 800a29a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a29e:	3304      	adds	r3, #4
 800a2a0:	e7ae      	b.n	800a200 <__gethex+0x15c>
 800a2a2:	45b1      	cmp	r9, r6
 800a2a4:	d8ea      	bhi.n	800a27c <__gethex+0x1d8>
 800a2a6:	492b      	ldr	r1, [pc, #172]	@ (800a354 <__gethex+0x2b0>)
 800a2a8:	9303      	str	r3, [sp, #12]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f7fc fe7c 	bl	8006faa <strncmp>
 800a2b2:	9b03      	ldr	r3, [sp, #12]
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d1e1      	bne.n	800a27c <__gethex+0x1d8>
 800a2b8:	e7a2      	b.n	800a200 <__gethex+0x15c>
 800a2ba:	1ea9      	subs	r1, r5, #2
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f7fe fb88 	bl	80089d2 <__any_on>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d0c2      	beq.n	800a24c <__gethex+0x1a8>
 800a2c6:	f04f 0903 	mov.w	r9, #3
 800a2ca:	e7c1      	b.n	800a250 <__gethex+0x1ac>
 800a2cc:	da09      	bge.n	800a2e2 <__gethex+0x23e>
 800a2ce:	1b75      	subs	r5, r6, r5
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	9801      	ldr	r0, [sp, #4]
 800a2d4:	462a      	mov	r2, r5
 800a2d6:	f7fe f943 	bl	8008560 <__lshift>
 800a2da:	1b7f      	subs	r7, r7, r5
 800a2dc:	4604      	mov	r4, r0
 800a2de:	f100 0a14 	add.w	sl, r0, #20
 800a2e2:	f04f 0900 	mov.w	r9, #0
 800a2e6:	e7b8      	b.n	800a25a <__gethex+0x1b6>
 800a2e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a2ec:	42bd      	cmp	r5, r7
 800a2ee:	dd6f      	ble.n	800a3d0 <__gethex+0x32c>
 800a2f0:	1bed      	subs	r5, r5, r7
 800a2f2:	42ae      	cmp	r6, r5
 800a2f4:	dc34      	bgt.n	800a360 <__gethex+0x2bc>
 800a2f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d022      	beq.n	800a344 <__gethex+0x2a0>
 800a2fe:	2b03      	cmp	r3, #3
 800a300:	d024      	beq.n	800a34c <__gethex+0x2a8>
 800a302:	2b01      	cmp	r3, #1
 800a304:	d115      	bne.n	800a332 <__gethex+0x28e>
 800a306:	42ae      	cmp	r6, r5
 800a308:	d113      	bne.n	800a332 <__gethex+0x28e>
 800a30a:	2e01      	cmp	r6, #1
 800a30c:	d10b      	bne.n	800a326 <__gethex+0x282>
 800a30e:	9a02      	ldr	r2, [sp, #8]
 800a310:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a314:	6013      	str	r3, [r2, #0]
 800a316:	2301      	movs	r3, #1
 800a318:	6123      	str	r3, [r4, #16]
 800a31a:	f8ca 3000 	str.w	r3, [sl]
 800a31e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a320:	2562      	movs	r5, #98	@ 0x62
 800a322:	601c      	str	r4, [r3, #0]
 800a324:	e73a      	b.n	800a19c <__gethex+0xf8>
 800a326:	1e71      	subs	r1, r6, #1
 800a328:	4620      	mov	r0, r4
 800a32a:	f7fe fb52 	bl	80089d2 <__any_on>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d1ed      	bne.n	800a30e <__gethex+0x26a>
 800a332:	9801      	ldr	r0, [sp, #4]
 800a334:	4621      	mov	r1, r4
 800a336:	f7fd fefb 	bl	8008130 <_Bfree>
 800a33a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a33c:	2300      	movs	r3, #0
 800a33e:	6013      	str	r3, [r2, #0]
 800a340:	2550      	movs	r5, #80	@ 0x50
 800a342:	e72b      	b.n	800a19c <__gethex+0xf8>
 800a344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1f3      	bne.n	800a332 <__gethex+0x28e>
 800a34a:	e7e0      	b.n	800a30e <__gethex+0x26a>
 800a34c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1dd      	bne.n	800a30e <__gethex+0x26a>
 800a352:	e7ee      	b.n	800a332 <__gethex+0x28e>
 800a354:	0800ca10 	.word	0x0800ca10
 800a358:	0800c8a7 	.word	0x0800c8a7
 800a35c:	0800cb82 	.word	0x0800cb82
 800a360:	1e6f      	subs	r7, r5, #1
 800a362:	f1b9 0f00 	cmp.w	r9, #0
 800a366:	d130      	bne.n	800a3ca <__gethex+0x326>
 800a368:	b127      	cbz	r7, 800a374 <__gethex+0x2d0>
 800a36a:	4639      	mov	r1, r7
 800a36c:	4620      	mov	r0, r4
 800a36e:	f7fe fb30 	bl	80089d2 <__any_on>
 800a372:	4681      	mov	r9, r0
 800a374:	117a      	asrs	r2, r7, #5
 800a376:	2301      	movs	r3, #1
 800a378:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a37c:	f007 071f 	and.w	r7, r7, #31
 800a380:	40bb      	lsls	r3, r7
 800a382:	4213      	tst	r3, r2
 800a384:	4629      	mov	r1, r5
 800a386:	4620      	mov	r0, r4
 800a388:	bf18      	it	ne
 800a38a:	f049 0902 	orrne.w	r9, r9, #2
 800a38e:	f7ff fe22 	bl	8009fd6 <rshift>
 800a392:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a396:	1b76      	subs	r6, r6, r5
 800a398:	2502      	movs	r5, #2
 800a39a:	f1b9 0f00 	cmp.w	r9, #0
 800a39e:	d047      	beq.n	800a430 <__gethex+0x38c>
 800a3a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d015      	beq.n	800a3d4 <__gethex+0x330>
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d017      	beq.n	800a3dc <__gethex+0x338>
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d109      	bne.n	800a3c4 <__gethex+0x320>
 800a3b0:	f019 0f02 	tst.w	r9, #2
 800a3b4:	d006      	beq.n	800a3c4 <__gethex+0x320>
 800a3b6:	f8da 3000 	ldr.w	r3, [sl]
 800a3ba:	ea49 0903 	orr.w	r9, r9, r3
 800a3be:	f019 0f01 	tst.w	r9, #1
 800a3c2:	d10e      	bne.n	800a3e2 <__gethex+0x33e>
 800a3c4:	f045 0510 	orr.w	r5, r5, #16
 800a3c8:	e032      	b.n	800a430 <__gethex+0x38c>
 800a3ca:	f04f 0901 	mov.w	r9, #1
 800a3ce:	e7d1      	b.n	800a374 <__gethex+0x2d0>
 800a3d0:	2501      	movs	r5, #1
 800a3d2:	e7e2      	b.n	800a39a <__gethex+0x2f6>
 800a3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3d6:	f1c3 0301 	rsb	r3, r3, #1
 800a3da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d0f0      	beq.n	800a3c4 <__gethex+0x320>
 800a3e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a3e6:	f104 0314 	add.w	r3, r4, #20
 800a3ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a3ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a3f2:	f04f 0c00 	mov.w	ip, #0
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a400:	d01b      	beq.n	800a43a <__gethex+0x396>
 800a402:	3201      	adds	r2, #1
 800a404:	6002      	str	r2, [r0, #0]
 800a406:	2d02      	cmp	r5, #2
 800a408:	f104 0314 	add.w	r3, r4, #20
 800a40c:	d13c      	bne.n	800a488 <__gethex+0x3e4>
 800a40e:	f8d8 2000 	ldr.w	r2, [r8]
 800a412:	3a01      	subs	r2, #1
 800a414:	42b2      	cmp	r2, r6
 800a416:	d109      	bne.n	800a42c <__gethex+0x388>
 800a418:	1171      	asrs	r1, r6, #5
 800a41a:	2201      	movs	r2, #1
 800a41c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a420:	f006 061f 	and.w	r6, r6, #31
 800a424:	fa02 f606 	lsl.w	r6, r2, r6
 800a428:	421e      	tst	r6, r3
 800a42a:	d13a      	bne.n	800a4a2 <__gethex+0x3fe>
 800a42c:	f045 0520 	orr.w	r5, r5, #32
 800a430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a432:	601c      	str	r4, [r3, #0]
 800a434:	9b02      	ldr	r3, [sp, #8]
 800a436:	601f      	str	r7, [r3, #0]
 800a438:	e6b0      	b.n	800a19c <__gethex+0xf8>
 800a43a:	4299      	cmp	r1, r3
 800a43c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a440:	d8d9      	bhi.n	800a3f6 <__gethex+0x352>
 800a442:	68a3      	ldr	r3, [r4, #8]
 800a444:	459b      	cmp	fp, r3
 800a446:	db17      	blt.n	800a478 <__gethex+0x3d4>
 800a448:	6861      	ldr	r1, [r4, #4]
 800a44a:	9801      	ldr	r0, [sp, #4]
 800a44c:	3101      	adds	r1, #1
 800a44e:	f7fd fe2f 	bl	80080b0 <_Balloc>
 800a452:	4681      	mov	r9, r0
 800a454:	b918      	cbnz	r0, 800a45e <__gethex+0x3ba>
 800a456:	4b1a      	ldr	r3, [pc, #104]	@ (800a4c0 <__gethex+0x41c>)
 800a458:	4602      	mov	r2, r0
 800a45a:	2184      	movs	r1, #132	@ 0x84
 800a45c:	e6c5      	b.n	800a1ea <__gethex+0x146>
 800a45e:	6922      	ldr	r2, [r4, #16]
 800a460:	3202      	adds	r2, #2
 800a462:	f104 010c 	add.w	r1, r4, #12
 800a466:	0092      	lsls	r2, r2, #2
 800a468:	300c      	adds	r0, #12
 800a46a:	f7fc fea2 	bl	80071b2 <memcpy>
 800a46e:	4621      	mov	r1, r4
 800a470:	9801      	ldr	r0, [sp, #4]
 800a472:	f7fd fe5d 	bl	8008130 <_Bfree>
 800a476:	464c      	mov	r4, r9
 800a478:	6923      	ldr	r3, [r4, #16]
 800a47a:	1c5a      	adds	r2, r3, #1
 800a47c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a480:	6122      	str	r2, [r4, #16]
 800a482:	2201      	movs	r2, #1
 800a484:	615a      	str	r2, [r3, #20]
 800a486:	e7be      	b.n	800a406 <__gethex+0x362>
 800a488:	6922      	ldr	r2, [r4, #16]
 800a48a:	455a      	cmp	r2, fp
 800a48c:	dd0b      	ble.n	800a4a6 <__gethex+0x402>
 800a48e:	2101      	movs	r1, #1
 800a490:	4620      	mov	r0, r4
 800a492:	f7ff fda0 	bl	8009fd6 <rshift>
 800a496:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a49a:	3701      	adds	r7, #1
 800a49c:	42bb      	cmp	r3, r7
 800a49e:	f6ff aee0 	blt.w	800a262 <__gethex+0x1be>
 800a4a2:	2501      	movs	r5, #1
 800a4a4:	e7c2      	b.n	800a42c <__gethex+0x388>
 800a4a6:	f016 061f 	ands.w	r6, r6, #31
 800a4aa:	d0fa      	beq.n	800a4a2 <__gethex+0x3fe>
 800a4ac:	4453      	add	r3, sl
 800a4ae:	f1c6 0620 	rsb	r6, r6, #32
 800a4b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a4b6:	f7fd feed 	bl	8008294 <__hi0bits>
 800a4ba:	42b0      	cmp	r0, r6
 800a4bc:	dbe7      	blt.n	800a48e <__gethex+0x3ea>
 800a4be:	e7f0      	b.n	800a4a2 <__gethex+0x3fe>
 800a4c0:	0800c8a7 	.word	0x0800c8a7

0800a4c4 <L_shift>:
 800a4c4:	f1c2 0208 	rsb	r2, r2, #8
 800a4c8:	0092      	lsls	r2, r2, #2
 800a4ca:	b570      	push	{r4, r5, r6, lr}
 800a4cc:	f1c2 0620 	rsb	r6, r2, #32
 800a4d0:	6843      	ldr	r3, [r0, #4]
 800a4d2:	6804      	ldr	r4, [r0, #0]
 800a4d4:	fa03 f506 	lsl.w	r5, r3, r6
 800a4d8:	432c      	orrs	r4, r5
 800a4da:	40d3      	lsrs	r3, r2
 800a4dc:	6004      	str	r4, [r0, #0]
 800a4de:	f840 3f04 	str.w	r3, [r0, #4]!
 800a4e2:	4288      	cmp	r0, r1
 800a4e4:	d3f4      	bcc.n	800a4d0 <L_shift+0xc>
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}

0800a4e8 <__match>:
 800a4e8:	b530      	push	{r4, r5, lr}
 800a4ea:	6803      	ldr	r3, [r0, #0]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4f2:	b914      	cbnz	r4, 800a4fa <__match+0x12>
 800a4f4:	6003      	str	r3, [r0, #0]
 800a4f6:	2001      	movs	r0, #1
 800a4f8:	bd30      	pop	{r4, r5, pc}
 800a4fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a502:	2d19      	cmp	r5, #25
 800a504:	bf98      	it	ls
 800a506:	3220      	addls	r2, #32
 800a508:	42a2      	cmp	r2, r4
 800a50a:	d0f0      	beq.n	800a4ee <__match+0x6>
 800a50c:	2000      	movs	r0, #0
 800a50e:	e7f3      	b.n	800a4f8 <__match+0x10>

0800a510 <__hexnan>:
 800a510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	680b      	ldr	r3, [r1, #0]
 800a516:	6801      	ldr	r1, [r0, #0]
 800a518:	115e      	asrs	r6, r3, #5
 800a51a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a51e:	f013 031f 	ands.w	r3, r3, #31
 800a522:	b087      	sub	sp, #28
 800a524:	bf18      	it	ne
 800a526:	3604      	addne	r6, #4
 800a528:	2500      	movs	r5, #0
 800a52a:	1f37      	subs	r7, r6, #4
 800a52c:	4682      	mov	sl, r0
 800a52e:	4690      	mov	r8, r2
 800a530:	9301      	str	r3, [sp, #4]
 800a532:	f846 5c04 	str.w	r5, [r6, #-4]
 800a536:	46b9      	mov	r9, r7
 800a538:	463c      	mov	r4, r7
 800a53a:	9502      	str	r5, [sp, #8]
 800a53c:	46ab      	mov	fp, r5
 800a53e:	784a      	ldrb	r2, [r1, #1]
 800a540:	1c4b      	adds	r3, r1, #1
 800a542:	9303      	str	r3, [sp, #12]
 800a544:	b342      	cbz	r2, 800a598 <__hexnan+0x88>
 800a546:	4610      	mov	r0, r2
 800a548:	9105      	str	r1, [sp, #20]
 800a54a:	9204      	str	r2, [sp, #16]
 800a54c:	f7ff fd95 	bl	800a07a <__hexdig_fun>
 800a550:	2800      	cmp	r0, #0
 800a552:	d151      	bne.n	800a5f8 <__hexnan+0xe8>
 800a554:	9a04      	ldr	r2, [sp, #16]
 800a556:	9905      	ldr	r1, [sp, #20]
 800a558:	2a20      	cmp	r2, #32
 800a55a:	d818      	bhi.n	800a58e <__hexnan+0x7e>
 800a55c:	9b02      	ldr	r3, [sp, #8]
 800a55e:	459b      	cmp	fp, r3
 800a560:	dd13      	ble.n	800a58a <__hexnan+0x7a>
 800a562:	454c      	cmp	r4, r9
 800a564:	d206      	bcs.n	800a574 <__hexnan+0x64>
 800a566:	2d07      	cmp	r5, #7
 800a568:	dc04      	bgt.n	800a574 <__hexnan+0x64>
 800a56a:	462a      	mov	r2, r5
 800a56c:	4649      	mov	r1, r9
 800a56e:	4620      	mov	r0, r4
 800a570:	f7ff ffa8 	bl	800a4c4 <L_shift>
 800a574:	4544      	cmp	r4, r8
 800a576:	d952      	bls.n	800a61e <__hexnan+0x10e>
 800a578:	2300      	movs	r3, #0
 800a57a:	f1a4 0904 	sub.w	r9, r4, #4
 800a57e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a582:	f8cd b008 	str.w	fp, [sp, #8]
 800a586:	464c      	mov	r4, r9
 800a588:	461d      	mov	r5, r3
 800a58a:	9903      	ldr	r1, [sp, #12]
 800a58c:	e7d7      	b.n	800a53e <__hexnan+0x2e>
 800a58e:	2a29      	cmp	r2, #41	@ 0x29
 800a590:	d157      	bne.n	800a642 <__hexnan+0x132>
 800a592:	3102      	adds	r1, #2
 800a594:	f8ca 1000 	str.w	r1, [sl]
 800a598:	f1bb 0f00 	cmp.w	fp, #0
 800a59c:	d051      	beq.n	800a642 <__hexnan+0x132>
 800a59e:	454c      	cmp	r4, r9
 800a5a0:	d206      	bcs.n	800a5b0 <__hexnan+0xa0>
 800a5a2:	2d07      	cmp	r5, #7
 800a5a4:	dc04      	bgt.n	800a5b0 <__hexnan+0xa0>
 800a5a6:	462a      	mov	r2, r5
 800a5a8:	4649      	mov	r1, r9
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f7ff ff8a 	bl	800a4c4 <L_shift>
 800a5b0:	4544      	cmp	r4, r8
 800a5b2:	d936      	bls.n	800a622 <__hexnan+0x112>
 800a5b4:	f1a8 0204 	sub.w	r2, r8, #4
 800a5b8:	4623      	mov	r3, r4
 800a5ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800a5be:	f842 1f04 	str.w	r1, [r2, #4]!
 800a5c2:	429f      	cmp	r7, r3
 800a5c4:	d2f9      	bcs.n	800a5ba <__hexnan+0xaa>
 800a5c6:	1b3b      	subs	r3, r7, r4
 800a5c8:	f023 0303 	bic.w	r3, r3, #3
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	3401      	adds	r4, #1
 800a5d0:	3e03      	subs	r6, #3
 800a5d2:	42b4      	cmp	r4, r6
 800a5d4:	bf88      	it	hi
 800a5d6:	2304      	movhi	r3, #4
 800a5d8:	4443      	add	r3, r8
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f843 2b04 	str.w	r2, [r3], #4
 800a5e0:	429f      	cmp	r7, r3
 800a5e2:	d2fb      	bcs.n	800a5dc <__hexnan+0xcc>
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	b91b      	cbnz	r3, 800a5f0 <__hexnan+0xe0>
 800a5e8:	4547      	cmp	r7, r8
 800a5ea:	d128      	bne.n	800a63e <__hexnan+0x12e>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	2005      	movs	r0, #5
 800a5f2:	b007      	add	sp, #28
 800a5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f8:	3501      	adds	r5, #1
 800a5fa:	2d08      	cmp	r5, #8
 800a5fc:	f10b 0b01 	add.w	fp, fp, #1
 800a600:	dd06      	ble.n	800a610 <__hexnan+0x100>
 800a602:	4544      	cmp	r4, r8
 800a604:	d9c1      	bls.n	800a58a <__hexnan+0x7a>
 800a606:	2300      	movs	r3, #0
 800a608:	f844 3c04 	str.w	r3, [r4, #-4]
 800a60c:	2501      	movs	r5, #1
 800a60e:	3c04      	subs	r4, #4
 800a610:	6822      	ldr	r2, [r4, #0]
 800a612:	f000 000f 	and.w	r0, r0, #15
 800a616:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a61a:	6020      	str	r0, [r4, #0]
 800a61c:	e7b5      	b.n	800a58a <__hexnan+0x7a>
 800a61e:	2508      	movs	r5, #8
 800a620:	e7b3      	b.n	800a58a <__hexnan+0x7a>
 800a622:	9b01      	ldr	r3, [sp, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d0dd      	beq.n	800a5e4 <__hexnan+0xd4>
 800a628:	f1c3 0320 	rsb	r3, r3, #32
 800a62c:	f04f 32ff 	mov.w	r2, #4294967295
 800a630:	40da      	lsrs	r2, r3
 800a632:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a636:	4013      	ands	r3, r2
 800a638:	f846 3c04 	str.w	r3, [r6, #-4]
 800a63c:	e7d2      	b.n	800a5e4 <__hexnan+0xd4>
 800a63e:	3f04      	subs	r7, #4
 800a640:	e7d0      	b.n	800a5e4 <__hexnan+0xd4>
 800a642:	2004      	movs	r0, #4
 800a644:	e7d5      	b.n	800a5f2 <__hexnan+0xe2>

0800a646 <__ascii_mbtowc>:
 800a646:	b082      	sub	sp, #8
 800a648:	b901      	cbnz	r1, 800a64c <__ascii_mbtowc+0x6>
 800a64a:	a901      	add	r1, sp, #4
 800a64c:	b142      	cbz	r2, 800a660 <__ascii_mbtowc+0x1a>
 800a64e:	b14b      	cbz	r3, 800a664 <__ascii_mbtowc+0x1e>
 800a650:	7813      	ldrb	r3, [r2, #0]
 800a652:	600b      	str	r3, [r1, #0]
 800a654:	7812      	ldrb	r2, [r2, #0]
 800a656:	1e10      	subs	r0, r2, #0
 800a658:	bf18      	it	ne
 800a65a:	2001      	movne	r0, #1
 800a65c:	b002      	add	sp, #8
 800a65e:	4770      	bx	lr
 800a660:	4610      	mov	r0, r2
 800a662:	e7fb      	b.n	800a65c <__ascii_mbtowc+0x16>
 800a664:	f06f 0001 	mvn.w	r0, #1
 800a668:	e7f8      	b.n	800a65c <__ascii_mbtowc+0x16>

0800a66a <_realloc_r>:
 800a66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66e:	4680      	mov	r8, r0
 800a670:	4615      	mov	r5, r2
 800a672:	460c      	mov	r4, r1
 800a674:	b921      	cbnz	r1, 800a680 <_realloc_r+0x16>
 800a676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a67a:	4611      	mov	r1, r2
 800a67c:	f7fd bc8c 	b.w	8007f98 <_malloc_r>
 800a680:	b92a      	cbnz	r2, 800a68e <_realloc_r+0x24>
 800a682:	f7fd fc15 	bl	8007eb0 <_free_r>
 800a686:	2400      	movs	r4, #0
 800a688:	4620      	mov	r0, r4
 800a68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a68e:	f000 f86b 	bl	800a768 <_malloc_usable_size_r>
 800a692:	4285      	cmp	r5, r0
 800a694:	4606      	mov	r6, r0
 800a696:	d802      	bhi.n	800a69e <_realloc_r+0x34>
 800a698:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a69c:	d8f4      	bhi.n	800a688 <_realloc_r+0x1e>
 800a69e:	4629      	mov	r1, r5
 800a6a0:	4640      	mov	r0, r8
 800a6a2:	f7fd fc79 	bl	8007f98 <_malloc_r>
 800a6a6:	4607      	mov	r7, r0
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d0ec      	beq.n	800a686 <_realloc_r+0x1c>
 800a6ac:	42b5      	cmp	r5, r6
 800a6ae:	462a      	mov	r2, r5
 800a6b0:	4621      	mov	r1, r4
 800a6b2:	bf28      	it	cs
 800a6b4:	4632      	movcs	r2, r6
 800a6b6:	f7fc fd7c 	bl	80071b2 <memcpy>
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	4640      	mov	r0, r8
 800a6be:	f7fd fbf7 	bl	8007eb0 <_free_r>
 800a6c2:	463c      	mov	r4, r7
 800a6c4:	e7e0      	b.n	800a688 <_realloc_r+0x1e>

0800a6c6 <__ascii_wctomb>:
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	4608      	mov	r0, r1
 800a6ca:	b141      	cbz	r1, 800a6de <__ascii_wctomb+0x18>
 800a6cc:	2aff      	cmp	r2, #255	@ 0xff
 800a6ce:	d904      	bls.n	800a6da <__ascii_wctomb+0x14>
 800a6d0:	228a      	movs	r2, #138	@ 0x8a
 800a6d2:	601a      	str	r2, [r3, #0]
 800a6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d8:	4770      	bx	lr
 800a6da:	700a      	strb	r2, [r1, #0]
 800a6dc:	2001      	movs	r0, #1
 800a6de:	4770      	bx	lr

0800a6e0 <_raise_r>:
 800a6e0:	291f      	cmp	r1, #31
 800a6e2:	b538      	push	{r3, r4, r5, lr}
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	460c      	mov	r4, r1
 800a6e8:	d904      	bls.n	800a6f4 <_raise_r+0x14>
 800a6ea:	2316      	movs	r3, #22
 800a6ec:	6003      	str	r3, [r0, #0]
 800a6ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6f6:	b112      	cbz	r2, 800a6fe <_raise_r+0x1e>
 800a6f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6fc:	b94b      	cbnz	r3, 800a712 <_raise_r+0x32>
 800a6fe:	4628      	mov	r0, r5
 800a700:	f000 f830 	bl	800a764 <_getpid_r>
 800a704:	4622      	mov	r2, r4
 800a706:	4601      	mov	r1, r0
 800a708:	4628      	mov	r0, r5
 800a70a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a70e:	f000 b817 	b.w	800a740 <_kill_r>
 800a712:	2b01      	cmp	r3, #1
 800a714:	d00a      	beq.n	800a72c <_raise_r+0x4c>
 800a716:	1c59      	adds	r1, r3, #1
 800a718:	d103      	bne.n	800a722 <_raise_r+0x42>
 800a71a:	2316      	movs	r3, #22
 800a71c:	6003      	str	r3, [r0, #0]
 800a71e:	2001      	movs	r0, #1
 800a720:	e7e7      	b.n	800a6f2 <_raise_r+0x12>
 800a722:	2100      	movs	r1, #0
 800a724:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a728:	4620      	mov	r0, r4
 800a72a:	4798      	blx	r3
 800a72c:	2000      	movs	r0, #0
 800a72e:	e7e0      	b.n	800a6f2 <_raise_r+0x12>

0800a730 <raise>:
 800a730:	4b02      	ldr	r3, [pc, #8]	@ (800a73c <raise+0xc>)
 800a732:	4601      	mov	r1, r0
 800a734:	6818      	ldr	r0, [r3, #0]
 800a736:	f7ff bfd3 	b.w	800a6e0 <_raise_r>
 800a73a:	bf00      	nop
 800a73c:	20000048 	.word	0x20000048

0800a740 <_kill_r>:
 800a740:	b538      	push	{r3, r4, r5, lr}
 800a742:	4d07      	ldr	r5, [pc, #28]	@ (800a760 <_kill_r+0x20>)
 800a744:	2300      	movs	r3, #0
 800a746:	4604      	mov	r4, r0
 800a748:	4608      	mov	r0, r1
 800a74a:	4611      	mov	r1, r2
 800a74c:	602b      	str	r3, [r5, #0]
 800a74e:	f7f8 fac5 	bl	8002cdc <_kill>
 800a752:	1c43      	adds	r3, r0, #1
 800a754:	d102      	bne.n	800a75c <_kill_r+0x1c>
 800a756:	682b      	ldr	r3, [r5, #0]
 800a758:	b103      	cbz	r3, 800a75c <_kill_r+0x1c>
 800a75a:	6023      	str	r3, [r4, #0]
 800a75c:	bd38      	pop	{r3, r4, r5, pc}
 800a75e:	bf00      	nop
 800a760:	20000d44 	.word	0x20000d44

0800a764 <_getpid_r>:
 800a764:	f7f8 bab2 	b.w	8002ccc <_getpid>

0800a768 <_malloc_usable_size_r>:
 800a768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a76c:	1f18      	subs	r0, r3, #4
 800a76e:	2b00      	cmp	r3, #0
 800a770:	bfbc      	itt	lt
 800a772:	580b      	ldrlt	r3, [r1, r0]
 800a774:	18c0      	addlt	r0, r0, r3
 800a776:	4770      	bx	lr

0800a778 <acos>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	ed2d 8b02 	vpush	{d8}
 800a77e:	ec55 4b10 	vmov	r4, r5, d0
 800a782:	f000 f9b9 	bl	800aaf8 <__ieee754_acos>
 800a786:	4622      	mov	r2, r4
 800a788:	462b      	mov	r3, r5
 800a78a:	4620      	mov	r0, r4
 800a78c:	4629      	mov	r1, r5
 800a78e:	eeb0 8a40 	vmov.f32	s16, s0
 800a792:	eef0 8a60 	vmov.f32	s17, s1
 800a796:	f7f6 f9e1 	bl	8000b5c <__aeabi_dcmpun>
 800a79a:	b9a8      	cbnz	r0, 800a7c8 <acos+0x50>
 800a79c:	ec45 4b10 	vmov	d0, r4, r5
 800a7a0:	f000 f8bc 	bl	800a91c <fabs>
 800a7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a7d8 <acos+0x60>)
 800a7a6:	ec51 0b10 	vmov	r0, r1, d0
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f7f6 f9cc 	bl	8000b48 <__aeabi_dcmpgt>
 800a7b0:	b150      	cbz	r0, 800a7c8 <acos+0x50>
 800a7b2:	f7fc fcc9 	bl	8007148 <__errno>
 800a7b6:	ecbd 8b02 	vpop	{d8}
 800a7ba:	2321      	movs	r3, #33	@ 0x21
 800a7bc:	6003      	str	r3, [r0, #0]
 800a7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7c2:	4806      	ldr	r0, [pc, #24]	@ (800a7dc <acos+0x64>)
 800a7c4:	f7ff bbe4 	b.w	8009f90 <nan>
 800a7c8:	eeb0 0a48 	vmov.f32	s0, s16
 800a7cc:	eef0 0a68 	vmov.f32	s1, s17
 800a7d0:	ecbd 8b02 	vpop	{d8}
 800a7d4:	bd38      	pop	{r3, r4, r5, pc}
 800a7d6:	bf00      	nop
 800a7d8:	3ff00000 	.word	0x3ff00000
 800a7dc:	0800c841 	.word	0x0800c841

0800a7e0 <atan2>:
 800a7e0:	f000 bbe6 	b.w	800afb0 <__ieee754_atan2>

0800a7e4 <pow>:
 800a7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e6:	ed2d 8b02 	vpush	{d8}
 800a7ea:	eeb0 8a40 	vmov.f32	s16, s0
 800a7ee:	eef0 8a60 	vmov.f32	s17, s1
 800a7f2:	ec55 4b11 	vmov	r4, r5, d1
 800a7f6:	f000 fca3 	bl	800b140 <__ieee754_pow>
 800a7fa:	4622      	mov	r2, r4
 800a7fc:	462b      	mov	r3, r5
 800a7fe:	4620      	mov	r0, r4
 800a800:	4629      	mov	r1, r5
 800a802:	ec57 6b10 	vmov	r6, r7, d0
 800a806:	f7f6 f9a9 	bl	8000b5c <__aeabi_dcmpun>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d13b      	bne.n	800a886 <pow+0xa2>
 800a80e:	ec51 0b18 	vmov	r0, r1, d8
 800a812:	2200      	movs	r2, #0
 800a814:	2300      	movs	r3, #0
 800a816:	f7f6 f96f 	bl	8000af8 <__aeabi_dcmpeq>
 800a81a:	b1b8      	cbz	r0, 800a84c <pow+0x68>
 800a81c:	2200      	movs	r2, #0
 800a81e:	2300      	movs	r3, #0
 800a820:	4620      	mov	r0, r4
 800a822:	4629      	mov	r1, r5
 800a824:	f7f6 f968 	bl	8000af8 <__aeabi_dcmpeq>
 800a828:	2800      	cmp	r0, #0
 800a82a:	d146      	bne.n	800a8ba <pow+0xd6>
 800a82c:	ec45 4b10 	vmov	d0, r4, r5
 800a830:	f000 f87c 	bl	800a92c <finite>
 800a834:	b338      	cbz	r0, 800a886 <pow+0xa2>
 800a836:	2200      	movs	r2, #0
 800a838:	2300      	movs	r3, #0
 800a83a:	4620      	mov	r0, r4
 800a83c:	4629      	mov	r1, r5
 800a83e:	f7f6 f965 	bl	8000b0c <__aeabi_dcmplt>
 800a842:	b300      	cbz	r0, 800a886 <pow+0xa2>
 800a844:	f7fc fc80 	bl	8007148 <__errno>
 800a848:	2322      	movs	r3, #34	@ 0x22
 800a84a:	e01b      	b.n	800a884 <pow+0xa0>
 800a84c:	ec47 6b10 	vmov	d0, r6, r7
 800a850:	f000 f86c 	bl	800a92c <finite>
 800a854:	b9e0      	cbnz	r0, 800a890 <pow+0xac>
 800a856:	eeb0 0a48 	vmov.f32	s0, s16
 800a85a:	eef0 0a68 	vmov.f32	s1, s17
 800a85e:	f000 f865 	bl	800a92c <finite>
 800a862:	b1a8      	cbz	r0, 800a890 <pow+0xac>
 800a864:	ec45 4b10 	vmov	d0, r4, r5
 800a868:	f000 f860 	bl	800a92c <finite>
 800a86c:	b180      	cbz	r0, 800a890 <pow+0xac>
 800a86e:	4632      	mov	r2, r6
 800a870:	463b      	mov	r3, r7
 800a872:	4630      	mov	r0, r6
 800a874:	4639      	mov	r1, r7
 800a876:	f7f6 f971 	bl	8000b5c <__aeabi_dcmpun>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d0e2      	beq.n	800a844 <pow+0x60>
 800a87e:	f7fc fc63 	bl	8007148 <__errno>
 800a882:	2321      	movs	r3, #33	@ 0x21
 800a884:	6003      	str	r3, [r0, #0]
 800a886:	ecbd 8b02 	vpop	{d8}
 800a88a:	ec47 6b10 	vmov	d0, r6, r7
 800a88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a890:	2200      	movs	r2, #0
 800a892:	2300      	movs	r3, #0
 800a894:	4630      	mov	r0, r6
 800a896:	4639      	mov	r1, r7
 800a898:	f7f6 f92e 	bl	8000af8 <__aeabi_dcmpeq>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d0f2      	beq.n	800a886 <pow+0xa2>
 800a8a0:	eeb0 0a48 	vmov.f32	s0, s16
 800a8a4:	eef0 0a68 	vmov.f32	s1, s17
 800a8a8:	f000 f840 	bl	800a92c <finite>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d0ea      	beq.n	800a886 <pow+0xa2>
 800a8b0:	ec45 4b10 	vmov	d0, r4, r5
 800a8b4:	f000 f83a 	bl	800a92c <finite>
 800a8b8:	e7c3      	b.n	800a842 <pow+0x5e>
 800a8ba:	4f01      	ldr	r7, [pc, #4]	@ (800a8c0 <pow+0xdc>)
 800a8bc:	2600      	movs	r6, #0
 800a8be:	e7e2      	b.n	800a886 <pow+0xa2>
 800a8c0:	3ff00000 	.word	0x3ff00000

0800a8c4 <sqrt>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	ed2d 8b02 	vpush	{d8}
 800a8ca:	ec55 4b10 	vmov	r4, r5, d0
 800a8ce:	f000 f839 	bl	800a944 <__ieee754_sqrt>
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	462b      	mov	r3, r5
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	4629      	mov	r1, r5
 800a8da:	eeb0 8a40 	vmov.f32	s16, s0
 800a8de:	eef0 8a60 	vmov.f32	s17, s1
 800a8e2:	f7f6 f93b 	bl	8000b5c <__aeabi_dcmpun>
 800a8e6:	b990      	cbnz	r0, 800a90e <sqrt+0x4a>
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	4629      	mov	r1, r5
 800a8f0:	f7f6 f90c 	bl	8000b0c <__aeabi_dcmplt>
 800a8f4:	b158      	cbz	r0, 800a90e <sqrt+0x4a>
 800a8f6:	f7fc fc27 	bl	8007148 <__errno>
 800a8fa:	2321      	movs	r3, #33	@ 0x21
 800a8fc:	6003      	str	r3, [r0, #0]
 800a8fe:	2200      	movs	r2, #0
 800a900:	2300      	movs	r3, #0
 800a902:	4610      	mov	r0, r2
 800a904:	4619      	mov	r1, r3
 800a906:	f7f5 ffb9 	bl	800087c <__aeabi_ddiv>
 800a90a:	ec41 0b18 	vmov	d8, r0, r1
 800a90e:	eeb0 0a48 	vmov.f32	s0, s16
 800a912:	eef0 0a68 	vmov.f32	s1, s17
 800a916:	ecbd 8b02 	vpop	{d8}
 800a91a:	bd38      	pop	{r3, r4, r5, pc}

0800a91c <fabs>:
 800a91c:	ec51 0b10 	vmov	r0, r1, d0
 800a920:	4602      	mov	r2, r0
 800a922:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a926:	ec43 2b10 	vmov	d0, r2, r3
 800a92a:	4770      	bx	lr

0800a92c <finite>:
 800a92c:	b082      	sub	sp, #8
 800a92e:	ed8d 0b00 	vstr	d0, [sp]
 800a932:	9801      	ldr	r0, [sp, #4]
 800a934:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a938:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a93c:	0fc0      	lsrs	r0, r0, #31
 800a93e:	b002      	add	sp, #8
 800a940:	4770      	bx	lr
	...

0800a944 <__ieee754_sqrt>:
 800a944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a948:	4a68      	ldr	r2, [pc, #416]	@ (800aaec <__ieee754_sqrt+0x1a8>)
 800a94a:	ec55 4b10 	vmov	r4, r5, d0
 800a94e:	43aa      	bics	r2, r5
 800a950:	462b      	mov	r3, r5
 800a952:	4621      	mov	r1, r4
 800a954:	d110      	bne.n	800a978 <__ieee754_sqrt+0x34>
 800a956:	4622      	mov	r2, r4
 800a958:	4620      	mov	r0, r4
 800a95a:	4629      	mov	r1, r5
 800a95c:	f7f5 fe64 	bl	8000628 <__aeabi_dmul>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4620      	mov	r0, r4
 800a966:	4629      	mov	r1, r5
 800a968:	f7f5 fca8 	bl	80002bc <__adddf3>
 800a96c:	4604      	mov	r4, r0
 800a96e:	460d      	mov	r5, r1
 800a970:	ec45 4b10 	vmov	d0, r4, r5
 800a974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a978:	2d00      	cmp	r5, #0
 800a97a:	dc0e      	bgt.n	800a99a <__ieee754_sqrt+0x56>
 800a97c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a980:	4322      	orrs	r2, r4
 800a982:	d0f5      	beq.n	800a970 <__ieee754_sqrt+0x2c>
 800a984:	b19d      	cbz	r5, 800a9ae <__ieee754_sqrt+0x6a>
 800a986:	4622      	mov	r2, r4
 800a988:	4620      	mov	r0, r4
 800a98a:	4629      	mov	r1, r5
 800a98c:	f7f5 fc94 	bl	80002b8 <__aeabi_dsub>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	f7f5 ff72 	bl	800087c <__aeabi_ddiv>
 800a998:	e7e8      	b.n	800a96c <__ieee754_sqrt+0x28>
 800a99a:	152a      	asrs	r2, r5, #20
 800a99c:	d115      	bne.n	800a9ca <__ieee754_sqrt+0x86>
 800a99e:	2000      	movs	r0, #0
 800a9a0:	e009      	b.n	800a9b6 <__ieee754_sqrt+0x72>
 800a9a2:	0acb      	lsrs	r3, r1, #11
 800a9a4:	3a15      	subs	r2, #21
 800a9a6:	0549      	lsls	r1, r1, #21
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d0fa      	beq.n	800a9a2 <__ieee754_sqrt+0x5e>
 800a9ac:	e7f7      	b.n	800a99e <__ieee754_sqrt+0x5a>
 800a9ae:	462a      	mov	r2, r5
 800a9b0:	e7fa      	b.n	800a9a8 <__ieee754_sqrt+0x64>
 800a9b2:	005b      	lsls	r3, r3, #1
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	02dc      	lsls	r4, r3, #11
 800a9b8:	d5fb      	bpl.n	800a9b2 <__ieee754_sqrt+0x6e>
 800a9ba:	1e44      	subs	r4, r0, #1
 800a9bc:	1b12      	subs	r2, r2, r4
 800a9be:	f1c0 0420 	rsb	r4, r0, #32
 800a9c2:	fa21 f404 	lsr.w	r4, r1, r4
 800a9c6:	4323      	orrs	r3, r4
 800a9c8:	4081      	lsls	r1, r0
 800a9ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9ce:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a9d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9d6:	07d2      	lsls	r2, r2, #31
 800a9d8:	bf5c      	itt	pl
 800a9da:	005b      	lslpl	r3, r3, #1
 800a9dc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a9e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a9e4:	bf58      	it	pl
 800a9e6:	0049      	lslpl	r1, r1, #1
 800a9e8:	2600      	movs	r6, #0
 800a9ea:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a9ee:	106d      	asrs	r5, r5, #1
 800a9f0:	0049      	lsls	r1, r1, #1
 800a9f2:	2016      	movs	r0, #22
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a9fa:	1917      	adds	r7, r2, r4
 800a9fc:	429f      	cmp	r7, r3
 800a9fe:	bfde      	ittt	le
 800aa00:	193a      	addle	r2, r7, r4
 800aa02:	1bdb      	suble	r3, r3, r7
 800aa04:	1936      	addle	r6, r6, r4
 800aa06:	0fcf      	lsrs	r7, r1, #31
 800aa08:	3801      	subs	r0, #1
 800aa0a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800aa0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aa12:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800aa16:	d1f0      	bne.n	800a9fa <__ieee754_sqrt+0xb6>
 800aa18:	4604      	mov	r4, r0
 800aa1a:	2720      	movs	r7, #32
 800aa1c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800aa20:	429a      	cmp	r2, r3
 800aa22:	eb00 0e0c 	add.w	lr, r0, ip
 800aa26:	db02      	blt.n	800aa2e <__ieee754_sqrt+0xea>
 800aa28:	d113      	bne.n	800aa52 <__ieee754_sqrt+0x10e>
 800aa2a:	458e      	cmp	lr, r1
 800aa2c:	d811      	bhi.n	800aa52 <__ieee754_sqrt+0x10e>
 800aa2e:	f1be 0f00 	cmp.w	lr, #0
 800aa32:	eb0e 000c 	add.w	r0, lr, ip
 800aa36:	da42      	bge.n	800aabe <__ieee754_sqrt+0x17a>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	db40      	blt.n	800aabe <__ieee754_sqrt+0x17a>
 800aa3c:	f102 0801 	add.w	r8, r2, #1
 800aa40:	1a9b      	subs	r3, r3, r2
 800aa42:	458e      	cmp	lr, r1
 800aa44:	bf88      	it	hi
 800aa46:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800aa4a:	eba1 010e 	sub.w	r1, r1, lr
 800aa4e:	4464      	add	r4, ip
 800aa50:	4642      	mov	r2, r8
 800aa52:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800aa56:	3f01      	subs	r7, #1
 800aa58:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800aa5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aa60:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800aa64:	d1dc      	bne.n	800aa20 <__ieee754_sqrt+0xdc>
 800aa66:	4319      	orrs	r1, r3
 800aa68:	d01b      	beq.n	800aaa2 <__ieee754_sqrt+0x15e>
 800aa6a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800aaf0 <__ieee754_sqrt+0x1ac>
 800aa6e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800aaf4 <__ieee754_sqrt+0x1b0>
 800aa72:	e9da 0100 	ldrd	r0, r1, [sl]
 800aa76:	e9db 2300 	ldrd	r2, r3, [fp]
 800aa7a:	f7f5 fc1d 	bl	80002b8 <__aeabi_dsub>
 800aa7e:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4640      	mov	r0, r8
 800aa88:	4649      	mov	r1, r9
 800aa8a:	f7f6 f849 	bl	8000b20 <__aeabi_dcmple>
 800aa8e:	b140      	cbz	r0, 800aaa2 <__ieee754_sqrt+0x15e>
 800aa90:	f1b4 3fff 	cmp.w	r4, #4294967295
 800aa94:	e9da 0100 	ldrd	r0, r1, [sl]
 800aa98:	e9db 2300 	ldrd	r2, r3, [fp]
 800aa9c:	d111      	bne.n	800aac2 <__ieee754_sqrt+0x17e>
 800aa9e:	3601      	adds	r6, #1
 800aaa0:	463c      	mov	r4, r7
 800aaa2:	1072      	asrs	r2, r6, #1
 800aaa4:	0863      	lsrs	r3, r4, #1
 800aaa6:	07f1      	lsls	r1, r6, #31
 800aaa8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800aaac:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800aab0:	bf48      	it	mi
 800aab2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800aab6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800aaba:	4618      	mov	r0, r3
 800aabc:	e756      	b.n	800a96c <__ieee754_sqrt+0x28>
 800aabe:	4690      	mov	r8, r2
 800aac0:	e7be      	b.n	800aa40 <__ieee754_sqrt+0xfc>
 800aac2:	f7f5 fbfb 	bl	80002bc <__adddf3>
 800aac6:	e9da 8900 	ldrd	r8, r9, [sl]
 800aaca:	4602      	mov	r2, r0
 800aacc:	460b      	mov	r3, r1
 800aace:	4640      	mov	r0, r8
 800aad0:	4649      	mov	r1, r9
 800aad2:	f7f6 f81b 	bl	8000b0c <__aeabi_dcmplt>
 800aad6:	b120      	cbz	r0, 800aae2 <__ieee754_sqrt+0x19e>
 800aad8:	1ca0      	adds	r0, r4, #2
 800aada:	bf08      	it	eq
 800aadc:	3601      	addeq	r6, #1
 800aade:	3402      	adds	r4, #2
 800aae0:	e7df      	b.n	800aaa2 <__ieee754_sqrt+0x15e>
 800aae2:	1c63      	adds	r3, r4, #1
 800aae4:	f023 0401 	bic.w	r4, r3, #1
 800aae8:	e7db      	b.n	800aaa2 <__ieee754_sqrt+0x15e>
 800aaea:	bf00      	nop
 800aaec:	7ff00000 	.word	0x7ff00000
 800aaf0:	20000210 	.word	0x20000210
 800aaf4:	20000208 	.word	0x20000208

0800aaf8 <__ieee754_acos>:
 800aaf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafc:	ec55 4b10 	vmov	r4, r5, d0
 800ab00:	49b7      	ldr	r1, [pc, #732]	@ (800ade0 <__ieee754_acos+0x2e8>)
 800ab02:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ab06:	428b      	cmp	r3, r1
 800ab08:	d919      	bls.n	800ab3e <__ieee754_acos+0x46>
 800ab0a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800ab0e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800ab12:	4323      	orrs	r3, r4
 800ab14:	d106      	bne.n	800ab24 <__ieee754_acos+0x2c>
 800ab16:	2d00      	cmp	r5, #0
 800ab18:	f340 8210 	ble.w	800af3c <__ieee754_acos+0x444>
 800ab1c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800ad70 <__ieee754_acos+0x278>
 800ab20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab24:	4622      	mov	r2, r4
 800ab26:	462b      	mov	r3, r5
 800ab28:	4620      	mov	r0, r4
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	f7f5 fbc4 	bl	80002b8 <__aeabi_dsub>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	f7f5 fea2 	bl	800087c <__aeabi_ddiv>
 800ab38:	ec41 0b10 	vmov	d0, r0, r1
 800ab3c:	e7f0      	b.n	800ab20 <__ieee754_acos+0x28>
 800ab3e:	49a9      	ldr	r1, [pc, #676]	@ (800ade4 <__ieee754_acos+0x2ec>)
 800ab40:	428b      	cmp	r3, r1
 800ab42:	f200 8085 	bhi.w	800ac50 <__ieee754_acos+0x158>
 800ab46:	4aa8      	ldr	r2, [pc, #672]	@ (800ade8 <__ieee754_acos+0x2f0>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	f240 81fa 	bls.w	800af42 <__ieee754_acos+0x44a>
 800ab4e:	4622      	mov	r2, r4
 800ab50:	462b      	mov	r3, r5
 800ab52:	4620      	mov	r0, r4
 800ab54:	4629      	mov	r1, r5
 800ab56:	f7f5 fd67 	bl	8000628 <__aeabi_dmul>
 800ab5a:	a387      	add	r3, pc, #540	@ (adr r3, 800ad78 <__ieee754_acos+0x280>)
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	4606      	mov	r6, r0
 800ab62:	460f      	mov	r7, r1
 800ab64:	f7f5 fd60 	bl	8000628 <__aeabi_dmul>
 800ab68:	a385      	add	r3, pc, #532	@ (adr r3, 800ad80 <__ieee754_acos+0x288>)
 800ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6e:	f7f5 fba5 	bl	80002bc <__adddf3>
 800ab72:	4632      	mov	r2, r6
 800ab74:	463b      	mov	r3, r7
 800ab76:	f7f5 fd57 	bl	8000628 <__aeabi_dmul>
 800ab7a:	a383      	add	r3, pc, #524	@ (adr r3, 800ad88 <__ieee754_acos+0x290>)
 800ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab80:	f7f5 fb9a 	bl	80002b8 <__aeabi_dsub>
 800ab84:	4632      	mov	r2, r6
 800ab86:	463b      	mov	r3, r7
 800ab88:	f7f5 fd4e 	bl	8000628 <__aeabi_dmul>
 800ab8c:	a380      	add	r3, pc, #512	@ (adr r3, 800ad90 <__ieee754_acos+0x298>)
 800ab8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab92:	f7f5 fb93 	bl	80002bc <__adddf3>
 800ab96:	4632      	mov	r2, r6
 800ab98:	463b      	mov	r3, r7
 800ab9a:	f7f5 fd45 	bl	8000628 <__aeabi_dmul>
 800ab9e:	a37e      	add	r3, pc, #504	@ (adr r3, 800ad98 <__ieee754_acos+0x2a0>)
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	f7f5 fb88 	bl	80002b8 <__aeabi_dsub>
 800aba8:	4632      	mov	r2, r6
 800abaa:	463b      	mov	r3, r7
 800abac:	f7f5 fd3c 	bl	8000628 <__aeabi_dmul>
 800abb0:	a37b      	add	r3, pc, #492	@ (adr r3, 800ada0 <__ieee754_acos+0x2a8>)
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	f7f5 fb81 	bl	80002bc <__adddf3>
 800abba:	4632      	mov	r2, r6
 800abbc:	463b      	mov	r3, r7
 800abbe:	f7f5 fd33 	bl	8000628 <__aeabi_dmul>
 800abc2:	a379      	add	r3, pc, #484	@ (adr r3, 800ada8 <__ieee754_acos+0x2b0>)
 800abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc8:	4680      	mov	r8, r0
 800abca:	4689      	mov	r9, r1
 800abcc:	4630      	mov	r0, r6
 800abce:	4639      	mov	r1, r7
 800abd0:	f7f5 fd2a 	bl	8000628 <__aeabi_dmul>
 800abd4:	a376      	add	r3, pc, #472	@ (adr r3, 800adb0 <__ieee754_acos+0x2b8>)
 800abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abda:	f7f5 fb6d 	bl	80002b8 <__aeabi_dsub>
 800abde:	4632      	mov	r2, r6
 800abe0:	463b      	mov	r3, r7
 800abe2:	f7f5 fd21 	bl	8000628 <__aeabi_dmul>
 800abe6:	a374      	add	r3, pc, #464	@ (adr r3, 800adb8 <__ieee754_acos+0x2c0>)
 800abe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abec:	f7f5 fb66 	bl	80002bc <__adddf3>
 800abf0:	4632      	mov	r2, r6
 800abf2:	463b      	mov	r3, r7
 800abf4:	f7f5 fd18 	bl	8000628 <__aeabi_dmul>
 800abf8:	a371      	add	r3, pc, #452	@ (adr r3, 800adc0 <__ieee754_acos+0x2c8>)
 800abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfe:	f7f5 fb5b 	bl	80002b8 <__aeabi_dsub>
 800ac02:	4632      	mov	r2, r6
 800ac04:	463b      	mov	r3, r7
 800ac06:	f7f5 fd0f 	bl	8000628 <__aeabi_dmul>
 800ac0a:	4b78      	ldr	r3, [pc, #480]	@ (800adec <__ieee754_acos+0x2f4>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f7f5 fb55 	bl	80002bc <__adddf3>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	4640      	mov	r0, r8
 800ac18:	4649      	mov	r1, r9
 800ac1a:	f7f5 fe2f 	bl	800087c <__aeabi_ddiv>
 800ac1e:	4622      	mov	r2, r4
 800ac20:	462b      	mov	r3, r5
 800ac22:	f7f5 fd01 	bl	8000628 <__aeabi_dmul>
 800ac26:	4602      	mov	r2, r0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	a167      	add	r1, pc, #412	@ (adr r1, 800adc8 <__ieee754_acos+0x2d0>)
 800ac2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac30:	f7f5 fb42 	bl	80002b8 <__aeabi_dsub>
 800ac34:	4602      	mov	r2, r0
 800ac36:	460b      	mov	r3, r1
 800ac38:	4620      	mov	r0, r4
 800ac3a:	4629      	mov	r1, r5
 800ac3c:	f7f5 fb3c 	bl	80002b8 <__aeabi_dsub>
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	a162      	add	r1, pc, #392	@ (adr r1, 800add0 <__ieee754_acos+0x2d8>)
 800ac46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac4a:	f7f5 fb35 	bl	80002b8 <__aeabi_dsub>
 800ac4e:	e773      	b.n	800ab38 <__ieee754_acos+0x40>
 800ac50:	2d00      	cmp	r5, #0
 800ac52:	f280 80cf 	bge.w	800adf4 <__ieee754_acos+0x2fc>
 800ac56:	4b65      	ldr	r3, [pc, #404]	@ (800adec <__ieee754_acos+0x2f4>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	f7f5 fb2d 	bl	80002bc <__adddf3>
 800ac62:	4b63      	ldr	r3, [pc, #396]	@ (800adf0 <__ieee754_acos+0x2f8>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	f7f5 fcdf 	bl	8000628 <__aeabi_dmul>
 800ac6a:	a343      	add	r3, pc, #268	@ (adr r3, 800ad78 <__ieee754_acos+0x280>)
 800ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac70:	4604      	mov	r4, r0
 800ac72:	460d      	mov	r5, r1
 800ac74:	f7f5 fcd8 	bl	8000628 <__aeabi_dmul>
 800ac78:	a341      	add	r3, pc, #260	@ (adr r3, 800ad80 <__ieee754_acos+0x288>)
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	f7f5 fb1d 	bl	80002bc <__adddf3>
 800ac82:	4622      	mov	r2, r4
 800ac84:	462b      	mov	r3, r5
 800ac86:	f7f5 fccf 	bl	8000628 <__aeabi_dmul>
 800ac8a:	a33f      	add	r3, pc, #252	@ (adr r3, 800ad88 <__ieee754_acos+0x290>)
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	f7f5 fb12 	bl	80002b8 <__aeabi_dsub>
 800ac94:	4622      	mov	r2, r4
 800ac96:	462b      	mov	r3, r5
 800ac98:	f7f5 fcc6 	bl	8000628 <__aeabi_dmul>
 800ac9c:	a33c      	add	r3, pc, #240	@ (adr r3, 800ad90 <__ieee754_acos+0x298>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 fb0b 	bl	80002bc <__adddf3>
 800aca6:	4622      	mov	r2, r4
 800aca8:	462b      	mov	r3, r5
 800acaa:	f7f5 fcbd 	bl	8000628 <__aeabi_dmul>
 800acae:	a33a      	add	r3, pc, #232	@ (adr r3, 800ad98 <__ieee754_acos+0x2a0>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f7f5 fb00 	bl	80002b8 <__aeabi_dsub>
 800acb8:	4622      	mov	r2, r4
 800acba:	462b      	mov	r3, r5
 800acbc:	f7f5 fcb4 	bl	8000628 <__aeabi_dmul>
 800acc0:	a337      	add	r3, pc, #220	@ (adr r3, 800ada0 <__ieee754_acos+0x2a8>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	f7f5 faf9 	bl	80002bc <__adddf3>
 800acca:	4622      	mov	r2, r4
 800accc:	462b      	mov	r3, r5
 800acce:	f7f5 fcab 	bl	8000628 <__aeabi_dmul>
 800acd2:	a335      	add	r3, pc, #212	@ (adr r3, 800ada8 <__ieee754_acos+0x2b0>)
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	4606      	mov	r6, r0
 800acda:	460f      	mov	r7, r1
 800acdc:	4620      	mov	r0, r4
 800acde:	4629      	mov	r1, r5
 800ace0:	f7f5 fca2 	bl	8000628 <__aeabi_dmul>
 800ace4:	a332      	add	r3, pc, #200	@ (adr r3, 800adb0 <__ieee754_acos+0x2b8>)
 800ace6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acea:	f7f5 fae5 	bl	80002b8 <__aeabi_dsub>
 800acee:	4622      	mov	r2, r4
 800acf0:	462b      	mov	r3, r5
 800acf2:	f7f5 fc99 	bl	8000628 <__aeabi_dmul>
 800acf6:	a330      	add	r3, pc, #192	@ (adr r3, 800adb8 <__ieee754_acos+0x2c0>)
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	f7f5 fade 	bl	80002bc <__adddf3>
 800ad00:	4622      	mov	r2, r4
 800ad02:	462b      	mov	r3, r5
 800ad04:	f7f5 fc90 	bl	8000628 <__aeabi_dmul>
 800ad08:	a32d      	add	r3, pc, #180	@ (adr r3, 800adc0 <__ieee754_acos+0x2c8>)
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	f7f5 fad3 	bl	80002b8 <__aeabi_dsub>
 800ad12:	4622      	mov	r2, r4
 800ad14:	462b      	mov	r3, r5
 800ad16:	f7f5 fc87 	bl	8000628 <__aeabi_dmul>
 800ad1a:	4b34      	ldr	r3, [pc, #208]	@ (800adec <__ieee754_acos+0x2f4>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f7f5 facd 	bl	80002bc <__adddf3>
 800ad22:	ec45 4b10 	vmov	d0, r4, r5
 800ad26:	4680      	mov	r8, r0
 800ad28:	4689      	mov	r9, r1
 800ad2a:	f7ff fe0b 	bl	800a944 <__ieee754_sqrt>
 800ad2e:	ec55 4b10 	vmov	r4, r5, d0
 800ad32:	4642      	mov	r2, r8
 800ad34:	464b      	mov	r3, r9
 800ad36:	4630      	mov	r0, r6
 800ad38:	4639      	mov	r1, r7
 800ad3a:	f7f5 fd9f 	bl	800087c <__aeabi_ddiv>
 800ad3e:	4622      	mov	r2, r4
 800ad40:	462b      	mov	r3, r5
 800ad42:	f7f5 fc71 	bl	8000628 <__aeabi_dmul>
 800ad46:	a320      	add	r3, pc, #128	@ (adr r3, 800adc8 <__ieee754_acos+0x2d0>)
 800ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4c:	f7f5 fab4 	bl	80002b8 <__aeabi_dsub>
 800ad50:	4622      	mov	r2, r4
 800ad52:	462b      	mov	r3, r5
 800ad54:	f7f5 fab2 	bl	80002bc <__adddf3>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	f7f5 faae 	bl	80002bc <__adddf3>
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	a11c      	add	r1, pc, #112	@ (adr r1, 800add8 <__ieee754_acos+0x2e0>)
 800ad66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad6a:	e76e      	b.n	800ac4a <__ieee754_acos+0x152>
 800ad6c:	f3af 8000 	nop.w
	...
 800ad78:	0dfdf709 	.word	0x0dfdf709
 800ad7c:	3f023de1 	.word	0x3f023de1
 800ad80:	7501b288 	.word	0x7501b288
 800ad84:	3f49efe0 	.word	0x3f49efe0
 800ad88:	b5688f3b 	.word	0xb5688f3b
 800ad8c:	3fa48228 	.word	0x3fa48228
 800ad90:	0e884455 	.word	0x0e884455
 800ad94:	3fc9c155 	.word	0x3fc9c155
 800ad98:	03eb6f7d 	.word	0x03eb6f7d
 800ad9c:	3fd4d612 	.word	0x3fd4d612
 800ada0:	55555555 	.word	0x55555555
 800ada4:	3fc55555 	.word	0x3fc55555
 800ada8:	b12e9282 	.word	0xb12e9282
 800adac:	3fb3b8c5 	.word	0x3fb3b8c5
 800adb0:	1b8d0159 	.word	0x1b8d0159
 800adb4:	3fe6066c 	.word	0x3fe6066c
 800adb8:	9c598ac8 	.word	0x9c598ac8
 800adbc:	40002ae5 	.word	0x40002ae5
 800adc0:	1c8a2d4b 	.word	0x1c8a2d4b
 800adc4:	40033a27 	.word	0x40033a27
 800adc8:	33145c07 	.word	0x33145c07
 800adcc:	3c91a626 	.word	0x3c91a626
 800add0:	54442d18 	.word	0x54442d18
 800add4:	3ff921fb 	.word	0x3ff921fb
 800add8:	54442d18 	.word	0x54442d18
 800addc:	400921fb 	.word	0x400921fb
 800ade0:	3fefffff 	.word	0x3fefffff
 800ade4:	3fdfffff 	.word	0x3fdfffff
 800ade8:	3c600000 	.word	0x3c600000
 800adec:	3ff00000 	.word	0x3ff00000
 800adf0:	3fe00000 	.word	0x3fe00000
 800adf4:	4622      	mov	r2, r4
 800adf6:	462b      	mov	r3, r5
 800adf8:	496b      	ldr	r1, [pc, #428]	@ (800afa8 <__ieee754_acos+0x4b0>)
 800adfa:	2000      	movs	r0, #0
 800adfc:	f7f5 fa5c 	bl	80002b8 <__aeabi_dsub>
 800ae00:	4b6a      	ldr	r3, [pc, #424]	@ (800afac <__ieee754_acos+0x4b4>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	f7f5 fc10 	bl	8000628 <__aeabi_dmul>
 800ae08:	4604      	mov	r4, r0
 800ae0a:	460d      	mov	r5, r1
 800ae0c:	ec45 4b10 	vmov	d0, r4, r5
 800ae10:	f7ff fd98 	bl	800a944 <__ieee754_sqrt>
 800ae14:	a34c      	add	r3, pc, #304	@ (adr r3, 800af48 <__ieee754_acos+0x450>)
 800ae16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	ec59 8b10 	vmov	r8, r9, d0
 800ae22:	f7f5 fc01 	bl	8000628 <__aeabi_dmul>
 800ae26:	a34a      	add	r3, pc, #296	@ (adr r3, 800af50 <__ieee754_acos+0x458>)
 800ae28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2c:	f7f5 fa46 	bl	80002bc <__adddf3>
 800ae30:	4622      	mov	r2, r4
 800ae32:	462b      	mov	r3, r5
 800ae34:	f7f5 fbf8 	bl	8000628 <__aeabi_dmul>
 800ae38:	a347      	add	r3, pc, #284	@ (adr r3, 800af58 <__ieee754_acos+0x460>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	f7f5 fa3b 	bl	80002b8 <__aeabi_dsub>
 800ae42:	4622      	mov	r2, r4
 800ae44:	462b      	mov	r3, r5
 800ae46:	f7f5 fbef 	bl	8000628 <__aeabi_dmul>
 800ae4a:	a345      	add	r3, pc, #276	@ (adr r3, 800af60 <__ieee754_acos+0x468>)
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	f7f5 fa34 	bl	80002bc <__adddf3>
 800ae54:	4622      	mov	r2, r4
 800ae56:	462b      	mov	r3, r5
 800ae58:	f7f5 fbe6 	bl	8000628 <__aeabi_dmul>
 800ae5c:	a342      	add	r3, pc, #264	@ (adr r3, 800af68 <__ieee754_acos+0x470>)
 800ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae62:	f7f5 fa29 	bl	80002b8 <__aeabi_dsub>
 800ae66:	4622      	mov	r2, r4
 800ae68:	462b      	mov	r3, r5
 800ae6a:	f7f5 fbdd 	bl	8000628 <__aeabi_dmul>
 800ae6e:	a340      	add	r3, pc, #256	@ (adr r3, 800af70 <__ieee754_acos+0x478>)
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	f7f5 fa22 	bl	80002bc <__adddf3>
 800ae78:	4622      	mov	r2, r4
 800ae7a:	462b      	mov	r3, r5
 800ae7c:	f7f5 fbd4 	bl	8000628 <__aeabi_dmul>
 800ae80:	a33d      	add	r3, pc, #244	@ (adr r3, 800af78 <__ieee754_acos+0x480>)
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	4682      	mov	sl, r0
 800ae88:	468b      	mov	fp, r1
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	f7f5 fbcb 	bl	8000628 <__aeabi_dmul>
 800ae92:	a33b      	add	r3, pc, #236	@ (adr r3, 800af80 <__ieee754_acos+0x488>)
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f7f5 fa0e 	bl	80002b8 <__aeabi_dsub>
 800ae9c:	4622      	mov	r2, r4
 800ae9e:	462b      	mov	r3, r5
 800aea0:	f7f5 fbc2 	bl	8000628 <__aeabi_dmul>
 800aea4:	a338      	add	r3, pc, #224	@ (adr r3, 800af88 <__ieee754_acos+0x490>)
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	f7f5 fa07 	bl	80002bc <__adddf3>
 800aeae:	4622      	mov	r2, r4
 800aeb0:	462b      	mov	r3, r5
 800aeb2:	f7f5 fbb9 	bl	8000628 <__aeabi_dmul>
 800aeb6:	a336      	add	r3, pc, #216	@ (adr r3, 800af90 <__ieee754_acos+0x498>)
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	f7f5 f9fc 	bl	80002b8 <__aeabi_dsub>
 800aec0:	4622      	mov	r2, r4
 800aec2:	462b      	mov	r3, r5
 800aec4:	f7f5 fbb0 	bl	8000628 <__aeabi_dmul>
 800aec8:	4b37      	ldr	r3, [pc, #220]	@ (800afa8 <__ieee754_acos+0x4b0>)
 800aeca:	2200      	movs	r2, #0
 800aecc:	f7f5 f9f6 	bl	80002bc <__adddf3>
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	4650      	mov	r0, sl
 800aed6:	4659      	mov	r1, fp
 800aed8:	f7f5 fcd0 	bl	800087c <__aeabi_ddiv>
 800aedc:	4642      	mov	r2, r8
 800aede:	464b      	mov	r3, r9
 800aee0:	f7f5 fba2 	bl	8000628 <__aeabi_dmul>
 800aee4:	2600      	movs	r6, #0
 800aee6:	4682      	mov	sl, r0
 800aee8:	468b      	mov	fp, r1
 800aeea:	4632      	mov	r2, r6
 800aeec:	464b      	mov	r3, r9
 800aeee:	4630      	mov	r0, r6
 800aef0:	4649      	mov	r1, r9
 800aef2:	f7f5 fb99 	bl	8000628 <__aeabi_dmul>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	4620      	mov	r0, r4
 800aefc:	4629      	mov	r1, r5
 800aefe:	f7f5 f9db 	bl	80002b8 <__aeabi_dsub>
 800af02:	4632      	mov	r2, r6
 800af04:	4604      	mov	r4, r0
 800af06:	460d      	mov	r5, r1
 800af08:	464b      	mov	r3, r9
 800af0a:	4640      	mov	r0, r8
 800af0c:	4649      	mov	r1, r9
 800af0e:	f7f5 f9d5 	bl	80002bc <__adddf3>
 800af12:	4602      	mov	r2, r0
 800af14:	460b      	mov	r3, r1
 800af16:	4620      	mov	r0, r4
 800af18:	4629      	mov	r1, r5
 800af1a:	f7f5 fcaf 	bl	800087c <__aeabi_ddiv>
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	4650      	mov	r0, sl
 800af24:	4659      	mov	r1, fp
 800af26:	f7f5 f9c9 	bl	80002bc <__adddf3>
 800af2a:	4632      	mov	r2, r6
 800af2c:	464b      	mov	r3, r9
 800af2e:	f7f5 f9c5 	bl	80002bc <__adddf3>
 800af32:	4602      	mov	r2, r0
 800af34:	460b      	mov	r3, r1
 800af36:	f7f5 f9c1 	bl	80002bc <__adddf3>
 800af3a:	e5fd      	b.n	800ab38 <__ieee754_acos+0x40>
 800af3c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800af98 <__ieee754_acos+0x4a0>
 800af40:	e5ee      	b.n	800ab20 <__ieee754_acos+0x28>
 800af42:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800afa0 <__ieee754_acos+0x4a8>
 800af46:	e5eb      	b.n	800ab20 <__ieee754_acos+0x28>
 800af48:	0dfdf709 	.word	0x0dfdf709
 800af4c:	3f023de1 	.word	0x3f023de1
 800af50:	7501b288 	.word	0x7501b288
 800af54:	3f49efe0 	.word	0x3f49efe0
 800af58:	b5688f3b 	.word	0xb5688f3b
 800af5c:	3fa48228 	.word	0x3fa48228
 800af60:	0e884455 	.word	0x0e884455
 800af64:	3fc9c155 	.word	0x3fc9c155
 800af68:	03eb6f7d 	.word	0x03eb6f7d
 800af6c:	3fd4d612 	.word	0x3fd4d612
 800af70:	55555555 	.word	0x55555555
 800af74:	3fc55555 	.word	0x3fc55555
 800af78:	b12e9282 	.word	0xb12e9282
 800af7c:	3fb3b8c5 	.word	0x3fb3b8c5
 800af80:	1b8d0159 	.word	0x1b8d0159
 800af84:	3fe6066c 	.word	0x3fe6066c
 800af88:	9c598ac8 	.word	0x9c598ac8
 800af8c:	40002ae5 	.word	0x40002ae5
 800af90:	1c8a2d4b 	.word	0x1c8a2d4b
 800af94:	40033a27 	.word	0x40033a27
 800af98:	54442d18 	.word	0x54442d18
 800af9c:	400921fb 	.word	0x400921fb
 800afa0:	54442d18 	.word	0x54442d18
 800afa4:	3ff921fb 	.word	0x3ff921fb
 800afa8:	3ff00000 	.word	0x3ff00000
 800afac:	3fe00000 	.word	0x3fe00000

0800afb0 <__ieee754_atan2>:
 800afb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afb4:	ec57 6b11 	vmov	r6, r7, d1
 800afb8:	4273      	negs	r3, r6
 800afba:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800b138 <__ieee754_atan2+0x188>
 800afbe:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800afc2:	4333      	orrs	r3, r6
 800afc4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800afc8:	4543      	cmp	r3, r8
 800afca:	ec51 0b10 	vmov	r0, r1, d0
 800afce:	4635      	mov	r5, r6
 800afd0:	d809      	bhi.n	800afe6 <__ieee754_atan2+0x36>
 800afd2:	4244      	negs	r4, r0
 800afd4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800afd8:	4304      	orrs	r4, r0
 800afda:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800afde:	4544      	cmp	r4, r8
 800afe0:	468e      	mov	lr, r1
 800afe2:	4681      	mov	r9, r0
 800afe4:	d907      	bls.n	800aff6 <__ieee754_atan2+0x46>
 800afe6:	4632      	mov	r2, r6
 800afe8:	463b      	mov	r3, r7
 800afea:	f7f5 f967 	bl	80002bc <__adddf3>
 800afee:	ec41 0b10 	vmov	d0, r0, r1
 800aff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aff6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800affa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800affe:	4334      	orrs	r4, r6
 800b000:	d103      	bne.n	800b00a <__ieee754_atan2+0x5a>
 800b002:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b006:	f000 bddf 	b.w	800bbc8 <atan>
 800b00a:	17bc      	asrs	r4, r7, #30
 800b00c:	f004 0402 	and.w	r4, r4, #2
 800b010:	ea53 0909 	orrs.w	r9, r3, r9
 800b014:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b018:	d107      	bne.n	800b02a <__ieee754_atan2+0x7a>
 800b01a:	2c02      	cmp	r4, #2
 800b01c:	d05f      	beq.n	800b0de <__ieee754_atan2+0x12e>
 800b01e:	2c03      	cmp	r4, #3
 800b020:	d1e5      	bne.n	800afee <__ieee754_atan2+0x3e>
 800b022:	a141      	add	r1, pc, #260	@ (adr r1, 800b128 <__ieee754_atan2+0x178>)
 800b024:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b028:	e7e1      	b.n	800afee <__ieee754_atan2+0x3e>
 800b02a:	4315      	orrs	r5, r2
 800b02c:	d106      	bne.n	800b03c <__ieee754_atan2+0x8c>
 800b02e:	f1be 0f00 	cmp.w	lr, #0
 800b032:	da5f      	bge.n	800b0f4 <__ieee754_atan2+0x144>
 800b034:	a13e      	add	r1, pc, #248	@ (adr r1, 800b130 <__ieee754_atan2+0x180>)
 800b036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b03a:	e7d8      	b.n	800afee <__ieee754_atan2+0x3e>
 800b03c:	4542      	cmp	r2, r8
 800b03e:	d10f      	bne.n	800b060 <__ieee754_atan2+0xb0>
 800b040:	4293      	cmp	r3, r2
 800b042:	f104 34ff 	add.w	r4, r4, #4294967295
 800b046:	d107      	bne.n	800b058 <__ieee754_atan2+0xa8>
 800b048:	2c02      	cmp	r4, #2
 800b04a:	d84c      	bhi.n	800b0e6 <__ieee754_atan2+0x136>
 800b04c:	4b34      	ldr	r3, [pc, #208]	@ (800b120 <__ieee754_atan2+0x170>)
 800b04e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b052:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b056:	e7ca      	b.n	800afee <__ieee754_atan2+0x3e>
 800b058:	2c02      	cmp	r4, #2
 800b05a:	d848      	bhi.n	800b0ee <__ieee754_atan2+0x13e>
 800b05c:	4b31      	ldr	r3, [pc, #196]	@ (800b124 <__ieee754_atan2+0x174>)
 800b05e:	e7f6      	b.n	800b04e <__ieee754_atan2+0x9e>
 800b060:	4543      	cmp	r3, r8
 800b062:	d0e4      	beq.n	800b02e <__ieee754_atan2+0x7e>
 800b064:	1a9b      	subs	r3, r3, r2
 800b066:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b06a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b06e:	da1e      	bge.n	800b0ae <__ieee754_atan2+0xfe>
 800b070:	2f00      	cmp	r7, #0
 800b072:	da01      	bge.n	800b078 <__ieee754_atan2+0xc8>
 800b074:	323c      	adds	r2, #60	@ 0x3c
 800b076:	db1e      	blt.n	800b0b6 <__ieee754_atan2+0x106>
 800b078:	4632      	mov	r2, r6
 800b07a:	463b      	mov	r3, r7
 800b07c:	f7f5 fbfe 	bl	800087c <__aeabi_ddiv>
 800b080:	ec41 0b10 	vmov	d0, r0, r1
 800b084:	f7ff fc4a 	bl	800a91c <fabs>
 800b088:	f000 fd9e 	bl	800bbc8 <atan>
 800b08c:	ec51 0b10 	vmov	r0, r1, d0
 800b090:	2c01      	cmp	r4, #1
 800b092:	d013      	beq.n	800b0bc <__ieee754_atan2+0x10c>
 800b094:	2c02      	cmp	r4, #2
 800b096:	d015      	beq.n	800b0c4 <__ieee754_atan2+0x114>
 800b098:	2c00      	cmp	r4, #0
 800b09a:	d0a8      	beq.n	800afee <__ieee754_atan2+0x3e>
 800b09c:	a318      	add	r3, pc, #96	@ (adr r3, 800b100 <__ieee754_atan2+0x150>)
 800b09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a2:	f7f5 f909 	bl	80002b8 <__aeabi_dsub>
 800b0a6:	a318      	add	r3, pc, #96	@ (adr r3, 800b108 <__ieee754_atan2+0x158>)
 800b0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ac:	e014      	b.n	800b0d8 <__ieee754_atan2+0x128>
 800b0ae:	a118      	add	r1, pc, #96	@ (adr r1, 800b110 <__ieee754_atan2+0x160>)
 800b0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b4:	e7ec      	b.n	800b090 <__ieee754_atan2+0xe0>
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	e7e9      	b.n	800b090 <__ieee754_atan2+0xe0>
 800b0bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	e794      	b.n	800afee <__ieee754_atan2+0x3e>
 800b0c4:	a30e      	add	r3, pc, #56	@ (adr r3, 800b100 <__ieee754_atan2+0x150>)
 800b0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ca:	f7f5 f8f5 	bl	80002b8 <__aeabi_dsub>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	a10d      	add	r1, pc, #52	@ (adr r1, 800b108 <__ieee754_atan2+0x158>)
 800b0d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0d8:	f7f5 f8ee 	bl	80002b8 <__aeabi_dsub>
 800b0dc:	e787      	b.n	800afee <__ieee754_atan2+0x3e>
 800b0de:	a10a      	add	r1, pc, #40	@ (adr r1, 800b108 <__ieee754_atan2+0x158>)
 800b0e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0e4:	e783      	b.n	800afee <__ieee754_atan2+0x3e>
 800b0e6:	a10c      	add	r1, pc, #48	@ (adr r1, 800b118 <__ieee754_atan2+0x168>)
 800b0e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0ec:	e77f      	b.n	800afee <__ieee754_atan2+0x3e>
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	e77c      	b.n	800afee <__ieee754_atan2+0x3e>
 800b0f4:	a106      	add	r1, pc, #24	@ (adr r1, 800b110 <__ieee754_atan2+0x160>)
 800b0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0fa:	e778      	b.n	800afee <__ieee754_atan2+0x3e>
 800b0fc:	f3af 8000 	nop.w
 800b100:	33145c07 	.word	0x33145c07
 800b104:	3ca1a626 	.word	0x3ca1a626
 800b108:	54442d18 	.word	0x54442d18
 800b10c:	400921fb 	.word	0x400921fb
 800b110:	54442d18 	.word	0x54442d18
 800b114:	3ff921fb 	.word	0x3ff921fb
 800b118:	54442d18 	.word	0x54442d18
 800b11c:	3fe921fb 	.word	0x3fe921fb
 800b120:	0800cc00 	.word	0x0800cc00
 800b124:	0800cbe8 	.word	0x0800cbe8
 800b128:	54442d18 	.word	0x54442d18
 800b12c:	c00921fb 	.word	0xc00921fb
 800b130:	54442d18 	.word	0x54442d18
 800b134:	bff921fb 	.word	0xbff921fb
 800b138:	7ff00000 	.word	0x7ff00000
 800b13c:	00000000 	.word	0x00000000

0800b140 <__ieee754_pow>:
 800b140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b144:	b091      	sub	sp, #68	@ 0x44
 800b146:	ed8d 1b00 	vstr	d1, [sp]
 800b14a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b14e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b152:	ea5a 0001 	orrs.w	r0, sl, r1
 800b156:	ec57 6b10 	vmov	r6, r7, d0
 800b15a:	d113      	bne.n	800b184 <__ieee754_pow+0x44>
 800b15c:	19b3      	adds	r3, r6, r6
 800b15e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b162:	4152      	adcs	r2, r2
 800b164:	4298      	cmp	r0, r3
 800b166:	4b98      	ldr	r3, [pc, #608]	@ (800b3c8 <__ieee754_pow+0x288>)
 800b168:	4193      	sbcs	r3, r2
 800b16a:	f080 84ea 	bcs.w	800bb42 <__ieee754_pow+0xa02>
 800b16e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b172:	4630      	mov	r0, r6
 800b174:	4639      	mov	r1, r7
 800b176:	f7f5 f8a1 	bl	80002bc <__adddf3>
 800b17a:	ec41 0b10 	vmov	d0, r0, r1
 800b17e:	b011      	add	sp, #68	@ 0x44
 800b180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b184:	4a91      	ldr	r2, [pc, #580]	@ (800b3cc <__ieee754_pow+0x28c>)
 800b186:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b18a:	4590      	cmp	r8, r2
 800b18c:	463d      	mov	r5, r7
 800b18e:	4633      	mov	r3, r6
 800b190:	d806      	bhi.n	800b1a0 <__ieee754_pow+0x60>
 800b192:	d101      	bne.n	800b198 <__ieee754_pow+0x58>
 800b194:	2e00      	cmp	r6, #0
 800b196:	d1ea      	bne.n	800b16e <__ieee754_pow+0x2e>
 800b198:	4592      	cmp	sl, r2
 800b19a:	d801      	bhi.n	800b1a0 <__ieee754_pow+0x60>
 800b19c:	d10e      	bne.n	800b1bc <__ieee754_pow+0x7c>
 800b19e:	b169      	cbz	r1, 800b1bc <__ieee754_pow+0x7c>
 800b1a0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b1a4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b1a8:	431d      	orrs	r5, r3
 800b1aa:	d1e0      	bne.n	800b16e <__ieee754_pow+0x2e>
 800b1ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b1b0:	18db      	adds	r3, r3, r3
 800b1b2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b1b6:	4152      	adcs	r2, r2
 800b1b8:	429d      	cmp	r5, r3
 800b1ba:	e7d4      	b.n	800b166 <__ieee754_pow+0x26>
 800b1bc:	2d00      	cmp	r5, #0
 800b1be:	46c3      	mov	fp, r8
 800b1c0:	da3a      	bge.n	800b238 <__ieee754_pow+0xf8>
 800b1c2:	4a83      	ldr	r2, [pc, #524]	@ (800b3d0 <__ieee754_pow+0x290>)
 800b1c4:	4592      	cmp	sl, r2
 800b1c6:	d84d      	bhi.n	800b264 <__ieee754_pow+0x124>
 800b1c8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b1cc:	4592      	cmp	sl, r2
 800b1ce:	f240 84c7 	bls.w	800bb60 <__ieee754_pow+0xa20>
 800b1d2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b1d6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b1da:	2a14      	cmp	r2, #20
 800b1dc:	dd0f      	ble.n	800b1fe <__ieee754_pow+0xbe>
 800b1de:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b1e2:	fa21 f402 	lsr.w	r4, r1, r2
 800b1e6:	fa04 f202 	lsl.w	r2, r4, r2
 800b1ea:	428a      	cmp	r2, r1
 800b1ec:	f040 84b8 	bne.w	800bb60 <__ieee754_pow+0xa20>
 800b1f0:	f004 0401 	and.w	r4, r4, #1
 800b1f4:	f1c4 0402 	rsb	r4, r4, #2
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	d158      	bne.n	800b2ae <__ieee754_pow+0x16e>
 800b1fc:	e00e      	b.n	800b21c <__ieee754_pow+0xdc>
 800b1fe:	2900      	cmp	r1, #0
 800b200:	d154      	bne.n	800b2ac <__ieee754_pow+0x16c>
 800b202:	f1c2 0214 	rsb	r2, r2, #20
 800b206:	fa4a f402 	asr.w	r4, sl, r2
 800b20a:	fa04 f202 	lsl.w	r2, r4, r2
 800b20e:	4552      	cmp	r2, sl
 800b210:	f040 84a3 	bne.w	800bb5a <__ieee754_pow+0xa1a>
 800b214:	f004 0401 	and.w	r4, r4, #1
 800b218:	f1c4 0402 	rsb	r4, r4, #2
 800b21c:	4a6d      	ldr	r2, [pc, #436]	@ (800b3d4 <__ieee754_pow+0x294>)
 800b21e:	4592      	cmp	sl, r2
 800b220:	d12e      	bne.n	800b280 <__ieee754_pow+0x140>
 800b222:	f1b9 0f00 	cmp.w	r9, #0
 800b226:	f280 8494 	bge.w	800bb52 <__ieee754_pow+0xa12>
 800b22a:	496a      	ldr	r1, [pc, #424]	@ (800b3d4 <__ieee754_pow+0x294>)
 800b22c:	4632      	mov	r2, r6
 800b22e:	463b      	mov	r3, r7
 800b230:	2000      	movs	r0, #0
 800b232:	f7f5 fb23 	bl	800087c <__aeabi_ddiv>
 800b236:	e7a0      	b.n	800b17a <__ieee754_pow+0x3a>
 800b238:	2400      	movs	r4, #0
 800b23a:	bbc1      	cbnz	r1, 800b2ae <__ieee754_pow+0x16e>
 800b23c:	4a63      	ldr	r2, [pc, #396]	@ (800b3cc <__ieee754_pow+0x28c>)
 800b23e:	4592      	cmp	sl, r2
 800b240:	d1ec      	bne.n	800b21c <__ieee754_pow+0xdc>
 800b242:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b246:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b24a:	431a      	orrs	r2, r3
 800b24c:	f000 8479 	beq.w	800bb42 <__ieee754_pow+0xa02>
 800b250:	4b61      	ldr	r3, [pc, #388]	@ (800b3d8 <__ieee754_pow+0x298>)
 800b252:	4598      	cmp	r8, r3
 800b254:	d908      	bls.n	800b268 <__ieee754_pow+0x128>
 800b256:	f1b9 0f00 	cmp.w	r9, #0
 800b25a:	f2c0 8476 	blt.w	800bb4a <__ieee754_pow+0xa0a>
 800b25e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b262:	e78a      	b.n	800b17a <__ieee754_pow+0x3a>
 800b264:	2402      	movs	r4, #2
 800b266:	e7e8      	b.n	800b23a <__ieee754_pow+0xfa>
 800b268:	f1b9 0f00 	cmp.w	r9, #0
 800b26c:	f04f 0000 	mov.w	r0, #0
 800b270:	f04f 0100 	mov.w	r1, #0
 800b274:	da81      	bge.n	800b17a <__ieee754_pow+0x3a>
 800b276:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b27a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b27e:	e77c      	b.n	800b17a <__ieee754_pow+0x3a>
 800b280:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b284:	d106      	bne.n	800b294 <__ieee754_pow+0x154>
 800b286:	4632      	mov	r2, r6
 800b288:	463b      	mov	r3, r7
 800b28a:	4630      	mov	r0, r6
 800b28c:	4639      	mov	r1, r7
 800b28e:	f7f5 f9cb 	bl	8000628 <__aeabi_dmul>
 800b292:	e772      	b.n	800b17a <__ieee754_pow+0x3a>
 800b294:	4a51      	ldr	r2, [pc, #324]	@ (800b3dc <__ieee754_pow+0x29c>)
 800b296:	4591      	cmp	r9, r2
 800b298:	d109      	bne.n	800b2ae <__ieee754_pow+0x16e>
 800b29a:	2d00      	cmp	r5, #0
 800b29c:	db07      	blt.n	800b2ae <__ieee754_pow+0x16e>
 800b29e:	ec47 6b10 	vmov	d0, r6, r7
 800b2a2:	b011      	add	sp, #68	@ 0x44
 800b2a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a8:	f7ff bb4c 	b.w	800a944 <__ieee754_sqrt>
 800b2ac:	2400      	movs	r4, #0
 800b2ae:	ec47 6b10 	vmov	d0, r6, r7
 800b2b2:	9302      	str	r3, [sp, #8]
 800b2b4:	f7ff fb32 	bl	800a91c <fabs>
 800b2b8:	9b02      	ldr	r3, [sp, #8]
 800b2ba:	ec51 0b10 	vmov	r0, r1, d0
 800b2be:	bb53      	cbnz	r3, 800b316 <__ieee754_pow+0x1d6>
 800b2c0:	4b44      	ldr	r3, [pc, #272]	@ (800b3d4 <__ieee754_pow+0x294>)
 800b2c2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d002      	beq.n	800b2d0 <__ieee754_pow+0x190>
 800b2ca:	f1b8 0f00 	cmp.w	r8, #0
 800b2ce:	d122      	bne.n	800b316 <__ieee754_pow+0x1d6>
 800b2d0:	f1b9 0f00 	cmp.w	r9, #0
 800b2d4:	da05      	bge.n	800b2e2 <__ieee754_pow+0x1a2>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	460b      	mov	r3, r1
 800b2da:	2000      	movs	r0, #0
 800b2dc:	493d      	ldr	r1, [pc, #244]	@ (800b3d4 <__ieee754_pow+0x294>)
 800b2de:	f7f5 facd 	bl	800087c <__aeabi_ddiv>
 800b2e2:	2d00      	cmp	r5, #0
 800b2e4:	f6bf af49 	bge.w	800b17a <__ieee754_pow+0x3a>
 800b2e8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b2ec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b2f0:	ea58 0804 	orrs.w	r8, r8, r4
 800b2f4:	d108      	bne.n	800b308 <__ieee754_pow+0x1c8>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	4610      	mov	r0, r2
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	f7f4 ffdb 	bl	80002b8 <__aeabi_dsub>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	e794      	b.n	800b232 <__ieee754_pow+0xf2>
 800b308:	2c01      	cmp	r4, #1
 800b30a:	f47f af36 	bne.w	800b17a <__ieee754_pow+0x3a>
 800b30e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b312:	4619      	mov	r1, r3
 800b314:	e731      	b.n	800b17a <__ieee754_pow+0x3a>
 800b316:	0feb      	lsrs	r3, r5, #31
 800b318:	3b01      	subs	r3, #1
 800b31a:	ea53 0204 	orrs.w	r2, r3, r4
 800b31e:	d102      	bne.n	800b326 <__ieee754_pow+0x1e6>
 800b320:	4632      	mov	r2, r6
 800b322:	463b      	mov	r3, r7
 800b324:	e7e9      	b.n	800b2fa <__ieee754_pow+0x1ba>
 800b326:	3c01      	subs	r4, #1
 800b328:	431c      	orrs	r4, r3
 800b32a:	d016      	beq.n	800b35a <__ieee754_pow+0x21a>
 800b32c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b3b8 <__ieee754_pow+0x278>
 800b330:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b334:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b338:	f240 8112 	bls.w	800b560 <__ieee754_pow+0x420>
 800b33c:	4b28      	ldr	r3, [pc, #160]	@ (800b3e0 <__ieee754_pow+0x2a0>)
 800b33e:	459a      	cmp	sl, r3
 800b340:	4b25      	ldr	r3, [pc, #148]	@ (800b3d8 <__ieee754_pow+0x298>)
 800b342:	d916      	bls.n	800b372 <__ieee754_pow+0x232>
 800b344:	4598      	cmp	r8, r3
 800b346:	d80b      	bhi.n	800b360 <__ieee754_pow+0x220>
 800b348:	f1b9 0f00 	cmp.w	r9, #0
 800b34c:	da0b      	bge.n	800b366 <__ieee754_pow+0x226>
 800b34e:	2000      	movs	r0, #0
 800b350:	b011      	add	sp, #68	@ 0x44
 800b352:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b356:	f000 be83 	b.w	800c060 <__math_oflow>
 800b35a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800b3c0 <__ieee754_pow+0x280>
 800b35e:	e7e7      	b.n	800b330 <__ieee754_pow+0x1f0>
 800b360:	f1b9 0f00 	cmp.w	r9, #0
 800b364:	dcf3      	bgt.n	800b34e <__ieee754_pow+0x20e>
 800b366:	2000      	movs	r0, #0
 800b368:	b011      	add	sp, #68	@ 0x44
 800b36a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36e:	f000 be6f 	b.w	800c050 <__math_uflow>
 800b372:	4598      	cmp	r8, r3
 800b374:	d20c      	bcs.n	800b390 <__ieee754_pow+0x250>
 800b376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b37a:	2200      	movs	r2, #0
 800b37c:	2300      	movs	r3, #0
 800b37e:	f7f5 fbc5 	bl	8000b0c <__aeabi_dcmplt>
 800b382:	3800      	subs	r0, #0
 800b384:	bf18      	it	ne
 800b386:	2001      	movne	r0, #1
 800b388:	f1b9 0f00 	cmp.w	r9, #0
 800b38c:	daec      	bge.n	800b368 <__ieee754_pow+0x228>
 800b38e:	e7df      	b.n	800b350 <__ieee754_pow+0x210>
 800b390:	4b10      	ldr	r3, [pc, #64]	@ (800b3d4 <__ieee754_pow+0x294>)
 800b392:	4598      	cmp	r8, r3
 800b394:	f04f 0200 	mov.w	r2, #0
 800b398:	d924      	bls.n	800b3e4 <__ieee754_pow+0x2a4>
 800b39a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	f7f5 fbb4 	bl	8000b0c <__aeabi_dcmplt>
 800b3a4:	3800      	subs	r0, #0
 800b3a6:	bf18      	it	ne
 800b3a8:	2001      	movne	r0, #1
 800b3aa:	f1b9 0f00 	cmp.w	r9, #0
 800b3ae:	dccf      	bgt.n	800b350 <__ieee754_pow+0x210>
 800b3b0:	e7da      	b.n	800b368 <__ieee754_pow+0x228>
 800b3b2:	bf00      	nop
 800b3b4:	f3af 8000 	nop.w
 800b3b8:	00000000 	.word	0x00000000
 800b3bc:	3ff00000 	.word	0x3ff00000
 800b3c0:	00000000 	.word	0x00000000
 800b3c4:	bff00000 	.word	0xbff00000
 800b3c8:	fff00000 	.word	0xfff00000
 800b3cc:	7ff00000 	.word	0x7ff00000
 800b3d0:	433fffff 	.word	0x433fffff
 800b3d4:	3ff00000 	.word	0x3ff00000
 800b3d8:	3fefffff 	.word	0x3fefffff
 800b3dc:	3fe00000 	.word	0x3fe00000
 800b3e0:	43f00000 	.word	0x43f00000
 800b3e4:	4b5a      	ldr	r3, [pc, #360]	@ (800b550 <__ieee754_pow+0x410>)
 800b3e6:	f7f4 ff67 	bl	80002b8 <__aeabi_dsub>
 800b3ea:	a351      	add	r3, pc, #324	@ (adr r3, 800b530 <__ieee754_pow+0x3f0>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	460d      	mov	r5, r1
 800b3f4:	f7f5 f918 	bl	8000628 <__aeabi_dmul>
 800b3f8:	a34f      	add	r3, pc, #316	@ (adr r3, 800b538 <__ieee754_pow+0x3f8>)
 800b3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fe:	4606      	mov	r6, r0
 800b400:	460f      	mov	r7, r1
 800b402:	4620      	mov	r0, r4
 800b404:	4629      	mov	r1, r5
 800b406:	f7f5 f90f 	bl	8000628 <__aeabi_dmul>
 800b40a:	4b52      	ldr	r3, [pc, #328]	@ (800b554 <__ieee754_pow+0x414>)
 800b40c:	4682      	mov	sl, r0
 800b40e:	468b      	mov	fp, r1
 800b410:	2200      	movs	r2, #0
 800b412:	4620      	mov	r0, r4
 800b414:	4629      	mov	r1, r5
 800b416:	f7f5 f907 	bl	8000628 <__aeabi_dmul>
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	a148      	add	r1, pc, #288	@ (adr r1, 800b540 <__ieee754_pow+0x400>)
 800b420:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b424:	f7f4 ff48 	bl	80002b8 <__aeabi_dsub>
 800b428:	4622      	mov	r2, r4
 800b42a:	462b      	mov	r3, r5
 800b42c:	f7f5 f8fc 	bl	8000628 <__aeabi_dmul>
 800b430:	4602      	mov	r2, r0
 800b432:	460b      	mov	r3, r1
 800b434:	2000      	movs	r0, #0
 800b436:	4948      	ldr	r1, [pc, #288]	@ (800b558 <__ieee754_pow+0x418>)
 800b438:	f7f4 ff3e 	bl	80002b8 <__aeabi_dsub>
 800b43c:	4622      	mov	r2, r4
 800b43e:	4680      	mov	r8, r0
 800b440:	4689      	mov	r9, r1
 800b442:	462b      	mov	r3, r5
 800b444:	4620      	mov	r0, r4
 800b446:	4629      	mov	r1, r5
 800b448:	f7f5 f8ee 	bl	8000628 <__aeabi_dmul>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4640      	mov	r0, r8
 800b452:	4649      	mov	r1, r9
 800b454:	f7f5 f8e8 	bl	8000628 <__aeabi_dmul>
 800b458:	a33b      	add	r3, pc, #236	@ (adr r3, 800b548 <__ieee754_pow+0x408>)
 800b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45e:	f7f5 f8e3 	bl	8000628 <__aeabi_dmul>
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	4650      	mov	r0, sl
 800b468:	4659      	mov	r1, fp
 800b46a:	f7f4 ff25 	bl	80002b8 <__aeabi_dsub>
 800b46e:	4602      	mov	r2, r0
 800b470:	460b      	mov	r3, r1
 800b472:	4680      	mov	r8, r0
 800b474:	4689      	mov	r9, r1
 800b476:	4630      	mov	r0, r6
 800b478:	4639      	mov	r1, r7
 800b47a:	f7f4 ff1f 	bl	80002bc <__adddf3>
 800b47e:	2400      	movs	r4, #0
 800b480:	4632      	mov	r2, r6
 800b482:	463b      	mov	r3, r7
 800b484:	4620      	mov	r0, r4
 800b486:	460d      	mov	r5, r1
 800b488:	f7f4 ff16 	bl	80002b8 <__aeabi_dsub>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4640      	mov	r0, r8
 800b492:	4649      	mov	r1, r9
 800b494:	f7f4 ff10 	bl	80002b8 <__aeabi_dsub>
 800b498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b49c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	9304      	str	r3, [sp, #16]
 800b4a4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b4a8:	4606      	mov	r6, r0
 800b4aa:	460f      	mov	r7, r1
 800b4ac:	4652      	mov	r2, sl
 800b4ae:	465b      	mov	r3, fp
 800b4b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4b4:	f7f4 ff00 	bl	80002b8 <__aeabi_dsub>
 800b4b8:	4622      	mov	r2, r4
 800b4ba:	462b      	mov	r3, r5
 800b4bc:	f7f5 f8b4 	bl	8000628 <__aeabi_dmul>
 800b4c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	4689      	mov	r9, r1
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	4639      	mov	r1, r7
 800b4cc:	f7f5 f8ac 	bl	8000628 <__aeabi_dmul>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4640      	mov	r0, r8
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	f7f4 fef0 	bl	80002bc <__adddf3>
 800b4dc:	4652      	mov	r2, sl
 800b4de:	465b      	mov	r3, fp
 800b4e0:	4606      	mov	r6, r0
 800b4e2:	460f      	mov	r7, r1
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	f7f5 f89e 	bl	8000628 <__aeabi_dmul>
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	4689      	mov	r9, r1
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	4639      	mov	r1, r7
 800b4f8:	f7f4 fee0 	bl	80002bc <__adddf3>
 800b4fc:	4b17      	ldr	r3, [pc, #92]	@ (800b55c <__ieee754_pow+0x41c>)
 800b4fe:	4299      	cmp	r1, r3
 800b500:	4604      	mov	r4, r0
 800b502:	460d      	mov	r5, r1
 800b504:	468a      	mov	sl, r1
 800b506:	468b      	mov	fp, r1
 800b508:	f340 82ef 	ble.w	800baea <__ieee754_pow+0x9aa>
 800b50c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b510:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b514:	4303      	orrs	r3, r0
 800b516:	f000 81e8 	beq.w	800b8ea <__ieee754_pow+0x7aa>
 800b51a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b51e:	2200      	movs	r2, #0
 800b520:	2300      	movs	r3, #0
 800b522:	f7f5 faf3 	bl	8000b0c <__aeabi_dcmplt>
 800b526:	3800      	subs	r0, #0
 800b528:	bf18      	it	ne
 800b52a:	2001      	movne	r0, #1
 800b52c:	e710      	b.n	800b350 <__ieee754_pow+0x210>
 800b52e:	bf00      	nop
 800b530:	60000000 	.word	0x60000000
 800b534:	3ff71547 	.word	0x3ff71547
 800b538:	f85ddf44 	.word	0xf85ddf44
 800b53c:	3e54ae0b 	.word	0x3e54ae0b
 800b540:	55555555 	.word	0x55555555
 800b544:	3fd55555 	.word	0x3fd55555
 800b548:	652b82fe 	.word	0x652b82fe
 800b54c:	3ff71547 	.word	0x3ff71547
 800b550:	3ff00000 	.word	0x3ff00000
 800b554:	3fd00000 	.word	0x3fd00000
 800b558:	3fe00000 	.word	0x3fe00000
 800b55c:	408fffff 	.word	0x408fffff
 800b560:	4bd5      	ldr	r3, [pc, #852]	@ (800b8b8 <__ieee754_pow+0x778>)
 800b562:	402b      	ands	r3, r5
 800b564:	2200      	movs	r2, #0
 800b566:	b92b      	cbnz	r3, 800b574 <__ieee754_pow+0x434>
 800b568:	4bd4      	ldr	r3, [pc, #848]	@ (800b8bc <__ieee754_pow+0x77c>)
 800b56a:	f7f5 f85d 	bl	8000628 <__aeabi_dmul>
 800b56e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800b572:	468b      	mov	fp, r1
 800b574:	ea4f 532b 	mov.w	r3, fp, asr #20
 800b578:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b57c:	4413      	add	r3, r2
 800b57e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b580:	4bcf      	ldr	r3, [pc, #828]	@ (800b8c0 <__ieee754_pow+0x780>)
 800b582:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800b586:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800b58a:	459b      	cmp	fp, r3
 800b58c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b590:	dd08      	ble.n	800b5a4 <__ieee754_pow+0x464>
 800b592:	4bcc      	ldr	r3, [pc, #816]	@ (800b8c4 <__ieee754_pow+0x784>)
 800b594:	459b      	cmp	fp, r3
 800b596:	f340 81a5 	ble.w	800b8e4 <__ieee754_pow+0x7a4>
 800b59a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b59c:	3301      	adds	r3, #1
 800b59e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5a0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b5a4:	f04f 0a00 	mov.w	sl, #0
 800b5a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b5ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5ae:	4bc6      	ldr	r3, [pc, #792]	@ (800b8c8 <__ieee754_pow+0x788>)
 800b5b0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b5b4:	ed93 7b00 	vldr	d7, [r3]
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	ec53 2b17 	vmov	r2, r3, d7
 800b5be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b5c2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b5c6:	f7f4 fe77 	bl	80002b8 <__aeabi_dsub>
 800b5ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	460f      	mov	r7, r1
 800b5d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5d6:	f7f4 fe71 	bl	80002bc <__adddf3>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	460b      	mov	r3, r1
 800b5de:	2000      	movs	r0, #0
 800b5e0:	49ba      	ldr	r1, [pc, #744]	@ (800b8cc <__ieee754_pow+0x78c>)
 800b5e2:	f7f5 f94b 	bl	800087c <__aeabi_ddiv>
 800b5e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	4639      	mov	r1, r7
 800b5f2:	f7f5 f819 	bl	8000628 <__aeabi_dmul>
 800b5f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5fa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b5fe:	106d      	asrs	r5, r5, #1
 800b600:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b604:	f04f 0b00 	mov.w	fp, #0
 800b608:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b60c:	4661      	mov	r1, ip
 800b60e:	2200      	movs	r2, #0
 800b610:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b614:	4658      	mov	r0, fp
 800b616:	46e1      	mov	r9, ip
 800b618:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b61c:	4614      	mov	r4, r2
 800b61e:	461d      	mov	r5, r3
 800b620:	f7f5 f802 	bl	8000628 <__aeabi_dmul>
 800b624:	4602      	mov	r2, r0
 800b626:	460b      	mov	r3, r1
 800b628:	4630      	mov	r0, r6
 800b62a:	4639      	mov	r1, r7
 800b62c:	f7f4 fe44 	bl	80002b8 <__aeabi_dsub>
 800b630:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b634:	4606      	mov	r6, r0
 800b636:	460f      	mov	r7, r1
 800b638:	4620      	mov	r0, r4
 800b63a:	4629      	mov	r1, r5
 800b63c:	f7f4 fe3c 	bl	80002b8 <__aeabi_dsub>
 800b640:	4602      	mov	r2, r0
 800b642:	460b      	mov	r3, r1
 800b644:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b648:	f7f4 fe36 	bl	80002b8 <__aeabi_dsub>
 800b64c:	465a      	mov	r2, fp
 800b64e:	464b      	mov	r3, r9
 800b650:	f7f4 ffea 	bl	8000628 <__aeabi_dmul>
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	4630      	mov	r0, r6
 800b65a:	4639      	mov	r1, r7
 800b65c:	f7f4 fe2c 	bl	80002b8 <__aeabi_dsub>
 800b660:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b664:	f7f4 ffe0 	bl	8000628 <__aeabi_dmul>
 800b668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b66c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b670:	4610      	mov	r0, r2
 800b672:	4619      	mov	r1, r3
 800b674:	f7f4 ffd8 	bl	8000628 <__aeabi_dmul>
 800b678:	a37d      	add	r3, pc, #500	@ (adr r3, 800b870 <__ieee754_pow+0x730>)
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	4604      	mov	r4, r0
 800b680:	460d      	mov	r5, r1
 800b682:	f7f4 ffd1 	bl	8000628 <__aeabi_dmul>
 800b686:	a37c      	add	r3, pc, #496	@ (adr r3, 800b878 <__ieee754_pow+0x738>)
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	f7f4 fe16 	bl	80002bc <__adddf3>
 800b690:	4622      	mov	r2, r4
 800b692:	462b      	mov	r3, r5
 800b694:	f7f4 ffc8 	bl	8000628 <__aeabi_dmul>
 800b698:	a379      	add	r3, pc, #484	@ (adr r3, 800b880 <__ieee754_pow+0x740>)
 800b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69e:	f7f4 fe0d 	bl	80002bc <__adddf3>
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	462b      	mov	r3, r5
 800b6a6:	f7f4 ffbf 	bl	8000628 <__aeabi_dmul>
 800b6aa:	a377      	add	r3, pc, #476	@ (adr r3, 800b888 <__ieee754_pow+0x748>)
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	f7f4 fe04 	bl	80002bc <__adddf3>
 800b6b4:	4622      	mov	r2, r4
 800b6b6:	462b      	mov	r3, r5
 800b6b8:	f7f4 ffb6 	bl	8000628 <__aeabi_dmul>
 800b6bc:	a374      	add	r3, pc, #464	@ (adr r3, 800b890 <__ieee754_pow+0x750>)
 800b6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c2:	f7f4 fdfb 	bl	80002bc <__adddf3>
 800b6c6:	4622      	mov	r2, r4
 800b6c8:	462b      	mov	r3, r5
 800b6ca:	f7f4 ffad 	bl	8000628 <__aeabi_dmul>
 800b6ce:	a372      	add	r3, pc, #456	@ (adr r3, 800b898 <__ieee754_pow+0x758>)
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	f7f4 fdf2 	bl	80002bc <__adddf3>
 800b6d8:	4622      	mov	r2, r4
 800b6da:	4606      	mov	r6, r0
 800b6dc:	460f      	mov	r7, r1
 800b6de:	462b      	mov	r3, r5
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	4629      	mov	r1, r5
 800b6e4:	f7f4 ffa0 	bl	8000628 <__aeabi_dmul>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	4639      	mov	r1, r7
 800b6f0:	f7f4 ff9a 	bl	8000628 <__aeabi_dmul>
 800b6f4:	465a      	mov	r2, fp
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	460d      	mov	r5, r1
 800b6fa:	464b      	mov	r3, r9
 800b6fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b700:	f7f4 fddc 	bl	80002bc <__adddf3>
 800b704:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b708:	f7f4 ff8e 	bl	8000628 <__aeabi_dmul>
 800b70c:	4622      	mov	r2, r4
 800b70e:	462b      	mov	r3, r5
 800b710:	f7f4 fdd4 	bl	80002bc <__adddf3>
 800b714:	465a      	mov	r2, fp
 800b716:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b71a:	464b      	mov	r3, r9
 800b71c:	4658      	mov	r0, fp
 800b71e:	4649      	mov	r1, r9
 800b720:	f7f4 ff82 	bl	8000628 <__aeabi_dmul>
 800b724:	4b6a      	ldr	r3, [pc, #424]	@ (800b8d0 <__ieee754_pow+0x790>)
 800b726:	2200      	movs	r2, #0
 800b728:	4606      	mov	r6, r0
 800b72a:	460f      	mov	r7, r1
 800b72c:	f7f4 fdc6 	bl	80002bc <__adddf3>
 800b730:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b734:	f7f4 fdc2 	bl	80002bc <__adddf3>
 800b738:	46d8      	mov	r8, fp
 800b73a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b73e:	460d      	mov	r5, r1
 800b740:	465a      	mov	r2, fp
 800b742:	460b      	mov	r3, r1
 800b744:	4640      	mov	r0, r8
 800b746:	4649      	mov	r1, r9
 800b748:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b74c:	f7f4 ff6c 	bl	8000628 <__aeabi_dmul>
 800b750:	465c      	mov	r4, fp
 800b752:	4680      	mov	r8, r0
 800b754:	4689      	mov	r9, r1
 800b756:	4b5e      	ldr	r3, [pc, #376]	@ (800b8d0 <__ieee754_pow+0x790>)
 800b758:	2200      	movs	r2, #0
 800b75a:	4620      	mov	r0, r4
 800b75c:	4629      	mov	r1, r5
 800b75e:	f7f4 fdab 	bl	80002b8 <__aeabi_dsub>
 800b762:	4632      	mov	r2, r6
 800b764:	463b      	mov	r3, r7
 800b766:	f7f4 fda7 	bl	80002b8 <__aeabi_dsub>
 800b76a:	4602      	mov	r2, r0
 800b76c:	460b      	mov	r3, r1
 800b76e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b772:	f7f4 fda1 	bl	80002b8 <__aeabi_dsub>
 800b776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b77a:	f7f4 ff55 	bl	8000628 <__aeabi_dmul>
 800b77e:	4622      	mov	r2, r4
 800b780:	4606      	mov	r6, r0
 800b782:	460f      	mov	r7, r1
 800b784:	462b      	mov	r3, r5
 800b786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b78a:	f7f4 ff4d 	bl	8000628 <__aeabi_dmul>
 800b78e:	4602      	mov	r2, r0
 800b790:	460b      	mov	r3, r1
 800b792:	4630      	mov	r0, r6
 800b794:	4639      	mov	r1, r7
 800b796:	f7f4 fd91 	bl	80002bc <__adddf3>
 800b79a:	4606      	mov	r6, r0
 800b79c:	460f      	mov	r7, r1
 800b79e:	4602      	mov	r2, r0
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	4640      	mov	r0, r8
 800b7a4:	4649      	mov	r1, r9
 800b7a6:	f7f4 fd89 	bl	80002bc <__adddf3>
 800b7aa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b7ae:	a33c      	add	r3, pc, #240	@ (adr r3, 800b8a0 <__ieee754_pow+0x760>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	4658      	mov	r0, fp
 800b7b6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b7ba:	460d      	mov	r5, r1
 800b7bc:	f7f4 ff34 	bl	8000628 <__aeabi_dmul>
 800b7c0:	465c      	mov	r4, fp
 800b7c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7c6:	4642      	mov	r2, r8
 800b7c8:	464b      	mov	r3, r9
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	f7f4 fd73 	bl	80002b8 <__aeabi_dsub>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	4639      	mov	r1, r7
 800b7da:	f7f4 fd6d 	bl	80002b8 <__aeabi_dsub>
 800b7de:	a332      	add	r3, pc, #200	@ (adr r3, 800b8a8 <__ieee754_pow+0x768>)
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	f7f4 ff20 	bl	8000628 <__aeabi_dmul>
 800b7e8:	a331      	add	r3, pc, #196	@ (adr r3, 800b8b0 <__ieee754_pow+0x770>)
 800b7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	460f      	mov	r7, r1
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	f7f4 ff17 	bl	8000628 <__aeabi_dmul>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	4630      	mov	r0, r6
 800b800:	4639      	mov	r1, r7
 800b802:	f7f4 fd5b 	bl	80002bc <__adddf3>
 800b806:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b808:	4b32      	ldr	r3, [pc, #200]	@ (800b8d4 <__ieee754_pow+0x794>)
 800b80a:	4413      	add	r3, r2
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f7f4 fd54 	bl	80002bc <__adddf3>
 800b814:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b818:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b81a:	f7f4 fe9b 	bl	8000554 <__aeabi_i2d>
 800b81e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b820:	4b2d      	ldr	r3, [pc, #180]	@ (800b8d8 <__ieee754_pow+0x798>)
 800b822:	4413      	add	r3, r2
 800b824:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b828:	4606      	mov	r6, r0
 800b82a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b82e:	460f      	mov	r7, r1
 800b830:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b834:	f7f4 fd42 	bl	80002bc <__adddf3>
 800b838:	4642      	mov	r2, r8
 800b83a:	464b      	mov	r3, r9
 800b83c:	f7f4 fd3e 	bl	80002bc <__adddf3>
 800b840:	4632      	mov	r2, r6
 800b842:	463b      	mov	r3, r7
 800b844:	f7f4 fd3a 	bl	80002bc <__adddf3>
 800b848:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b84c:	4632      	mov	r2, r6
 800b84e:	463b      	mov	r3, r7
 800b850:	4658      	mov	r0, fp
 800b852:	460d      	mov	r5, r1
 800b854:	f7f4 fd30 	bl	80002b8 <__aeabi_dsub>
 800b858:	4642      	mov	r2, r8
 800b85a:	464b      	mov	r3, r9
 800b85c:	f7f4 fd2c 	bl	80002b8 <__aeabi_dsub>
 800b860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b864:	f7f4 fd28 	bl	80002b8 <__aeabi_dsub>
 800b868:	465c      	mov	r4, fp
 800b86a:	4602      	mov	r2, r0
 800b86c:	e036      	b.n	800b8dc <__ieee754_pow+0x79c>
 800b86e:	bf00      	nop
 800b870:	4a454eef 	.word	0x4a454eef
 800b874:	3fca7e28 	.word	0x3fca7e28
 800b878:	93c9db65 	.word	0x93c9db65
 800b87c:	3fcd864a 	.word	0x3fcd864a
 800b880:	a91d4101 	.word	0xa91d4101
 800b884:	3fd17460 	.word	0x3fd17460
 800b888:	518f264d 	.word	0x518f264d
 800b88c:	3fd55555 	.word	0x3fd55555
 800b890:	db6fabff 	.word	0xdb6fabff
 800b894:	3fdb6db6 	.word	0x3fdb6db6
 800b898:	33333303 	.word	0x33333303
 800b89c:	3fe33333 	.word	0x3fe33333
 800b8a0:	e0000000 	.word	0xe0000000
 800b8a4:	3feec709 	.word	0x3feec709
 800b8a8:	dc3a03fd 	.word	0xdc3a03fd
 800b8ac:	3feec709 	.word	0x3feec709
 800b8b0:	145b01f5 	.word	0x145b01f5
 800b8b4:	be3e2fe0 	.word	0xbe3e2fe0
 800b8b8:	7ff00000 	.word	0x7ff00000
 800b8bc:	43400000 	.word	0x43400000
 800b8c0:	0003988e 	.word	0x0003988e
 800b8c4:	000bb679 	.word	0x000bb679
 800b8c8:	0800cc38 	.word	0x0800cc38
 800b8cc:	3ff00000 	.word	0x3ff00000
 800b8d0:	40080000 	.word	0x40080000
 800b8d4:	0800cc18 	.word	0x0800cc18
 800b8d8:	0800cc28 	.word	0x0800cc28
 800b8dc:	460b      	mov	r3, r1
 800b8de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8e2:	e5d7      	b.n	800b494 <__ieee754_pow+0x354>
 800b8e4:	f04f 0a01 	mov.w	sl, #1
 800b8e8:	e65e      	b.n	800b5a8 <__ieee754_pow+0x468>
 800b8ea:	a3b4      	add	r3, pc, #720	@ (adr r3, 800bbbc <__ieee754_pow+0xa7c>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	4639      	mov	r1, r7
 800b8f4:	f7f4 fce2 	bl	80002bc <__adddf3>
 800b8f8:	4642      	mov	r2, r8
 800b8fa:	e9cd 0100 	strd	r0, r1, [sp]
 800b8fe:	464b      	mov	r3, r9
 800b900:	4620      	mov	r0, r4
 800b902:	4629      	mov	r1, r5
 800b904:	f7f4 fcd8 	bl	80002b8 <__aeabi_dsub>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b910:	f7f5 f91a 	bl	8000b48 <__aeabi_dcmpgt>
 800b914:	2800      	cmp	r0, #0
 800b916:	f47f ae00 	bne.w	800b51a <__ieee754_pow+0x3da>
 800b91a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b91e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b922:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b926:	fa43 fa0a 	asr.w	sl, r3, sl
 800b92a:	44da      	add	sl, fp
 800b92c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b930:	489d      	ldr	r0, [pc, #628]	@ (800bba8 <__ieee754_pow+0xa68>)
 800b932:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b936:	4108      	asrs	r0, r1
 800b938:	ea00 030a 	and.w	r3, r0, sl
 800b93c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b940:	f1c1 0114 	rsb	r1, r1, #20
 800b944:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b948:	fa4a fa01 	asr.w	sl, sl, r1
 800b94c:	f1bb 0f00 	cmp.w	fp, #0
 800b950:	4640      	mov	r0, r8
 800b952:	4649      	mov	r1, r9
 800b954:	f04f 0200 	mov.w	r2, #0
 800b958:	bfb8      	it	lt
 800b95a:	f1ca 0a00 	rsblt	sl, sl, #0
 800b95e:	f7f4 fcab 	bl	80002b8 <__aeabi_dsub>
 800b962:	4680      	mov	r8, r0
 800b964:	4689      	mov	r9, r1
 800b966:	4632      	mov	r2, r6
 800b968:	463b      	mov	r3, r7
 800b96a:	4640      	mov	r0, r8
 800b96c:	4649      	mov	r1, r9
 800b96e:	f7f4 fca5 	bl	80002bc <__adddf3>
 800b972:	2400      	movs	r4, #0
 800b974:	a37c      	add	r3, pc, #496	@ (adr r3, 800bb68 <__ieee754_pow+0xa28>)
 800b976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97a:	4620      	mov	r0, r4
 800b97c:	460d      	mov	r5, r1
 800b97e:	f7f4 fe53 	bl	8000628 <__aeabi_dmul>
 800b982:	4642      	mov	r2, r8
 800b984:	e9cd 0100 	strd	r0, r1, [sp]
 800b988:	464b      	mov	r3, r9
 800b98a:	4620      	mov	r0, r4
 800b98c:	4629      	mov	r1, r5
 800b98e:	f7f4 fc93 	bl	80002b8 <__aeabi_dsub>
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	4630      	mov	r0, r6
 800b998:	4639      	mov	r1, r7
 800b99a:	f7f4 fc8d 	bl	80002b8 <__aeabi_dsub>
 800b99e:	a374      	add	r3, pc, #464	@ (adr r3, 800bb70 <__ieee754_pow+0xa30>)
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	f7f4 fe40 	bl	8000628 <__aeabi_dmul>
 800b9a8:	a373      	add	r3, pc, #460	@ (adr r3, 800bb78 <__ieee754_pow+0xa38>)
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	4680      	mov	r8, r0
 800b9b0:	4689      	mov	r9, r1
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	f7f4 fe37 	bl	8000628 <__aeabi_dmul>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	4640      	mov	r0, r8
 800b9c0:	4649      	mov	r1, r9
 800b9c2:	f7f4 fc7b 	bl	80002bc <__adddf3>
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	460d      	mov	r5, r1
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9d2:	f7f4 fc73 	bl	80002bc <__adddf3>
 800b9d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9da:	4680      	mov	r8, r0
 800b9dc:	4689      	mov	r9, r1
 800b9de:	f7f4 fc6b 	bl	80002b8 <__aeabi_dsub>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	f7f4 fc65 	bl	80002b8 <__aeabi_dsub>
 800b9ee:	4642      	mov	r2, r8
 800b9f0:	4606      	mov	r6, r0
 800b9f2:	460f      	mov	r7, r1
 800b9f4:	464b      	mov	r3, r9
 800b9f6:	4640      	mov	r0, r8
 800b9f8:	4649      	mov	r1, r9
 800b9fa:	f7f4 fe15 	bl	8000628 <__aeabi_dmul>
 800b9fe:	a360      	add	r3, pc, #384	@ (adr r3, 800bb80 <__ieee754_pow+0xa40>)
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	4604      	mov	r4, r0
 800ba06:	460d      	mov	r5, r1
 800ba08:	f7f4 fe0e 	bl	8000628 <__aeabi_dmul>
 800ba0c:	a35e      	add	r3, pc, #376	@ (adr r3, 800bb88 <__ieee754_pow+0xa48>)
 800ba0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba12:	f7f4 fc51 	bl	80002b8 <__aeabi_dsub>
 800ba16:	4622      	mov	r2, r4
 800ba18:	462b      	mov	r3, r5
 800ba1a:	f7f4 fe05 	bl	8000628 <__aeabi_dmul>
 800ba1e:	a35c      	add	r3, pc, #368	@ (adr r3, 800bb90 <__ieee754_pow+0xa50>)
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	f7f4 fc4a 	bl	80002bc <__adddf3>
 800ba28:	4622      	mov	r2, r4
 800ba2a:	462b      	mov	r3, r5
 800ba2c:	f7f4 fdfc 	bl	8000628 <__aeabi_dmul>
 800ba30:	a359      	add	r3, pc, #356	@ (adr r3, 800bb98 <__ieee754_pow+0xa58>)
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	f7f4 fc3f 	bl	80002b8 <__aeabi_dsub>
 800ba3a:	4622      	mov	r2, r4
 800ba3c:	462b      	mov	r3, r5
 800ba3e:	f7f4 fdf3 	bl	8000628 <__aeabi_dmul>
 800ba42:	a357      	add	r3, pc, #348	@ (adr r3, 800bba0 <__ieee754_pow+0xa60>)
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	f7f4 fc38 	bl	80002bc <__adddf3>
 800ba4c:	4622      	mov	r2, r4
 800ba4e:	462b      	mov	r3, r5
 800ba50:	f7f4 fdea 	bl	8000628 <__aeabi_dmul>
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	4640      	mov	r0, r8
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	f7f4 fc2c 	bl	80002b8 <__aeabi_dsub>
 800ba60:	4604      	mov	r4, r0
 800ba62:	460d      	mov	r5, r1
 800ba64:	4602      	mov	r2, r0
 800ba66:	460b      	mov	r3, r1
 800ba68:	4640      	mov	r0, r8
 800ba6a:	4649      	mov	r1, r9
 800ba6c:	f7f4 fddc 	bl	8000628 <__aeabi_dmul>
 800ba70:	2200      	movs	r2, #0
 800ba72:	e9cd 0100 	strd	r0, r1, [sp]
 800ba76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	f7f4 fc1b 	bl	80002b8 <__aeabi_dsub>
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba8a:	f7f4 fef7 	bl	800087c <__aeabi_ddiv>
 800ba8e:	4632      	mov	r2, r6
 800ba90:	4604      	mov	r4, r0
 800ba92:	460d      	mov	r5, r1
 800ba94:	463b      	mov	r3, r7
 800ba96:	4640      	mov	r0, r8
 800ba98:	4649      	mov	r1, r9
 800ba9a:	f7f4 fdc5 	bl	8000628 <__aeabi_dmul>
 800ba9e:	4632      	mov	r2, r6
 800baa0:	463b      	mov	r3, r7
 800baa2:	f7f4 fc0b 	bl	80002bc <__adddf3>
 800baa6:	4602      	mov	r2, r0
 800baa8:	460b      	mov	r3, r1
 800baaa:	4620      	mov	r0, r4
 800baac:	4629      	mov	r1, r5
 800baae:	f7f4 fc03 	bl	80002b8 <__aeabi_dsub>
 800bab2:	4642      	mov	r2, r8
 800bab4:	464b      	mov	r3, r9
 800bab6:	f7f4 fbff 	bl	80002b8 <__aeabi_dsub>
 800baba:	460b      	mov	r3, r1
 800babc:	4602      	mov	r2, r0
 800babe:	493b      	ldr	r1, [pc, #236]	@ (800bbac <__ieee754_pow+0xa6c>)
 800bac0:	2000      	movs	r0, #0
 800bac2:	f7f4 fbf9 	bl	80002b8 <__aeabi_dsub>
 800bac6:	ec41 0b10 	vmov	d0, r0, r1
 800baca:	ee10 3a90 	vmov	r3, s1
 800bace:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bad6:	da30      	bge.n	800bb3a <__ieee754_pow+0x9fa>
 800bad8:	4650      	mov	r0, sl
 800bada:	f000 fa0d 	bl	800bef8 <scalbn>
 800bade:	ec51 0b10 	vmov	r0, r1, d0
 800bae2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bae6:	f7ff bbd2 	b.w	800b28e <__ieee754_pow+0x14e>
 800baea:	4c31      	ldr	r4, [pc, #196]	@ (800bbb0 <__ieee754_pow+0xa70>)
 800baec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800baf0:	42a3      	cmp	r3, r4
 800baf2:	d91a      	bls.n	800bb2a <__ieee754_pow+0x9ea>
 800baf4:	4b2f      	ldr	r3, [pc, #188]	@ (800bbb4 <__ieee754_pow+0xa74>)
 800baf6:	440b      	add	r3, r1
 800baf8:	4303      	orrs	r3, r0
 800bafa:	d009      	beq.n	800bb10 <__ieee754_pow+0x9d0>
 800bafc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb00:	2200      	movs	r2, #0
 800bb02:	2300      	movs	r3, #0
 800bb04:	f7f5 f802 	bl	8000b0c <__aeabi_dcmplt>
 800bb08:	3800      	subs	r0, #0
 800bb0a:	bf18      	it	ne
 800bb0c:	2001      	movne	r0, #1
 800bb0e:	e42b      	b.n	800b368 <__ieee754_pow+0x228>
 800bb10:	4642      	mov	r2, r8
 800bb12:	464b      	mov	r3, r9
 800bb14:	f7f4 fbd0 	bl	80002b8 <__aeabi_dsub>
 800bb18:	4632      	mov	r2, r6
 800bb1a:	463b      	mov	r3, r7
 800bb1c:	f7f5 f80a 	bl	8000b34 <__aeabi_dcmpge>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d1eb      	bne.n	800bafc <__ieee754_pow+0x9bc>
 800bb24:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800bbc4 <__ieee754_pow+0xa84>
 800bb28:	e6f7      	b.n	800b91a <__ieee754_pow+0x7da>
 800bb2a:	469a      	mov	sl, r3
 800bb2c:	4b22      	ldr	r3, [pc, #136]	@ (800bbb8 <__ieee754_pow+0xa78>)
 800bb2e:	459a      	cmp	sl, r3
 800bb30:	f63f aef3 	bhi.w	800b91a <__ieee754_pow+0x7da>
 800bb34:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bb38:	e715      	b.n	800b966 <__ieee754_pow+0x826>
 800bb3a:	ec51 0b10 	vmov	r0, r1, d0
 800bb3e:	4619      	mov	r1, r3
 800bb40:	e7cf      	b.n	800bae2 <__ieee754_pow+0x9a2>
 800bb42:	491a      	ldr	r1, [pc, #104]	@ (800bbac <__ieee754_pow+0xa6c>)
 800bb44:	2000      	movs	r0, #0
 800bb46:	f7ff bb18 	b.w	800b17a <__ieee754_pow+0x3a>
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	f7ff bb14 	b.w	800b17a <__ieee754_pow+0x3a>
 800bb52:	4630      	mov	r0, r6
 800bb54:	4639      	mov	r1, r7
 800bb56:	f7ff bb10 	b.w	800b17a <__ieee754_pow+0x3a>
 800bb5a:	460c      	mov	r4, r1
 800bb5c:	f7ff bb5e 	b.w	800b21c <__ieee754_pow+0xdc>
 800bb60:	2400      	movs	r4, #0
 800bb62:	f7ff bb49 	b.w	800b1f8 <__ieee754_pow+0xb8>
 800bb66:	bf00      	nop
 800bb68:	00000000 	.word	0x00000000
 800bb6c:	3fe62e43 	.word	0x3fe62e43
 800bb70:	fefa39ef 	.word	0xfefa39ef
 800bb74:	3fe62e42 	.word	0x3fe62e42
 800bb78:	0ca86c39 	.word	0x0ca86c39
 800bb7c:	be205c61 	.word	0xbe205c61
 800bb80:	72bea4d0 	.word	0x72bea4d0
 800bb84:	3e663769 	.word	0x3e663769
 800bb88:	c5d26bf1 	.word	0xc5d26bf1
 800bb8c:	3ebbbd41 	.word	0x3ebbbd41
 800bb90:	af25de2c 	.word	0xaf25de2c
 800bb94:	3f11566a 	.word	0x3f11566a
 800bb98:	16bebd93 	.word	0x16bebd93
 800bb9c:	3f66c16c 	.word	0x3f66c16c
 800bba0:	5555553e 	.word	0x5555553e
 800bba4:	3fc55555 	.word	0x3fc55555
 800bba8:	fff00000 	.word	0xfff00000
 800bbac:	3ff00000 	.word	0x3ff00000
 800bbb0:	4090cbff 	.word	0x4090cbff
 800bbb4:	3f6f3400 	.word	0x3f6f3400
 800bbb8:	3fe00000 	.word	0x3fe00000
 800bbbc:	652b82fe 	.word	0x652b82fe
 800bbc0:	3c971547 	.word	0x3c971547
 800bbc4:	4090cc00 	.word	0x4090cc00

0800bbc8 <atan>:
 800bbc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbcc:	ec55 4b10 	vmov	r4, r5, d0
 800bbd0:	4bbf      	ldr	r3, [pc, #764]	@ (800bed0 <atan+0x308>)
 800bbd2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800bbd6:	429e      	cmp	r6, r3
 800bbd8:	46ab      	mov	fp, r5
 800bbda:	d918      	bls.n	800bc0e <atan+0x46>
 800bbdc:	4bbd      	ldr	r3, [pc, #756]	@ (800bed4 <atan+0x30c>)
 800bbde:	429e      	cmp	r6, r3
 800bbe0:	d801      	bhi.n	800bbe6 <atan+0x1e>
 800bbe2:	d109      	bne.n	800bbf8 <atan+0x30>
 800bbe4:	b144      	cbz	r4, 800bbf8 <atan+0x30>
 800bbe6:	4622      	mov	r2, r4
 800bbe8:	462b      	mov	r3, r5
 800bbea:	4620      	mov	r0, r4
 800bbec:	4629      	mov	r1, r5
 800bbee:	f7f4 fb65 	bl	80002bc <__adddf3>
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	460d      	mov	r5, r1
 800bbf6:	e006      	b.n	800bc06 <atan+0x3e>
 800bbf8:	f1bb 0f00 	cmp.w	fp, #0
 800bbfc:	f340 812b 	ble.w	800be56 <atan+0x28e>
 800bc00:	a597      	add	r5, pc, #604	@ (adr r5, 800be60 <atan+0x298>)
 800bc02:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc06:	ec45 4b10 	vmov	d0, r4, r5
 800bc0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc0e:	4bb2      	ldr	r3, [pc, #712]	@ (800bed8 <atan+0x310>)
 800bc10:	429e      	cmp	r6, r3
 800bc12:	d813      	bhi.n	800bc3c <atan+0x74>
 800bc14:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800bc18:	429e      	cmp	r6, r3
 800bc1a:	d80c      	bhi.n	800bc36 <atan+0x6e>
 800bc1c:	a392      	add	r3, pc, #584	@ (adr r3, 800be68 <atan+0x2a0>)
 800bc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc22:	4620      	mov	r0, r4
 800bc24:	4629      	mov	r1, r5
 800bc26:	f7f4 fb49 	bl	80002bc <__adddf3>
 800bc2a:	4bac      	ldr	r3, [pc, #688]	@ (800bedc <atan+0x314>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f7f4 ff8b 	bl	8000b48 <__aeabi_dcmpgt>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d1e7      	bne.n	800bc06 <atan+0x3e>
 800bc36:	f04f 3aff 	mov.w	sl, #4294967295
 800bc3a:	e029      	b.n	800bc90 <atan+0xc8>
 800bc3c:	f7fe fe6e 	bl	800a91c <fabs>
 800bc40:	4ba7      	ldr	r3, [pc, #668]	@ (800bee0 <atan+0x318>)
 800bc42:	429e      	cmp	r6, r3
 800bc44:	ec55 4b10 	vmov	r4, r5, d0
 800bc48:	f200 80bc 	bhi.w	800bdc4 <atan+0x1fc>
 800bc4c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800bc50:	429e      	cmp	r6, r3
 800bc52:	f200 809e 	bhi.w	800bd92 <atan+0x1ca>
 800bc56:	4622      	mov	r2, r4
 800bc58:	462b      	mov	r3, r5
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	f7f4 fb2d 	bl	80002bc <__adddf3>
 800bc62:	4b9e      	ldr	r3, [pc, #632]	@ (800bedc <atan+0x314>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	f7f4 fb27 	bl	80002b8 <__aeabi_dsub>
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	460f      	mov	r7, r1
 800bc70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bc74:	4620      	mov	r0, r4
 800bc76:	4629      	mov	r1, r5
 800bc78:	f7f4 fb20 	bl	80002bc <__adddf3>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	4630      	mov	r0, r6
 800bc82:	4639      	mov	r1, r7
 800bc84:	f7f4 fdfa 	bl	800087c <__aeabi_ddiv>
 800bc88:	f04f 0a00 	mov.w	sl, #0
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	460d      	mov	r5, r1
 800bc90:	4622      	mov	r2, r4
 800bc92:	462b      	mov	r3, r5
 800bc94:	4620      	mov	r0, r4
 800bc96:	4629      	mov	r1, r5
 800bc98:	f7f4 fcc6 	bl	8000628 <__aeabi_dmul>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4680      	mov	r8, r0
 800bca2:	4689      	mov	r9, r1
 800bca4:	f7f4 fcc0 	bl	8000628 <__aeabi_dmul>
 800bca8:	a371      	add	r3, pc, #452	@ (adr r3, 800be70 <atan+0x2a8>)
 800bcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcae:	4606      	mov	r6, r0
 800bcb0:	460f      	mov	r7, r1
 800bcb2:	f7f4 fcb9 	bl	8000628 <__aeabi_dmul>
 800bcb6:	a370      	add	r3, pc, #448	@ (adr r3, 800be78 <atan+0x2b0>)
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	f7f4 fafe 	bl	80002bc <__adddf3>
 800bcc0:	4632      	mov	r2, r6
 800bcc2:	463b      	mov	r3, r7
 800bcc4:	f7f4 fcb0 	bl	8000628 <__aeabi_dmul>
 800bcc8:	a36d      	add	r3, pc, #436	@ (adr r3, 800be80 <atan+0x2b8>)
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	f7f4 faf5 	bl	80002bc <__adddf3>
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	463b      	mov	r3, r7
 800bcd6:	f7f4 fca7 	bl	8000628 <__aeabi_dmul>
 800bcda:	a36b      	add	r3, pc, #428	@ (adr r3, 800be88 <atan+0x2c0>)
 800bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce0:	f7f4 faec 	bl	80002bc <__adddf3>
 800bce4:	4632      	mov	r2, r6
 800bce6:	463b      	mov	r3, r7
 800bce8:	f7f4 fc9e 	bl	8000628 <__aeabi_dmul>
 800bcec:	a368      	add	r3, pc, #416	@ (adr r3, 800be90 <atan+0x2c8>)
 800bcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf2:	f7f4 fae3 	bl	80002bc <__adddf3>
 800bcf6:	4632      	mov	r2, r6
 800bcf8:	463b      	mov	r3, r7
 800bcfa:	f7f4 fc95 	bl	8000628 <__aeabi_dmul>
 800bcfe:	a366      	add	r3, pc, #408	@ (adr r3, 800be98 <atan+0x2d0>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	f7f4 fada 	bl	80002bc <__adddf3>
 800bd08:	4642      	mov	r2, r8
 800bd0a:	464b      	mov	r3, r9
 800bd0c:	f7f4 fc8c 	bl	8000628 <__aeabi_dmul>
 800bd10:	a363      	add	r3, pc, #396	@ (adr r3, 800bea0 <atan+0x2d8>)
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	4680      	mov	r8, r0
 800bd18:	4689      	mov	r9, r1
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	4639      	mov	r1, r7
 800bd1e:	f7f4 fc83 	bl	8000628 <__aeabi_dmul>
 800bd22:	a361      	add	r3, pc, #388	@ (adr r3, 800bea8 <atan+0x2e0>)
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f7f4 fac6 	bl	80002b8 <__aeabi_dsub>
 800bd2c:	4632      	mov	r2, r6
 800bd2e:	463b      	mov	r3, r7
 800bd30:	f7f4 fc7a 	bl	8000628 <__aeabi_dmul>
 800bd34:	a35e      	add	r3, pc, #376	@ (adr r3, 800beb0 <atan+0x2e8>)
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	f7f4 fabd 	bl	80002b8 <__aeabi_dsub>
 800bd3e:	4632      	mov	r2, r6
 800bd40:	463b      	mov	r3, r7
 800bd42:	f7f4 fc71 	bl	8000628 <__aeabi_dmul>
 800bd46:	a35c      	add	r3, pc, #368	@ (adr r3, 800beb8 <atan+0x2f0>)
 800bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4c:	f7f4 fab4 	bl	80002b8 <__aeabi_dsub>
 800bd50:	4632      	mov	r2, r6
 800bd52:	463b      	mov	r3, r7
 800bd54:	f7f4 fc68 	bl	8000628 <__aeabi_dmul>
 800bd58:	a359      	add	r3, pc, #356	@ (adr r3, 800bec0 <atan+0x2f8>)
 800bd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5e:	f7f4 faab 	bl	80002b8 <__aeabi_dsub>
 800bd62:	4632      	mov	r2, r6
 800bd64:	463b      	mov	r3, r7
 800bd66:	f7f4 fc5f 	bl	8000628 <__aeabi_dmul>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	4640      	mov	r0, r8
 800bd70:	4649      	mov	r1, r9
 800bd72:	f7f4 faa3 	bl	80002bc <__adddf3>
 800bd76:	4622      	mov	r2, r4
 800bd78:	462b      	mov	r3, r5
 800bd7a:	f7f4 fc55 	bl	8000628 <__aeabi_dmul>
 800bd7e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	d148      	bne.n	800be1a <atan+0x252>
 800bd88:	4620      	mov	r0, r4
 800bd8a:	4629      	mov	r1, r5
 800bd8c:	f7f4 fa94 	bl	80002b8 <__aeabi_dsub>
 800bd90:	e72f      	b.n	800bbf2 <atan+0x2a>
 800bd92:	4b52      	ldr	r3, [pc, #328]	@ (800bedc <atan+0x314>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	4620      	mov	r0, r4
 800bd98:	4629      	mov	r1, r5
 800bd9a:	f7f4 fa8d 	bl	80002b8 <__aeabi_dsub>
 800bd9e:	4b4f      	ldr	r3, [pc, #316]	@ (800bedc <atan+0x314>)
 800bda0:	4606      	mov	r6, r0
 800bda2:	460f      	mov	r7, r1
 800bda4:	2200      	movs	r2, #0
 800bda6:	4620      	mov	r0, r4
 800bda8:	4629      	mov	r1, r5
 800bdaa:	f7f4 fa87 	bl	80002bc <__adddf3>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	4639      	mov	r1, r7
 800bdb6:	f7f4 fd61 	bl	800087c <__aeabi_ddiv>
 800bdba:	f04f 0a01 	mov.w	sl, #1
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	460d      	mov	r5, r1
 800bdc2:	e765      	b.n	800bc90 <atan+0xc8>
 800bdc4:	4b47      	ldr	r3, [pc, #284]	@ (800bee4 <atan+0x31c>)
 800bdc6:	429e      	cmp	r6, r3
 800bdc8:	d21c      	bcs.n	800be04 <atan+0x23c>
 800bdca:	4b47      	ldr	r3, [pc, #284]	@ (800bee8 <atan+0x320>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	4620      	mov	r0, r4
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	f7f4 fa71 	bl	80002b8 <__aeabi_dsub>
 800bdd6:	4b44      	ldr	r3, [pc, #272]	@ (800bee8 <atan+0x320>)
 800bdd8:	4606      	mov	r6, r0
 800bdda:	460f      	mov	r7, r1
 800bddc:	2200      	movs	r2, #0
 800bdde:	4620      	mov	r0, r4
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7f4 fc21 	bl	8000628 <__aeabi_dmul>
 800bde6:	4b3d      	ldr	r3, [pc, #244]	@ (800bedc <atan+0x314>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	f7f4 fa67 	bl	80002bc <__adddf3>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	4639      	mov	r1, r7
 800bdf6:	f7f4 fd41 	bl	800087c <__aeabi_ddiv>
 800bdfa:	f04f 0a02 	mov.w	sl, #2
 800bdfe:	4604      	mov	r4, r0
 800be00:	460d      	mov	r5, r1
 800be02:	e745      	b.n	800bc90 <atan+0xc8>
 800be04:	4622      	mov	r2, r4
 800be06:	462b      	mov	r3, r5
 800be08:	4938      	ldr	r1, [pc, #224]	@ (800beec <atan+0x324>)
 800be0a:	2000      	movs	r0, #0
 800be0c:	f7f4 fd36 	bl	800087c <__aeabi_ddiv>
 800be10:	f04f 0a03 	mov.w	sl, #3
 800be14:	4604      	mov	r4, r0
 800be16:	460d      	mov	r5, r1
 800be18:	e73a      	b.n	800bc90 <atan+0xc8>
 800be1a:	4b35      	ldr	r3, [pc, #212]	@ (800bef0 <atan+0x328>)
 800be1c:	4e35      	ldr	r6, [pc, #212]	@ (800bef4 <atan+0x32c>)
 800be1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800be22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be26:	f7f4 fa47 	bl	80002b8 <__aeabi_dsub>
 800be2a:	4622      	mov	r2, r4
 800be2c:	462b      	mov	r3, r5
 800be2e:	f7f4 fa43 	bl	80002b8 <__aeabi_dsub>
 800be32:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800be36:	4602      	mov	r2, r0
 800be38:	460b      	mov	r3, r1
 800be3a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800be3e:	f7f4 fa3b 	bl	80002b8 <__aeabi_dsub>
 800be42:	f1bb 0f00 	cmp.w	fp, #0
 800be46:	4604      	mov	r4, r0
 800be48:	460d      	mov	r5, r1
 800be4a:	f6bf aedc 	bge.w	800bc06 <atan+0x3e>
 800be4e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be52:	461d      	mov	r5, r3
 800be54:	e6d7      	b.n	800bc06 <atan+0x3e>
 800be56:	a51c      	add	r5, pc, #112	@ (adr r5, 800bec8 <atan+0x300>)
 800be58:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be5c:	e6d3      	b.n	800bc06 <atan+0x3e>
 800be5e:	bf00      	nop
 800be60:	54442d18 	.word	0x54442d18
 800be64:	3ff921fb 	.word	0x3ff921fb
 800be68:	8800759c 	.word	0x8800759c
 800be6c:	7e37e43c 	.word	0x7e37e43c
 800be70:	e322da11 	.word	0xe322da11
 800be74:	3f90ad3a 	.word	0x3f90ad3a
 800be78:	24760deb 	.word	0x24760deb
 800be7c:	3fa97b4b 	.word	0x3fa97b4b
 800be80:	a0d03d51 	.word	0xa0d03d51
 800be84:	3fb10d66 	.word	0x3fb10d66
 800be88:	c54c206e 	.word	0xc54c206e
 800be8c:	3fb745cd 	.word	0x3fb745cd
 800be90:	920083ff 	.word	0x920083ff
 800be94:	3fc24924 	.word	0x3fc24924
 800be98:	5555550d 	.word	0x5555550d
 800be9c:	3fd55555 	.word	0x3fd55555
 800bea0:	2c6a6c2f 	.word	0x2c6a6c2f
 800bea4:	bfa2b444 	.word	0xbfa2b444
 800bea8:	52defd9a 	.word	0x52defd9a
 800beac:	3fadde2d 	.word	0x3fadde2d
 800beb0:	af749a6d 	.word	0xaf749a6d
 800beb4:	3fb3b0f2 	.word	0x3fb3b0f2
 800beb8:	fe231671 	.word	0xfe231671
 800bebc:	3fbc71c6 	.word	0x3fbc71c6
 800bec0:	9998ebc4 	.word	0x9998ebc4
 800bec4:	3fc99999 	.word	0x3fc99999
 800bec8:	54442d18 	.word	0x54442d18
 800becc:	bff921fb 	.word	0xbff921fb
 800bed0:	440fffff 	.word	0x440fffff
 800bed4:	7ff00000 	.word	0x7ff00000
 800bed8:	3fdbffff 	.word	0x3fdbffff
 800bedc:	3ff00000 	.word	0x3ff00000
 800bee0:	3ff2ffff 	.word	0x3ff2ffff
 800bee4:	40038000 	.word	0x40038000
 800bee8:	3ff80000 	.word	0x3ff80000
 800beec:	bff00000 	.word	0xbff00000
 800bef0:	0800cc48 	.word	0x0800cc48
 800bef4:	0800cc68 	.word	0x0800cc68

0800bef8 <scalbn>:
 800bef8:	b570      	push	{r4, r5, r6, lr}
 800befa:	ec55 4b10 	vmov	r4, r5, d0
 800befe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bf02:	4606      	mov	r6, r0
 800bf04:	462b      	mov	r3, r5
 800bf06:	b991      	cbnz	r1, 800bf2e <scalbn+0x36>
 800bf08:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bf0c:	4323      	orrs	r3, r4
 800bf0e:	d03d      	beq.n	800bf8c <scalbn+0x94>
 800bf10:	4b35      	ldr	r3, [pc, #212]	@ (800bfe8 <scalbn+0xf0>)
 800bf12:	4620      	mov	r0, r4
 800bf14:	4629      	mov	r1, r5
 800bf16:	2200      	movs	r2, #0
 800bf18:	f7f4 fb86 	bl	8000628 <__aeabi_dmul>
 800bf1c:	4b33      	ldr	r3, [pc, #204]	@ (800bfec <scalbn+0xf4>)
 800bf1e:	429e      	cmp	r6, r3
 800bf20:	4604      	mov	r4, r0
 800bf22:	460d      	mov	r5, r1
 800bf24:	da0f      	bge.n	800bf46 <scalbn+0x4e>
 800bf26:	a328      	add	r3, pc, #160	@ (adr r3, 800bfc8 <scalbn+0xd0>)
 800bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2c:	e01e      	b.n	800bf6c <scalbn+0x74>
 800bf2e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bf32:	4291      	cmp	r1, r2
 800bf34:	d10b      	bne.n	800bf4e <scalbn+0x56>
 800bf36:	4622      	mov	r2, r4
 800bf38:	4620      	mov	r0, r4
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	f7f4 f9be 	bl	80002bc <__adddf3>
 800bf40:	4604      	mov	r4, r0
 800bf42:	460d      	mov	r5, r1
 800bf44:	e022      	b.n	800bf8c <scalbn+0x94>
 800bf46:	460b      	mov	r3, r1
 800bf48:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bf4c:	3936      	subs	r1, #54	@ 0x36
 800bf4e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bf52:	4296      	cmp	r6, r2
 800bf54:	dd0d      	ble.n	800bf72 <scalbn+0x7a>
 800bf56:	2d00      	cmp	r5, #0
 800bf58:	a11d      	add	r1, pc, #116	@ (adr r1, 800bfd0 <scalbn+0xd8>)
 800bf5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf5e:	da02      	bge.n	800bf66 <scalbn+0x6e>
 800bf60:	a11d      	add	r1, pc, #116	@ (adr r1, 800bfd8 <scalbn+0xe0>)
 800bf62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf66:	a31a      	add	r3, pc, #104	@ (adr r3, 800bfd0 <scalbn+0xd8>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	f7f4 fb5c 	bl	8000628 <__aeabi_dmul>
 800bf70:	e7e6      	b.n	800bf40 <scalbn+0x48>
 800bf72:	1872      	adds	r2, r6, r1
 800bf74:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bf78:	428a      	cmp	r2, r1
 800bf7a:	dcec      	bgt.n	800bf56 <scalbn+0x5e>
 800bf7c:	2a00      	cmp	r2, #0
 800bf7e:	dd08      	ble.n	800bf92 <scalbn+0x9a>
 800bf80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bf84:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bf88:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf8c:	ec45 4b10 	vmov	d0, r4, r5
 800bf90:	bd70      	pop	{r4, r5, r6, pc}
 800bf92:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bf96:	da08      	bge.n	800bfaa <scalbn+0xb2>
 800bf98:	2d00      	cmp	r5, #0
 800bf9a:	a10b      	add	r1, pc, #44	@ (adr r1, 800bfc8 <scalbn+0xd0>)
 800bf9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfa0:	dac1      	bge.n	800bf26 <scalbn+0x2e>
 800bfa2:	a10f      	add	r1, pc, #60	@ (adr r1, 800bfe0 <scalbn+0xe8>)
 800bfa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfa8:	e7bd      	b.n	800bf26 <scalbn+0x2e>
 800bfaa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bfae:	3236      	adds	r2, #54	@ 0x36
 800bfb0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bfb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bfb8:	4620      	mov	r0, r4
 800bfba:	4b0d      	ldr	r3, [pc, #52]	@ (800bff0 <scalbn+0xf8>)
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	e7d4      	b.n	800bf6c <scalbn+0x74>
 800bfc2:	bf00      	nop
 800bfc4:	f3af 8000 	nop.w
 800bfc8:	c2f8f359 	.word	0xc2f8f359
 800bfcc:	01a56e1f 	.word	0x01a56e1f
 800bfd0:	8800759c 	.word	0x8800759c
 800bfd4:	7e37e43c 	.word	0x7e37e43c
 800bfd8:	8800759c 	.word	0x8800759c
 800bfdc:	fe37e43c 	.word	0xfe37e43c
 800bfe0:	c2f8f359 	.word	0xc2f8f359
 800bfe4:	81a56e1f 	.word	0x81a56e1f
 800bfe8:	43500000 	.word	0x43500000
 800bfec:	ffff3cb0 	.word	0xffff3cb0
 800bff0:	3c900000 	.word	0x3c900000

0800bff4 <with_errno>:
 800bff4:	b510      	push	{r4, lr}
 800bff6:	ed2d 8b02 	vpush	{d8}
 800bffa:	eeb0 8a40 	vmov.f32	s16, s0
 800bffe:	eef0 8a60 	vmov.f32	s17, s1
 800c002:	4604      	mov	r4, r0
 800c004:	f7fb f8a0 	bl	8007148 <__errno>
 800c008:	eeb0 0a48 	vmov.f32	s0, s16
 800c00c:	eef0 0a68 	vmov.f32	s1, s17
 800c010:	ecbd 8b02 	vpop	{d8}
 800c014:	6004      	str	r4, [r0, #0]
 800c016:	bd10      	pop	{r4, pc}

0800c018 <xflow>:
 800c018:	4603      	mov	r3, r0
 800c01a:	b507      	push	{r0, r1, r2, lr}
 800c01c:	ec51 0b10 	vmov	r0, r1, d0
 800c020:	b183      	cbz	r3, 800c044 <xflow+0x2c>
 800c022:	4602      	mov	r2, r0
 800c024:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c028:	e9cd 2300 	strd	r2, r3, [sp]
 800c02c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c030:	f7f4 fafa 	bl	8000628 <__aeabi_dmul>
 800c034:	ec41 0b10 	vmov	d0, r0, r1
 800c038:	2022      	movs	r0, #34	@ 0x22
 800c03a:	b003      	add	sp, #12
 800c03c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c040:	f7ff bfd8 	b.w	800bff4 <with_errno>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	e7ee      	b.n	800c028 <xflow+0x10>
 800c04a:	0000      	movs	r0, r0
 800c04c:	0000      	movs	r0, r0
	...

0800c050 <__math_uflow>:
 800c050:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c058 <__math_uflow+0x8>
 800c054:	f7ff bfe0 	b.w	800c018 <xflow>
 800c058:	00000000 	.word	0x00000000
 800c05c:	10000000 	.word	0x10000000

0800c060 <__math_oflow>:
 800c060:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c068 <__math_oflow+0x8>
 800c064:	f7ff bfd8 	b.w	800c018 <xflow>
 800c068:	00000000 	.word	0x00000000
 800c06c:	70000000 	.word	0x70000000

0800c070 <_init>:
 800c070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c072:	bf00      	nop
 800c074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c076:	bc08      	pop	{r3}
 800c078:	469e      	mov	lr, r3
 800c07a:	4770      	bx	lr

0800c07c <_fini>:
 800c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07e:	bf00      	nop
 800c080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c082:	bc08      	pop	{r3}
 800c084:	469e      	mov	lr, r3
 800c086:	4770      	bx	lr
